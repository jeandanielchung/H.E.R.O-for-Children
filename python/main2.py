import Tkinter as tk
from Tkinter import *
from tkMessageBox import *
import tkMessageBox
import pymysql

#TODO: Immunization PDF

class Main():

    session = {}
    PrevPage = ''
    searchCriteria = {}
    prevSection = -1
    
    def __init__(self,root):
        self.root = root
        self.LoginPage()
        self.username = ""
        self.session['login'] = False
    def connect(self):
        try:
            db = pymysql.connect(
                host = "localhost",
                user="root",
                passwd = "2011",
                db="HERO")
            exitOK = False
            return db
        except:
            tkMessageBox.showinfo("Error!","Check your internet connection.")

    def disConnect(self, curr, db):
        curr.close()
        db.close()

        exitOK = True
            
    def exit(self):
        if exitOK:
            self.root.destroy()

#******************************************************************************************************************************************************

    def LoginPage(self):
        global exitOK
        exitOK = True

        self.root.withdraw()

        self.LoginPageRoot = Toplevel()
        root = self.LoginPageRoot

        if self.PrevPage is 'HomePage':
            self.HomePageRoot.withdraw()
        self.PrevPage = 'LoginPage'

        master = Frame(root)
        master.grid(row=0,column=0, columnspan=4)

        root.title("Login Page")

        self.session['login'] = False
        self.session['username'] = None
        self.session['credentials'] = None

        labelUsername = Label(master, text = "Username")
        labelUsername.grid(row = 1, column = 1)

        entryUsername = Entry(master, bd = 5)
        entryUsername.grid(row = 1, column = 2)

        labelPassword = Label(master, text = "Password")
        labelPassword.grid(row = 2, column = 1)

        entryPassword = Entry(master, bd = 5, show = "*")
        entryPassword.grid(row = 2, column = 2)

        loginButton = Button(master, text = "login", command = lambda: self.login(entryUsername.get(), entryPassword.get(),))
        loginButton.grid(row = 3, column = 2)
        
        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 0)

    def login(self, username, password):

       #Database Connection
        db = self.connect()
        curr = db.cursor()


        curr.execute("SELECT * FROM User WHERE Username = %s AND Password = SHA1(%s)", (username, password,))
        result = curr.fetchone()

        if result is not None: # if the result isn't None then there is a user/password combination match
            self.session['login'] = True
            self.session['username'] = username
            self.session['credentials'] = result[3]            
            
            self.disConnect(curr, db)
            
            self.HomePage()
        else:
            tkMessageBox.showinfo("Login Page", "Either password or username was incorrect, try again")
            self.disConnect(curr, db)


#******************************************************************************************************************************************************

    def HomePage(self):

        self.HomePageRoot = Toplevel()
        root = self.HomePageRoot
        if self.PrevPage is 'LoginPage':
            self.LoginPageRoot.withdraw()
        elif self.PrevPage is 'AdminUserPage':
            self.AdminUserPageRoot.withdraw()
        elif self.PrevPage is 'SearchPage':
            self.SearchPageRoot.withdraw()
        elif self.PrevPage is 'AddNewAppPage':
            self.AddNewAppPageRoot.withdraw()
        self.PrevPage = 'HomePage'

        root.title("Home Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        username = self.session['username']
        credentials = self.session['credentials']

        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)
        
        logoutButton = Button(master, text = "Log Out", command=lambda: self.LoginPage())
        logoutButton.grid(row = 0, column = 0)

        newAppButton = Button(master, text = "Add New Application", command=lambda: self.AddNewAppPage())
        newAppButton.grid(row = 1, column = 3, padx = 185, pady = 10)

        if (credentials == 'Administrator' or credentials == 'Manager'):
            searchButton = Button(master, text = "Search",  command=lambda: self.SearchPage())
            searchButton.grid(row = 2, column = 3, padx = 185, pady = 10)

        if (credentials == 'Administrator'):
            adminButton = Button(master, text = "Administrate Users", command=lambda: self.AdminUserPage())
            adminButton.grid(row = 3, column = 3, padx = 185, pady = 10)

#******************************************************************************************************************************************************

    def AddNewAppPage(self):

        self.AddNewAppPageRoot = Toplevel()
        root = self.AddNewAppPageRoot

        if self.PrevPage is 'HomePage':
            self.HomePageRoot.withdraw()
        if self.PrevPage is 'NewAppReturningPage':
            self.NewAppReturningPageRoot.withdraw()
        if self.PrevPage is 'NewChildProfilePage':
            self.NewChildProfilePageRoot.withdraw()
        if self.PrevPage is 'NewCampProfilePage':
            self.NewCampProfilePageRoot.withdraw()
        self.PrevPage = 'AddNewAppPage'

        root.title("New App Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        #get this program list from the DB
        programLabel = Label(master, text = "Program: ")
        programLabel.grid(row = 0, column = 3, sticky = 'e')
        programList = ['none', 'Child Application', 'Camper Application']
        programs = StringVar()
        programs.set(programList[0])
        dropdownProgram = OptionMenu(master, programs, *programList)
        dropdownProgram.grid(row = 0, column = 4, sticky = 'w')


        labelDate = Label(master, text = "Date Submitted (YYYY-MM-DD)")
        labelDate.grid(row = 1, column = 3)

        entryDate = Entry(master, bd = 3)
        entryDate.grid(row = 1, column = 4)

        returningTxt = Label(master, text = "Returning Child?")
        returningTxt.grid(row = 2, column = 3)

        v = StringVar()
        returningInq = Radiobutton(master, text="Yes", variable=v, value=1)
        returningInq.grid(row = 2,column = 4)

        returningInq = Radiobutton(master, text="No", variable=v, value=2)
        returningInq.grid(row = 2,column = 5)

        v.set(0)

        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        createButton = Button(master, text = "Create", command = lambda:self.createNewApp(programs, entryDate, v))
        createButton.grid(row = 4, column = 4, sticky = 'w')

        backButton = Button(master, text = "Back", command = lambda:self.HomePage())
        backButton.grid(row  = 0, column = 0)

    def createNewApp(self, programs, entryDate, v):
        #send to create page
        #add an application form to the DB

        Date = entryDate.get()
        program =  programs.get()

        if Date is '' or program is '' or program == 'none':
            tkMessageBox.showinfo("Add a New Applicaiton","Please fill in program and date")

        elif not self.is_date(Date):
            tkMessageBox.showinfo("Add a New Applicaiton", "Submission Unsucessful\n\nIncompatible entry in Date Submitted\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            goodData = 0


        elif v.get() == '2':             # If they are not a returning child, add them and date submitted into Child()
            #Database Connection
            db = self.connect()
            curr = db.cursor()

            curr.execute("INSERT INTO Child() VALUES ();") #is this actually auto incrementing
            db.commit()

            #get variables from user input
            curr.execute("SELECT MAX(ID) FROM Child;")
            ID = curr.fetchall()[0][0]

            self.disConnect(curr, db)

            #Add the ID and Date_Submitted into the program specified by the user
            if program == 'Child Application':
                self.NewChildProfilePage(ID, Date)

            elif program == "Camper Application":
                self.NewCampProfilePage(ID, Date)

        elif v.get() == '1':       #if they are a returning child, send them to newAppReturning.py
            self.NewAppReturningPage(program, Date)

        else:         #user failed to select Yes/No for returning Child
            tkMessageBox.showinfo("Add a New Application","Please select Yes or No for 'Returning User?'")

#******************************************************************************************************************************************************

    def NewAppReturningPage(self, newProgram, entryDate):

        self.NewAppReturningPageRoot = Toplevel()
        root = self.NewAppReturningPageRoot

        if self.PrevPage is 'AddNewAppPage':
            self.AddNewAppPageRoot.withdraw()
        if self.PrevPage is 'nameBirthEntryPage':
            self.nameBirthEntryPageRoot.withdraw()
        self.PrevPage = 'NewAppReturningPage'

        root.title("New App Returning Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        #5 columns at least 3 rows
        idLabel = Label(master, text = "ID")
        idLabel.grid(row = 2, column = 2)

        idEntry = Entry(master, bd =3)
        idEntry.grid(row = 2, column = 3)

        divider = Label(master, text = "Or", font= "Verdana 10 underline")
        divider.grid(row = 3, column = 3)

        programLabel = Label(master, text = "Program Previously Enrolled In: ")
        programLabel.grid(row = 0, column = 4)

        programList = ['none', 'Child Application', 'Camper Application']
        programs = StringVar()
        programs.set(programList[0])
        dropdownProgram = OptionMenu(master, programs, *programList)
        dropdownProgram.grid(row = 0, column = 5)

        nameLabel = Label(master, text = "First Name")
        nameLabel.grid(row = 4, column = 2)

        nameEntry = Entry(master,bd = 3)
        nameEntry.grid(row = 4, column = 3)

        name2Label = Label(master, text = "Last Name")
        name2Label.grid(row = 5, column = 2)

        name2Entry = Entry(master,bd = 3)
        name2Entry.grid(row = 5, column = 3)

        bdLabel = Label(master, text = "Birthday (YYYY-MM-DD)")
        bdLabel.grid(row = 6, column = 2)

        bdEntry = Entry(master, bd = 3)
        bdEntry.grid(row = 6, column = 3)

        continueButton = Button(master, text = "Continue", command = lambda:self.Continue(idEntry, programs, nameEntry, name2Entry, bdEntry, newProgram, entryDate))
        continueButton.grid(row = 7, column = 4)

        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        back = Button(master, text = "Back", command = lambda:self.AddNewAppPage())
        back.grid(row = 0, column = 0)

    def Continue(self, idEntry, programs, nameEntry, name2Entry, bdEntry, newProgram, entryDate):

        program = programs.get()
        ID = idEntry.get()
        firstName = nameEntry.get()
        lastName = name2Entry.get()
        bd = bdEntry.get()

       #Database Connection
        db = self.connect()
        curr = db.cursor()

        if program == 'Child Application':

            #FN LN  BD  ID
            if firstName is not '' and lastName is not '' and bd is not '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s AND Birthday = %s AND ID = %s;",(firstName,lastName,bd,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
            
            #FN! LN  BD  ID
            elif firstName is '' and lastName is not '' and bd is not '' and ID is not '':
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s AND Birthday = %s AND ID = %s;",(firstName,lastName,bd,ID,))                
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN LN! BD  ID
            elif firstName is not '' and lastName is '' and bd is not '' and ID is not '':
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Birthday = %s AND ID = %s;",(firstName,bd,ID,))                
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN! LN! BD  ID
            elif firstName is '' and lastName is '' and bd is not '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Birthday = %s AND ID = %s;",(bd,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN LN  BD! ID
            elif firstName is not '' and lastName is not '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s AND ID = %s;",(firstName,lastName,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN! LN  BD! ID
            elif firstName is '' and lastName is not '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s AND ID = %s;",(lastName,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN LN! BD! ID
            elif firstName is not '' and lastName is '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND ID = %s;",(firstName,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN! LN! BD! ID
            elif firstName is '' and lastName is '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE ID = %s;",(ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN LN  BD  ID!
            elif firstName is not '' and lastName is not '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s AND Birthday = %s;",(firstName,lastName,bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
    
            #FN! LN  BD  ID!
            if firstName is '' and lastName is not '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s AND Birthday = %s;",(lastName,bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)

            #FN LN! BD  ID!
            elif firstName is not '' and lastName is '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Birthday = %s;",(firstName,bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
    
            #FN! LN! BD  ID!
            elif firstName is '' and lastName is '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Birthday = %s;",(bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
    
            #FN LN  BD! ID!
            elif firstName is not '' and lastName is not '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s;",(firstName,lastName,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
    
            #FN! LN  BD! ID!
            elif firstName is '' and lastName is not '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s;",(lastName,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
    
            #FN LN! BD! ID!
            elif firstName is not '' and lastName is '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s;",(firstName,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
    
            #FN! LN! BD! ID!
            elif firstName is '' and lastName is '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information;")
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data, None, newProgram, entryDate)
    
        #select data if from camper
        elif program == 'Camper Application':

           #FN LN  BD  ID
            if firstName is not '' and lastName is not '' and bd is not '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s AND Date_Of_Birth = %s AND ID = %s;",(firstName,lastName,bd,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)
            
            #FN! LN  BD  ID
            elif firstName is '' and lastName is not '' and bd is not '' and ID is not '':
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s AND Date_Of_Birth = %s AND ID = %s;",(firstName,lastName,bd,ID,))                
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

            
            #FN LN! BD  ID
            elif firstName is not '' and lastName is '' and bd is not '' and ID is not '':
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Date_Of_Birth = %s AND ID = %s;",(firstName,bd,ID,))                
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)


            #FN! LN! BD  ID
            elif firstName is '' and lastName is '' and bd is not '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Date_Of_Birth = %s AND ID = %s;",(bd,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

            #FN LN  BD! ID
            elif firstName is not '' and lastName is not '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s AND ID = %s;",(firstName,lastName,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

            #FN! LN  BD! ID
            elif firstName is '' and lastName is not '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s AND ID = %s;",(lastName,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

            #FN LN! BD! ID
            elif firstName is not '' and lastName is '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND ID = %s;",(firstName,ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

            #FN! LN! BD! ID
            elif firstName is '' and lastName is '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE ID = %s;",(ID,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

            #FN LN  BD  ID!
            elif firstName is not '' and lastName is not '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s AND Date_Of_Birth = %s;",(firstName,lastName,bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)
    
            #FN! LN  BD  ID!
            if firstName is '' and lastName is not '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s AND Date_Of_Birth = %s;",(lastName,bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

            #FN LN! BD  ID!
            elif firstName is not '' and lastName is '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Date_Of_Birth = %s;",(firstName,bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)
    
            #FN! LN! BD  ID!
            elif firstName is '' and lastName is '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Date_Of_Birth = %s;",(bd,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)
    
            #FN LN  BD! ID!
            elif firstName is not '' and lastName is not '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s;",(firstName,lastName,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)
    
            #FN! LN  BD! ID!
            elif firstName is '' and lastName is not '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s;",(lastName,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)
    
            #FN LN! BD! ID!
            elif firstName is not '' and lastName is '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s;",(firstName,))
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)
    
            #FN! LN! BD! ID!
            elif firstName is '' and lastName is '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information;")
                data = curr.fetchall()
                if data == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(None, data, newProgram, entryDate)

        #No program selected
        else:

            #FN LN  BD  ID
            if firstName is not '' and lastName is not '' and bd is not '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s AND Birthday = %s AND ID = %s;",(firstName,lastName,bd,ID,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s AND Date_Of_Birth = %s AND ID = %s;",(firstName,lastName,bd,ID,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN! LN  BD  ID
            elif firstName is '' and lastName is not '' and bd is not '' and ID is not '':
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s AND Birthday = %s AND ID = %s;",(firstName,lastName,bd,ID,))                
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s AND Date_Of_Birth = %s AND ID = %s;",(firstName,lastName,bd,ID,))                
                data2 = curr.fetchall()

                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            
            #FN LN! BD  ID
            elif firstName is not '' and lastName is '' and bd is not '' and ID is not '':
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Birthday = %s AND ID = %s;",(firstName,bd,ID,))                
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Date_Of_Birth = %s AND ID = %s;",(firstName,bd,ID,))                
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            

            #FN! LN! BD  ID
            elif firstName is '' and lastName is '' and bd is not '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Birthday = %s AND ID = %s;",(bd,ID,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Date_Of_Birth = %s AND ID = %s;",(bd,ID,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN LN  BD! ID
            elif firstName is not '' and lastName is not '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s AND ID = %s;",(firstName,lastName,ID,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s AND ID = %s;",(firstName,lastName,ID,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN! LN  BD! ID
            elif firstName is '' and lastName is not '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s AND ID = %s;",(lastName,ID,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s AND ID = %s;",(lastName,ID,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN LN! BD! ID
            elif firstName is not '' and lastName is '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND ID = %s;",(firstName,ID,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND ID = %s;",(firstName,ID,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN! LN! BD! ID
            elif firstName is '' and lastName is '' and bd is '' and ID is not '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE ID = %s;",(ID,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE ID = %s;",(ID,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN LN  BD  ID!
            elif firstName is not '' and lastName is not '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s AND Birthday = %s;",(firstName,lastName,bd,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s AND Date_Of_Birth = %s;",(firstName,lastName,bd,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN! LN  BD  ID!
            if firstName is '' and lastName is not '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s AND Birthday = %s;",(lastName,bd,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s AND Date_Of_Birth = %s;",(lastName,bd,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN LN! BD  ID!
            elif firstName is not '' and lastName is '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Birthday = %s;",(firstName,bd,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Date_Of_Birth = %s;",(firstName,bd,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN! LN! BD  ID!
            elif firstName is '' and lastName is '' and bd is not '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Birthday = %s;",(bd,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Date_Of_Birth = %s;",(bd,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN LN  BD! ID!
            elif firstName is not '' and lastName is not '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s AND Name_Last = %s;",(firstName,lastName,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s AND Last_Name = %s;",(firstName,lastName,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN! LN  BD! ID!
            elif firstName is '' and lastName is not '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_Last = %s;",(lastName,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE Last_Name = %s;",(lastName,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN LN! BD! ID!
            elif firstName is not '' and lastName is '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information WHERE Name_First = %s;",(firstName,))
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information WHERE First_Name = %s;",(firstName,))
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)
            
            #FN! LN! BD! ID!
            elif firstName is '' and lastName is '' and bd is '' and ID is '': # checks if the filled name and bd fields and left ID blank
                curr.execute("SELECT Name_First,Name_Last,Year(Date_Submitted),ID FROM Childs_Information;")
                data1 = curr.fetchall()

                curr.execute("SELECT First_Name,Last_Name,Year(Date_Submitted),ID FROM Demographic_Information;")
                data2 = curr.fetchall()
                
                if data1 == () and data2 == ():
                    tkMessageBox.showinfo("Returning Child","Error: no such child exists.")
                else:
                    self.nameBirthEntryPage(data1, data2, newProgram, entryDate)

#******************************************************************************************************************************************************

    def nameBirthEntryPage(self, childNameDate, camperNameDate, newProgram, entryDate):
        
        self.nameBirthEntryPageRoot = Toplevel()
        root = self.nameBirthEntryPageRoot
        if self.PrevPage is 'NewAppReturningPage':
            self.NewAppReturningPageRoot.withdraw()
        self.PrevPage = 'nameBirthEntryPage'

        root.title("Find New Applicant Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)
        
        #5 columns at least 3 rows
        nameHead = Label(master, text = "Name", font= "Verdana 10 underline")
        nameHead.grid(row = 1, column = 2)

        progHead = Label(master, text = "Program", font= "Verdana 10 underline")
        progHead.grid(row = 1, column = 3)

        yearHead = Label(master, text = "Year", font= "Verdana 10 underline")
        yearHead.grid(row = 1, column = 4)

        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        backButton = Button(master, text = "Back", command = lambda:self.NewAppReturningPage(newProgram, entryDate))
        backButton.grid(row = 0, column = 0)

        for num in range(len(childNameDate)):
                
                #validate name
                if childNameDate[num][0] is None: 
                    firstName = ''
                else:
                    firstName = childNameDate[num][0]
                if childNameDate[num][1] is None: 
                    lastName = ''
                else:
                    lastName = childNameDate[num][1]
                
                name = Label(master, text = firstName+' '+lastName)
                name.grid(row = 2 + num, column = 2)

                prog = Label(master, text = "Child Application")
                prog.grid(row = 2 + num, column = 3)

                year = Label(master, text = childNameDate[num][2])
                year.grid(row = 2 + num, column = 4)

                profBut = Button(master, text = "Select", command = lambda: self.nameBirthEntryContinue(childNameDate[num][3], entryDate, newProgram))
                profBut.grid(row = 2 + num, column = 5)

        for num in range(len(camperNameDate)):
                
                #validate name
                if camperNameDate[num][0] is None: 
                    firstName = ''
                else:
                    firstName = camperNameDate[num][0]
                if camperNameDate[num][1] is None: 
                    lastName = ''
                else:
                    lastName = camperNameDate[num][1]
                
                name = Label(master, text = firstName+' '+lastName)
                name.grid(row = 2 + num +len(childNameDate), column = 2)

                prog = Label(master, text = "Camper Application")
                prog.grid(row = 2 + num +len(childNameDate), column = 3)

                year = Label(master, text = camperNameDate[num][2])
                year.grid(row = 2 + num +len(childNameDate), column = 4)

                profBut = Button(master, text = "Select", command = lambda: self.nameBirthEntryContinue(camperNameDate[num][3], entryDate, newProgram))
                profBut.grid(row = 2 + num +len(childNameDate), column = 5)

        total = len(childNameDate)+len(camperNameDate)
                
 
        #print total number of matches
        count = Label(master, text = "Total Matches: " + str(total))
        count.grid(row = 0, column = 5)

    def nameBirthEntryContinue(self, id, date, program):
        if (program == 'Child Application'):
            self.NewChildProfilePage(id, date)

        else:
            self.NewCampProfilePage(id, date)

#******************************************************************************************************************************************************
    
    def NewCampProfilePage(self, id, date):
        #setup
        self.NewCampProfilePageRoot = Toplevel()
        root = self.NewCampProfilePageRoot
        if self.PrevPage is 'nameBirthEntryPage':
            self.nameBirthEntryPageRoot.withdraw()
        elif self.PrevPage is 'AddNewAppPage':
            self.AddNewAppPageRoot.withdraw()
        self.PrevPage = 'NewCampProfilePage'
        root.title("New Camp Profile Page")

        self.canvas = Canvas(root)
        master = Frame(self.canvas)

        scrollbarY = Scrollbar(root, orient = "vertical", command = self.canvas.yview)
        scrollbarY.pack(side = RIGHT, fill = Y)
        scrollbarX = Scrollbar(root, orient = "horizontal", command = self.canvas.xview)
        scrollbarX.pack(side = BOTTOM, fill = X)

        self.canvas.configure(xscrollcommand = scrollbarX.set, yscrollcommand = scrollbarY.set)
        self.canvas.pack(side = "left", fill = "both", expand = True)
        self.canvas.create_window((4,4), window = master, anchor="nw", 
                                  tags="master")

        master.bind("<Configure>", self.onFrameConfigure)
        root.geometry("1000x1000")

#Buttons
        #frame
        buttonframe = Frame(master)
        buttonframe.pack(side = "top", fill = "x")

        #back
        backButton = Button(buttonframe, text = "Back", command = lambda:self.backNewChildProfilePage(id, date))
        backButton.pack(side = "left")

        exitButton = Button(buttonframe, text = "Exit", command=lambda: self.exit())
        exitButton.pack(side = "left")

#Database dump frame
        DemographicSectionframe = Frame(master)
        DemographicSectionframe.pack(fill = 'y', side = 'left') 
        r = 0

#
#Parent sections
#
        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nPARENT SECTION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 25))

#Demographic info section
        #header
        r=r+1
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nDEMOGRAPHIC INFORMATION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 20))

        #first name
        label = Label(DemographicSectionframe, text = "\nFirst Name ................................................................................................................................. ")
        demInfo0 = Entry(DemographicSectionframe)
        r = r+1
        demInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        label = Label(DemographicSectionframe, text = "\nLast Name ................................................................................................................................. ")
        demInfo1 = Entry(DemographicSectionframe)
        r = r+1
        demInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #middle initial
        label = Label(DemographicSectionframe, text = "\nMiddle Initial .............................................................................................................................. ")
        demInfo2 = Entry(DemographicSectionframe)
        r = r+1
        demInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #age
        label = Label(DemographicSectionframe, text = "\nAge ............................................................................................................................................ ")
        demInfo3 = Entry(DemographicSectionframe)
        r = r+1
        demInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #birthday
        label = Label(DemographicSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ..................................................................................................... ")
        demInfo4 = Entry(DemographicSectionframe)
        r = r+1
        demInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #gender
        label = Label(DemographicSectionframe, text = "\nGender ...................................................................................................................................... ")
        demInfo5 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(DemographicSectionframe, demInfo5, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #race
        label = Label(DemographicSectionframe, text = "\nRace .......................................................................................................................................... ")
        demInfo6 = Entry(DemographicSectionframe)
        r = r+1
        demInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #language
        label = Label(DemographicSectionframe, text = "\nPrimary Language ...................................................................................................................... ")
        demInfo7 = Entry(DemographicSectionframe)
        r = r+1
        demInfo7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address street
        label = Label(DemographicSectionframe, text = "\nStreet Address ........................................................................................................................... ")
        demInfo8 = Entry(DemographicSectionframe)
        r = r+1
        demInfo8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address city
        label = Label(DemographicSectionframe, text = "\nCity ........................................................................................................................................... ")
        demInfo9 = Entry(DemographicSectionframe)
        r = r+1
        demInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address state
        label = Label(DemographicSectionframe, text = "\nState ......................................................................................................................................... ")
        demInfo10 = Entry(DemographicSectionframe)
        r = r+1
        demInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address county
        label = Label(DemographicSectionframe, text = "\nCounty ...................................................................................................................................... ")
        demInfo11 = Entry(DemographicSectionframe)
        r = r+1
        demInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address zip
        label = Label(DemographicSectionframe, text = "\nZip ............................................................................................................................................ ")
        demInfo12 = Entry(DemographicSectionframe)
        r = r+1
        demInfo12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #camper email
        label = Label(DemographicSectionframe, text = "\nCamper Email ............................................................................................................................ ")
        demInfo13 = Entry(DemographicSectionframe)
        r = r+1
        demInfo13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Parent email
        label = Label(DemographicSectionframe, text = "\nParent Email .............................................................................................................................. ")
        demInfo14 = Entry(DemographicSectionframe)
        r = r+1
        demInfo14.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Guardian name
        label = Label(DemographicSectionframe, text = "\nGuardian Name .......................................................................................................................... ")
        demInfo15 = Entry(DemographicSectionframe)
        r = r+1
        demInfo15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Guardian Camper Relationship
        label = Label(DemographicSectionframe, text = "\nGuardian Camper Relationship ................................................................................................... ")
        demInfo16 = Entry(DemographicSectionframe)
        r = r+1
        demInfo16.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Last Grade Completed
        label = Label(DemographicSectionframe, text = "\nLast Grade Completed ............................................................................................................... ")
        demInfo17 = Entry(DemographicSectionframe)
        r = r+1
        demInfo17.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Special Ed Classes
        label = Label(DemographicSectionframe, text = '\nSpecial Ed Classes? ................................................................................................................... ')
        demInfo18 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = demInfo18, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = demInfo18, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #siblings applying
        label = Label(DemographicSectionframe, text = "\nSiblings Applying? ..................................................................................................................... ")
        demInfo19 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = demInfo19, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = demInfo19, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #t-shirt size
        label = Label(DemographicSectionframe, text = "\nT-Shirt Size ............................................................................................................................... ")
        demInfo20 = StringVar()
        choices = ['Youth S', 'Youth M', 'Youth L', 'Adult S', 'Adult M', 'Adult L', 'Adult XL', 'Adult XXL']
        option = tk.OptionMenu(DemographicSectionframe, demInfo20, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Transportation
        label = Label(DemographicSectionframe, text = "\nPlanned Transportation ............................................................................................................. ")
        r = r+1
        label.grid(row = r, column = 0)

        #ATL bus
        demInfoTransport0 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'Atlanta bus', variable = demInfoTransport0).grid(row = r,  column = 1, sticky = W)

        #Augusta bus
        demInfoTransport1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Augusta bus', variable = demInfoTransport1).grid(row = r,  column = 1, sticky = W)

        #Albany bus
        demInfoTransport2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Albany bus', variable = demInfoTransport2).grid(row = r,  column = 1, sticky = W)

        #Athens bus
        demInfoTransport3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Athens bus', variable = demInfoTransport3).grid(row = r,  column = 1, sticky = W)

        #Savannah bus
        demInfoTransport4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Savannah bus', variable = demInfoTransport4).grid(row = r,  column = 1, sticky = W)

        #Car/drop
        demInfoTransport5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Car/drop', variable = demInfoTransport5).grid(row = r,  column = 1, sticky = W)

#demographic contacts
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nCONTACT INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #CELL
        #type
        label = Label(DemographicSectionframe, text = "\nCell Number")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #Name
        label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ ")
        demContactInfo10 = Entry(DemographicSectionframe)
        r = r+1
        demContactInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #time pref
        label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Day
        demContactInfoTime10 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'Day', variable = demContactInfoTime10).grid(row = r,  column = 1, sticky = W)

        #Evening
        demContactInfoTime11 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Evening', variable = demContactInfoTime11).grid(row = r,  column = 1, sticky = W)

        #phone number
        label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ ")
        demContactInfo11 = Entry(DemographicSectionframe)
        r = r+1
        demContactInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HOME
        #type
        label = Label(DemographicSectionframe, text = "\nHome Number")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #Name
        label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ ")
        demContactInfo20 = Entry(DemographicSectionframe)
        r = r+1
        demContactInfo20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #time pref
        label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Day
        demContactInfoTime20 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'Day', variable = demContactInfoTime20).grid(row = r,  column = 1, sticky = W)

        #Evening
        demContactInfoTime21 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Evening', variable = demContactInfoTime21).grid(row = r,  column = 1, sticky = W)

        #phone number
        label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ ")
        demContactInfo21 = Entry(DemographicSectionframe)
        r = r+1
        demContactInfo21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #WORK
        #type
        label = Label(DemographicSectionframe, text = "\nWork Number")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #Name
        label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ ")
        demContactInfo30 = Entry(DemographicSectionframe)
        r = r+1
        demContactInfo30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #time pref
        label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Day
        demContactInfoTime30 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'Day', variable = demContactInfoTime30).grid(row = r,  column = 1, sticky = W)

        #Evening
        demContactInfoTime31 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Evening', variable = demContactInfoTime31).grid(row = r,  column = 1, sticky = W)

        #phone number
        label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ ")
        demContactInfo31 = Entry(DemographicSectionframe)
        r = r+1
        demContactInfo31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Parent/ Guardian Emergency Contact Section
        #header
        labelEmergencySection = Label(DemographicSectionframe, text = "\n\nEMERGENCY CONTACT INFORMATION")
        r = r+1
        labelEmergencySection.grid(row = r, columnspan = 2)
        labelEmergencySection.config(font=("Helvetica", 20))

        #Name
        label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 1 ....................................................................................................... ")
        emergencyInfo10 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Relationship
        label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. ")
        emergencyInfo11 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Daytime Phone
        label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... ")
        emergencyInfo12 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Evening Phone
        label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... ")
        emergencyInfo13 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Name
        label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 2 ....................................................................................................... ")
        emergencyInfo20 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Relationship
        label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. ")
        emergencyInfo21 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Daytime Phone
        label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... ")
        emergencyInfo22 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo22.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Evening Phone
        label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... ")
        emergencyInfo23 = Entry(DemographicSectionframe)
        r = r+1
        emergencyInfo23.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Insurance Info Section
        #header
        labelInsuranceSection = Label(DemographicSectionframe, text = "\n\nINSURANCE INFORMATION")
        r = r+1
        labelInsuranceSection.grid(row = r, columnspan = 2)
        labelInsuranceSection.config(font=("Helvetica", 20))

        #Insurer
        label = Label(DemographicSectionframe, text = "\nHealth Insurance Provider .......................................................................................................... ")
        insuranceInfo0 = StringVar()
        choices = ['Medicaid','PeachCare','Private','None']
        option = tk.OptionMenu(DemographicSectionframe, insuranceInfo0, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Private Insurer Name
        label = Label(DemographicSectionframe, text = "\nIf Private, Insurance Provider Name ........................................................................................... ")
        insuranceInfo1 = Entry(DemographicSectionframe)
        r = r+1
        insuranceInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Policy Number
        label = Label(DemographicSectionframe, text = "\nPolicy Number ........................................................................................................................... ")
        insuranceInfo2 = Entry(DemographicSectionframe)
        r = r+1
        insuranceInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Group Number
        label = Label(DemographicSectionframe, text = "\nGroup Number ........................................................................................................................... ")
        insuranceInfo3 = Entry(DemographicSectionframe)
        r = r+1
        insuranceInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Medical Provider Section
        #header
        labelMedicalSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER INFORMATION")
        r = r+1
        labelMedicalSection.grid(row = r, columnspan = 2)
        labelMedicalSection.config(font=("Helvetica", 20))
                
        #Name
        label = Label(DemographicSectionframe, text = "\nMedical Provider Name .............................................................................................................. ")
        medProviderInfo0 = Entry(DemographicSectionframe)
        r = r+1
        medProviderInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Office Phone
        label = Label(DemographicSectionframe, text = "\nMedical Provider Office Phone Number ...................................................................................... ")
        medProviderInfo1 = Entry(DemographicSectionframe)
        r = r+1
        medProviderInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Pharmacy name
        label = Label(DemographicSectionframe, text = "\nName of Pharmacy ..................................................................................................................... ")
        medProviderInfo2 = Entry(DemographicSectionframe)
        r = r+1
        medProviderInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Pharmacy Phone Number
        label = Label(DemographicSectionframe, text = "\nPharmacy Phone Number ........................................................................................................... ")
        medProviderInfo3 = Entry(DemographicSectionframe)
        r = r+1
        medProviderInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Medical Information Section
        #header
        labelMedInfoSection = Label(DemographicSectionframe, text = "\n\nMEDICAL INFORMATION")
        r = r+1
        labelMedInfoSection.grid(row = r, columnspan = 2)
        labelMedInfoSection.config(font=("Helvetica", 20))

        #Conditions
        label = Label(DemographicSectionframe, text = "\nCurrent Medical Conditions ........................................................................................................ ")
        r = r+1
        label.grid(row = r, column = 0)

        #HIV
        medInfoCurr0 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'HIV', variable = medInfoCurr0).grid(row = r,  column = 1, sticky = W)

        #Hepatitis B
        medInfoCurr1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Hepatitis B', variable = medInfoCurr1).grid(row = r,  column = 1, sticky = W)

        #Hepatitis C
        medInfoCurr2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Hepatitis C', variable = medInfoCurr2).grid(row = r,  column = 1, sticky = W)

        #ADD or ADHD
        medInfoCurr3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'ADD or ADHD', variable = medInfoCurr3).grid(row = r,  column = 1, sticky = W)

        #Sickle Cell Disease
        medInfoCurr4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Sickle Cell Disease', variable = medInfoCurr4).grid(row = r,  column = 1, sticky = W)

        #Asthma
        medInfoCurr5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Asthma', variable = medInfoCurr5).grid(row = r,  column = 1, sticky = W)

        #Tubes in Ears
        medInfoCurr6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Tubes in Ears', variable = medInfoCurr6).grid(row = r,  column = 1, sticky = W)

        #Heart Problems
        medInfoCurr7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Heart Problems', variable = medInfoCurr7).grid(row = r,  column = 1, sticky = W)

        #Mental Health Diagnoses
        medInfoCurr8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Mental Health Diagnoses', variable = medInfoCurr8).grid(row = r,  column = 1, sticky = W)

        #Other
        medInfoCurr9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Other', variable = medInfoCurr9).grid(row = r,  column = 1, sticky = W)

        #If other
        medInfo0 = Entry(DemographicSectionframe, width = 19)
        medInfo0.grid(row = r, column = 1, sticky = E)

        #Conditions Explained
        label = Label(DemographicSectionframe, text = "\nDescription of Medical Conditions .............................................................................................. ")
        medInfo1 = Entry(DemographicSectionframe)
        r = r+1
        medInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Allergies Section
        #header
        labelAllergySection = Label(DemographicSectionframe, text = "\n\nALLERGY INFORMATION")
        r = r+1
        labelAllergySection.grid(row = r, columnspan = 2)
        labelAllergySection.config(font=("Helvetica", 20))

        #Med Allergies
        label = Label(DemographicSectionframe, text = "\nMedical Allergies? ...................................................................................................................... ")
        allergyInfo0 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo0, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Med Allergy Reaction
        label = Label(DemographicSectionframe, text = "\nMedical Allergy Reaction ............................................................................................................ ")
        allergyInfo1 = Entry(DemographicSectionframe)
        r = r+1
        allergyInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Food Allergy
        label = Label(DemographicSectionframe, text = "\nFood Allergies? .......................................................................................................................... ")
        allergyInfo2 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo2, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Food Allergy Reaction
        label = Label(DemographicSectionframe, text = "\nFood Allergy Reaction ................................................................................................................ ")
        allergyInfo3 = Entry(DemographicSectionframe)
        r = r+1
        allergyInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Environmental Allergies
        label = Label(DemographicSectionframe, text = "\nEnvironmental Allergies? ............................................................................................................ ")
        allergyInfo4 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo4, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo4, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Environmental Allergy Reaction
        label = Label(DemographicSectionframe, text = "\nEnvironmental Allergy Reaction .................................................................................................. ")
        allergyInfo5 = Entry(DemographicSectionframe)
        r = r+1
        allergyInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Epi Pen
        label = Label(DemographicSectionframe, text = "\nEpiPen for any of the above allergies? ........................................................................................ ")
        allergyInfo6 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo6, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo6, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

#Dietary Needs Section
        #header
        labelDietarySection = Label(DemographicSectionframe, text = "\n\nDIETARY INFORMATION")
        r = r+1
        labelDietarySection.grid(row = r, columnspan = 2)
        labelDietarySection.config(font=("Helvetica", 20))

        #Special Dietary Needs
        label = Label(DemographicSectionframe, text = "\nSpecial Dietary Needs ................................................................................................................ ")
        dietaryNeedsInfo0 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo0, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Vegetarian
        label = Label(DemographicSectionframe, text = "\nVegetarian ................................................................................................................................. ")
        dietaryNeedsInfo1 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo1, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Food Restrictions
        label = Label(DemographicSectionframe, text = "\nFood Restrictions ....................................................................................................................... ")
        dietaryNeedsInfo2 = Entry(DemographicSectionframe)
        r = r+1
        dietaryNeedsInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #G Tube
        label = Label(DemographicSectionframe, text = "\nG-Tube ...................................................................................................................................... ")
        dietaryNeedsInfo3 = StringVar()
        choices = ['None','Medicine','Formula','Both']
        option = tk.OptionMenu(DemographicSectionframe, dietaryNeedsInfo3, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Formula Supplements
        label = Label(DemographicSectionframe, text = "\nFormula Supplements ................................................................................................................ ")
        dietaryNeedsInfo4 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo4, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo4, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Formula Supplements How
        label = Label(DemographicSectionframe, text = "\nFormula Supplements How? ....................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #By Mouth
        dietaryNeedsHowInfo0 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'By Mouth', variable = dietaryNeedsHowInfo0).grid(row = r,  column = 1, sticky = W)

        #By G-Tube
        dietaryNeedsHowInfo1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'By G-Tube', variable = dietaryNeedsHowInfo1).grid(row = r,  column = 1, sticky = W)

        #Formula Type
        label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. ")
        dietaryNeedsInfo5 = Entry(DemographicSectionframe)
        r = r+1
        dietaryNeedsInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #cans per day
        label = Label(DemographicSectionframe, text = "\nFormula Cans Per Day ................................................................................................................ ")
        dietaryNeedsInfo6 = Entry(DemographicSectionframe)
        r = r+1
        dietaryNeedsInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Feeding Pump
        label = Label(DemographicSectionframe, text = "\nFeeding Pump ............................................................................................................................ ")
        dietaryNeedsInfo7 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo7, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo7, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Feeding Pump Type
        label = Label(DemographicSectionframe, text = "\nPump Type ................................................................................................................................ ")
        dietaryNeedsInfo8 = Entry(DemographicSectionframe)
        r = r+1
        dietaryNeedsInfo8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Feeding schedule
        label = Label(DemographicSectionframe, text = "\nFeeding Schedule ...................................................................................................................... ")
        dietaryNeedsInfo9 = Entry(DemographicSectionframe)
        r = r+1
        dietaryNeedsInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#General health
        #header
        labelFoodNeedsSection = Label(DemographicSectionframe, text = "\n\nGENERAL HEALTH INFORMATION")
        r = r+1
        labelFoodNeedsSection.grid(row = r, columnspan = 2)
        labelFoodNeedsSection.config(font=("Helvetica", 20))

        #Physical Limitations
        label = Label(DemographicSectionframe, text = "\nPhysical Limitations ................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Dressing
        genHealthLimit0 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'Dressing', variable = genHealthLimit0).grid(row = r,  column = 1, sticky = W)

        #Showering
        genHealthLimit1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Showering', variable = genHealthLimit1).grid(row = r,  column = 1, sticky = W)

        #Eating
        genHealthLimit2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Eating', variable = genHealthLimit2).grid(row = r,  column = 1, sticky = W)

        #Toileting
        genHealthLimit3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Toileting', variable = genHealthLimit3).grid(row = r,  column = 1, sticky = W)

        #Walking/Balance
        genHealthLimit4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Walking/Balance', variable = genHealthLimit4).grid(row = r,  column = 1, sticky = W)

        #Braces
        genHealthLimit5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Braces', variable = genHealthLimit5).grid(row = r,  column = 1, sticky = W)

        #Casts
        genHealthLimit6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Casts', variable = genHealthLimit6).grid(row = r,  column = 1, sticky = W)

        #Walker
        genHealthLimit7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Walker', variable = genHealthLimit7).grid(row = r,  column = 1, sticky = W)

        #Wheelchair
        genHealthLimit8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Wheelchair', variable = genHealthLimit8).grid(row = r,  column = 1, sticky = W)

        #Other
        genHealthLimit9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Other', variable = genHealthLimit9).grid(row = r,  column = 1, sticky = W)

        #If other
        genHealth0 = Entry(DemographicSectionframe, width = 19)
        genHealth0.grid(row = r, column = 1, sticky = E)

        #Tire Easily
        label = Label(DemographicSectionframe, text = "\nTire Easily .................................................................................................................................. ")
        genHealth1 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth1, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Swim
        label = Label(DemographicSectionframe, text = "\nCan Swim ................................................................................................................................... ")
        genHealth2 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth2, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Chicken Pox
        label = Label(DemographicSectionframe, text = "\nChicken Pox Vaccinated? ............................................................................................................ ")
        genHealth3 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth3, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth3, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #c pox date
        label = Label(DemographicSectionframe, text = "\nChicken Pox Date (YYYY-MM-DD) ............................................................................................... ")
        genHealth4 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth4, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth4, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Menstrual Cycle
        label = Label(DemographicSectionframe, text = "\nMenstrual Cycle ......................................................................................................................... ")
        genHealth5 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth5, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth5, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #m cycle difficulties
        label = Label(DemographicSectionframe, text = "\nMenstrual Difficulties ................................................................................................................. ")
        genHealth6 = Entry(DemographicSectionframe)
        r = r+1
        genHealth6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Behavior
        #header
        labelBehaviorSection = Label(DemographicSectionframe, text = "\n\nBEHAVIORAL INFORMATION")
        r = r+1
        labelBehaviorSection.grid(row = r, columnspan = 2)
        labelBehaviorSection.config(font=("Helvetica", 20))

        #How long Camper known
        label = Label(DemographicSectionframe, text = "\nCamper knows that someone in his/her family has HIV/AIDS ...................................................... ")
        behavior0 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = behavior0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = behavior0, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #How long Camper known
        label = Label(DemographicSectionframe, text = "\nHow Long has Camper Been Aware of HIV/AIDS Impacting Them? .............................................. ")
        behavior1 = StringVar()
        choices = ['less than 6 months', 'less than 1 year', 'a few years', 'always']
        option = tk.OptionMenu(DemographicSectionframe, behavior1, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Camper experiences
        label = Label(DemographicSectionframe, text = "\nExperiences of Camper .............................................................................................................. ")
        r = r+1
        label.grid(row = r, column = 0)

        #Anxiety
        behaviorExperiances0 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'Anxiety', variable = behaviorExperiances0).grid(row = r,  column = 1, sticky = W)

        #Fear of dark
        behaviorExperiances1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Fear of dark', variable = behaviorExperiances1).grid(row = r,  column = 1, sticky = W)

        #Homesickness
        behaviorExperiances2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Homesickness', variable = behaviorExperiances2).grid(row = r,  column = 1, sticky = W)

        #Sleeps with night light
        behaviorExperiances3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Sleeps with night light', variable = behaviorExperiances3).grid(row = r,  column = 1, sticky = W)

        #Fights easily
        behaviorExperiances4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Fights easily', variable = behaviorExperiances4).grid(row = r,  column = 1, sticky = W)

        #School suspension due to behavior
        behaviorExperiances5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'School suspension due to behavior', variable = behaviorExperiances5).grid(row = r,  column = 1, sticky = W)

        #Bedwetting
        behaviorExperiances6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Bedwetting', variable = behaviorExperiances6).grid(row = r,  column = 1, sticky = W)

        #Sleeps with comfort item
        behaviorExperiances7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Sleeps with comfort item', variable = behaviorExperiances7).grid(row = r,  column = 1, sticky = W)

        #Hyperactivity or problems with attention
        behaviorExperiances8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Hyperactivity or problems with attention', variable = behaviorExperiances8).grid(row = r,  column = 1, sticky = W)

        #History of trauma or sexual abuse
        behaviorExperiances9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'History of trauma or sexual abuse', variable = behaviorExperiances9).grid(row = r,  column = 1, sticky = W)

        #medication for hyperactivity
        label = Label(DemographicSectionframe, text = "\nCamper Takes Medicine for Hyperactivity ................................................................................... ")
        behavior2 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = behavior2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = behavior2, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #experience explanation
        label = Label(DemographicSectionframe, text = "\nExplanation of Experiences ........................................................................................................ ")
        behavior3 = Entry(DemographicSectionframe)
        r = r+1
        behavior3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Camper interests
        label = Label(DemographicSectionframe, text = "\nInterests of Camper ................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Reading
        behaviorInterests0 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'Reading', variable = behaviorInterests0).grid(row = r,  column = 1, sticky = W)

        #Music
        behaviorInterests1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Music', variable = behaviorInterests1).grid(row = r,  column = 1, sticky = W)

        #Swimming
        behaviorInterests2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Swimming', variable = behaviorInterests2).grid(row = r,  column = 1, sticky = W)

        #Dance
        behaviorInterests3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Dance', variable = behaviorInterests3).grid(row = r,  column = 1, sticky = W)

        #Sports
        behaviorInterests4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Sports', variable = behaviorInterests4).grid(row = r,  column = 1, sticky = W)

        #Arts/Crafts
        behaviorInterests5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Arts/Crafts', variable = behaviorInterests5).grid(row = r,  column = 1, sticky = W)

        #Fishing
        behaviorInterests6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Fishing', variable = behaviorInterests6).grid(row = r,  column = 1, sticky = W)

        #Boating
        behaviorInterests7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Boating', variable = behaviorInterests7).grid(row = r,  column = 1, sticky = W)

        #Archery
        behaviorInterests8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Archery', variable = behaviorInterests8).grid(row = r,  column = 1, sticky = W)

        #Golf
        behaviorInterests9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Golf', variable = behaviorInterests9).grid(row = r,  column = 1, sticky = W)

        #Bicycling
        behaviorInterests10 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Bicycling', variable = behaviorInterests7).grid(row = r,  column = 1, sticky = W)

        #Animals
        behaviorInterests11 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Animals', variable = behaviorInterests8).grid(row = r,  column = 1, sticky = W)

        #Nature
        behaviorInterests12 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Nature', variable = behaviorInterests9).grid(row = r,  column = 1, sticky = W)

        #Recent major events
        label = Label(DemographicSectionframe, text = "\nRecent Events for Camper .......................................................................................................... ")
        behavior4 = Entry(DemographicSectionframe)
        r = r+1
        behavior4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Medication Info
        #header
        labelFoodNeedsSection = Label(DemographicSectionframe, text = "\n\nMEDICATION INFORMATION")
        r = r+1
        labelFoodNeedsSection.grid(row = r, columnspan = 2)
        labelFoodNeedsSection.config(font=("Helvetica", 20))

        #med 1
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 1')
        label.grid(row = r, column = 0, sticky = 'w')
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med10 = Entry(DemographicSectionframe)
        r = r+1
        med10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med11 = Entry(DemographicSectionframe)
        r = r+1
        med11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med12 = Entry(DemographicSectionframe)
        r = r+1
        med12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 2
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 2')
        label.grid(row = r, column = 0, sticky = 'w')
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med20 = Entry(DemographicSectionframe)
        r = r+1
        med20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med21 = Entry(DemographicSectionframe)
        r = r+1
        med21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med22 = Entry(DemographicSectionframe)
        r = r+1
        med22.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 3
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 3')
        label.grid(row = r, column = 0, sticky = 'w')        
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med30 = Entry(DemographicSectionframe)
        r = r+1
        med30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med31 = Entry(DemographicSectionframe)
        r = r+1
        med31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med32 = Entry(DemographicSectionframe)
        r = r+1
        med32.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 4
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 4')
        label.grid(row = r, column = 0, sticky = 'w')
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med40 = Entry(DemographicSectionframe)
        r = r+1
        med40.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med41 = Entry(DemographicSectionframe)
        r = r+1
        med41.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med42 = Entry(DemographicSectionframe)
        r = r+1
        med42.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 5
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 5')
        label.grid(row = r, column = 0, sticky = 'w') 
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med50 = Entry(DemographicSectionframe)
        r = r+1
        med50.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med51 = Entry(DemographicSectionframe)
        r = r+1
        med51.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med52 = Entry(DemographicSectionframe)
        r = r+1
        med52.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 6
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 6')
        label.grid(row = r, column = 0, sticky = 'w') 
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med60 = Entry(DemographicSectionframe)
        r = r+1
        med60.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med61 = Entry(DemographicSectionframe)
        r = r+1
        med61.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med62 = Entry(DemographicSectionframe)
        r = r+1
        med62.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 7
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 7')
        label.grid(row = r, column = 0, sticky = 'w')        
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med70 = Entry(DemographicSectionframe)
        r = r+1
        med70.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med71 = Entry(DemographicSectionframe)
        r = r+1
        med71.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med72 = Entry(DemographicSectionframe)
        r = r+1
        med72.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 8
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 8')
        label.grid(row = r, column = 0, sticky = 'w')         
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med80 = Entry(DemographicSectionframe)
        r = r+1
        med80.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med81 = Entry(DemographicSectionframe)
        r = r+1
        med81.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med82 = Entry(DemographicSectionframe)
        r = r+1
        med82.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 9
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 9')
        label.grid(row = r, column = 0, sticky = 'w')        
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med90 = Entry(DemographicSectionframe)
        r = r+1
        med90.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med91 = Entry(DemographicSectionframe)
        r = r+1
        med91.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med92 = Entry(DemographicSectionframe)
        r = r+1
        med92.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 10
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 10')
        label.grid(row = r, column = 0, sticky = 'w')        
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med100 = Entry(DemographicSectionframe)
        r = r+1
        med100.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med101 = Entry(DemographicSectionframe)
        r = r+1
        med101.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med102 = Entry(DemographicSectionframe)
        r = r+1
        med102.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 11
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 11')
        label.grid(row = r, column = 0, sticky = 'w')        
        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med110 = Entry(DemographicSectionframe)
        r = r+1
        med110.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med111 = Entry(DemographicSectionframe)
        r = r+1
        med111.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med112 = Entry(DemographicSectionframe)
        r = r+1
        med112.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Preliminary signatures
        #header
        labelSignatureSection = Label(DemographicSectionframe, text = "\n\nPARENTAL CONSENT INFORMATION")
        r = r+1
        labelSignatureSection.grid(row = r, columnspan = 2)
        labelSignatureSection.config(font=("Helvetica", 20))

        #parent camper contract
        label = Label(DemographicSectionframe, text = "\nParent Camper Contract ............................................................................................................. ")
        parentSig0 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig0, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #participation release
        label = Label(DemographicSectionframe, text = "\nParticipation Consent/Liability Release/Disputes Form Signed .................................................... ")
        parentSig1 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig1, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Media release
        label = Label(DemographicSectionframe, text = "\nMedia Release Form Signed ........................................................................................................ ")
        parentSig2 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig2, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #hiv ed waiver
        label = Label(DemographicSectionframe, text = "\nHIV Education Waiver Signed ...................................................................................................... ")
        parentSig3 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig3, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig3, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #camp rules form signed
        label = Label(DemographicSectionframe, text = "\nRules Acknowledgement Form Signed ......................................................................................... ")
        parentSig4 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig4, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig4, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #parental consent and release
        label = Label(DemographicSectionframe, text = "\nParental Consent and Release Form Signed ................................................................................. ")
        parentSig5 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig5, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig5, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

#                  
#Medical provider sections
#
        #header
        r = r+1
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER SECTION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 25))

#Medical provider
        #header
        labelMedicalProviderSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER INFORMATION")
        r = r+1
        labelMedicalProviderSection.grid(row = r, columnspan = 2)
        labelMedicalProviderSection.config(font=("Helvetica", 20))

        #Diagnosis 1
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 1 ................................................................................................................... ")
        medProvider0 = Entry(DemographicSectionframe)
        r = r+1
        medProvider0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Diagnosis 2
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 2 ................................................................................................................... ")
        medProvider1= Entry(DemographicSectionframe)
        r = r+1
        medProvider1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Diagnosis 3
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 3 ................................................................................................................... ")
        medProvider2 = Entry(DemographicSectionframe)
        r = r+1
        medProvider2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Diagnosis 4
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 4 ................................................................................................................... ")
        medProvider3 = Entry(DemographicSectionframe)
        r = r+1
        medProvider3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Diagnosis 5
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 5 ................................................................................................................... ")
        medProvider4 = Entry(DemographicSectionframe)
        r = r+1
        medProvider4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #management
        label = Label(DemographicSectionframe, text = "\nMedical Management Comments ................................................................................................ ")
        medProvider5 = Entry(DemographicSectionframe)
        r = r+1
        medProvider5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #nutritional supplements
        label = Label(DemographicSectionframe, text = "\nNutritional Supplements Taken? ................................................................................................. ")
        medProvider6 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = medProvider6, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = medProvider6, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #supplement comment
        label = Label(DemographicSectionframe, text = "\nFeeding Care Comments ............................................................................................................ ")
        medProvider7 = Entry(DemographicSectionframe)
        r = r+1
        medProvider7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #formula type
        label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. ")
        medProvider8 = StringVar()
        choices = ['Oral', 'G-tube', 'N-G tube']
        option = tk.OptionMenu(DemographicSectionframe, medProvider8, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #type
        label = Label(DemographicSectionframe, text = "\nFood Allergy")
        r = r+1
        label.grid(row = r, column = 0)

        #allergy1
        label = Label(DemographicSectionframe, text = "\nAllergy 1 .................................................................................................................................... ")
        foodAllergy1 = Entry(DemographicSectionframe)
        r = r+1
        foodAllergy1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction1
        label = Label(DemographicSectionframe, text = "Reaction 1 .................................................................................................................................. ")
        foodReaction1 = Entry(DemographicSectionframe)
        r = r+1
        foodReaction1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy2
        label = Label(DemographicSectionframe, text = "\nAllergy 2 .................................................................................................................................... ")
        foodAllergy2 = Entry(DemographicSectionframe)
        r = r+1
        foodAllergy2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction2
        label = Label(DemographicSectionframe, text = "Reaction 2 .................................................................................................................................. ")
        foodReaction2 = Entry(DemographicSectionframe)
        r = r+1
        foodReaction2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy3
        label = Label(DemographicSectionframe, text = "\nAllergy 3 .................................................................................................................................... ")
        foodAllergy3 = Entry(DemographicSectionframe)
        r = r+1
        foodAllergy3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction3
        label = Label(DemographicSectionframe, text = "Reaction 3 .................................................................................................................................. ")
        foodReaction3 = Entry(DemographicSectionframe)
        r = r+1
        foodReaction3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy4
        label = Label(DemographicSectionframe, text = "\nAllergy 4 .................................................................................................................................... ")
        foodAllergy4 = Entry(DemographicSectionframe)
        r = r+1
        foodAllergy4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction4
        label = Label(DemographicSectionframe, text = "Reaction 4 .................................................................................................................................. ")
        foodReaction4 = Entry(DemographicSectionframe)
        r = r+1
        foodReaction4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy5
        label = Label(DemographicSectionframe, text = "\nAllergy 5 .................................................................................................................................... ")
        foodAllergy5 = Entry(DemographicSectionframe)
        r = r+1
        foodAllergy5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction5
        label = Label(DemographicSectionframe, text = "Reaction 5 .................................................................................................................................. ")
        foodReaction5 = Entry(DemographicSectionframe)
        r = r+1
        foodReaction5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #type
        label = Label(DemographicSectionframe, text = "\nMedical Allergy")
        r = r+1
        label.grid(row = r, column = 0)

        #allergy1
        label = Label(DemographicSectionframe, text = "\nAllergy 1 .................................................................................................................................... ")
        medAllergy1 = Entry(DemographicSectionframe)
        r = r+1
        medAllergy1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction1
        label = Label(DemographicSectionframe, text = "Reaction 1 .................................................................................................................................. ")
        medReaction1 = Entry(DemographicSectionframe)
        r = r+1
        medReaction1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy2
        label = Label(DemographicSectionframe, text = "\nAllergy 2 .................................................................................................................................... ")
        medAllergy2 = Entry(DemographicSectionframe)
        r = r+1
        medAllergy2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction2
        label = Label(DemographicSectionframe, text = "Reaction 2 .................................................................................................................................. ")
        medReaction2 = Entry(DemographicSectionframe)
        r = r+1
        medReaction2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy3
        label = Label(DemographicSectionframe, text = "\nAllergy 3 .................................................................................................................................... ")
        medAllergy3 = Entry(DemographicSectionframe)
        r = r+1
        medAllergy3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction3
        label = Label(DemographicSectionframe, text = "Reaction 3 .................................................................................................................................. ")
        medReaction3 = Entry(DemographicSectionframe)
        r = r+1
        medReaction3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy4
        label = Label(DemographicSectionframe, text = "\nAllergy 4 .................................................................................................................................... ")
        medAllergy4 = Entry(DemographicSectionframe)
        r = r+1
        medAllergy4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction4
        label = Label(DemographicSectionframe, text = "Reaction 4 .................................................................................................................................. ")
        medReaction4 = Entry(DemographicSectionframe)
        r = r+1
        medReaction4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy5
        label = Label(DemographicSectionframe, text = "\nAllergy 5 .................................................................................................................................... ")
        medAllergy5 = Entry(DemographicSectionframe)
        r = r+1
        medAllergy5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction5
        label = Label(DemographicSectionframe, text = "Reaction 5 .................................................................................................................................. ")
        medReaction5 = Entry(DemographicSectionframe)
        r = r+1
        medReaction5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #type
        label = Label(DemographicSectionframe, text = "\nEnvironmental Allergy")
        r = r+1
        label.grid(row = r, column = 0)

        #allergy1
        label = Label(DemographicSectionframe, text = "\nAllergy 1 .................................................................................................................................... ")
        envAllergy1 = Entry(DemographicSectionframe)
        r = r+1
        envAllergy1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction1
        label = Label(DemographicSectionframe, text = "Reaction 1 .................................................................................................................................. ")
        envReaction1 = Entry(DemographicSectionframe)
        r = r+1
        envReaction1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy2
        label = Label(DemographicSectionframe, text = "\nAllergy 2 .................................................................................................................................... ")
        envAllergy2 = Entry(DemographicSectionframe)
        r = r+1
        envAllergy2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction2
        label = Label(DemographicSectionframe, text = "Reaction 2 .................................................................................................................................. ")
        envReaction2 = Entry(DemographicSectionframe)
        r = r+1
        envReaction2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy3
        label = Label(DemographicSectionframe, text = "\nAllergy 3 .................................................................................................................................... ")
        envAllergy3 = Entry(DemographicSectionframe)
        r = r+1
        envAllergy3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction3
        label = Label(DemographicSectionframe, text = "Reaction 3 .................................................................................................................................. ")
        envReaction3 = Entry(DemographicSectionframe)
        r = r+1
        envReaction3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy4
        label = Label(DemographicSectionframe, text = "\nAllergy 4 .................................................................................................................................... ")
        envAllergy4 = Entry(DemographicSectionframe)
        r = r+1
        envAllergy4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction4
        label = Label(DemographicSectionframe, text = "Reaction 4 .................................................................................................................................. ")
        envReaction4 = Entry(DemographicSectionframe)
        r = r+1
        envReaction4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy5
        label = Label(DemographicSectionframe, text = "\nAllergy 5 .................................................................................................................................... ")
        envAllergy5 = Entry(DemographicSectionframe)
        r = r+1
        envAllergy5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction5
        label = Label(DemographicSectionframe, text = "Reaction 5 .................................................................................................................................. ")
        envReaction5 = Entry(DemographicSectionframe)
        r = r+1
        envReaction5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#physical
        #header
        labelPhysicalSection = Label(DemographicSectionframe, text = "\n\nMOST RECENT PHYSICAL INFORMATION")
        r = r+1
        labelPhysicalSection.grid(row = r, columnspan = 2)
        labelPhysicalSection.config(font=("Helvetica", 20))

        #date completed
        label = Label(DemographicSectionframe, text = "\nDate Completed (YYY-MM-DD) ................................................................................................... ")
        physical0 = Entry(DemographicSectionframe)
        r = r+1
        physical0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
                    
        #height
        label = Label(DemographicSectionframe, text = "\nHeight ........................................................................................................................................ ")
        physical1 = Entry(DemographicSectionframe)
        r = r+1
        physical1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #weight
        label = Label(DemographicSectionframe, text = "\nWeight (lb) ................................................................................................................................. ")
        physical2 = Entry(DemographicSectionframe)
        r = r+1
        physical2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #pulse
        label = Label(DemographicSectionframe, text = "\nPulse (bpm) ................................................................................................................................ ")
        physical3 = Entry(DemographicSectionframe)
        r = r+1
        physical3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #respirations
        label = Label(DemographicSectionframe, text = "\nRespirations ............................................................................................................................... ")
        physical4 = Entry(DemographicSectionframe)
        r = r+1
        physical4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #bp
        label = Label(DemographicSectionframe, text = "\nBlood Pressure ........................................................................................................................... ")
        physical5 = Entry(DemographicSectionframe)
        r = r+1
        physical5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HEENT
        label = Label(DemographicSectionframe, text = "\nHEENT ........................................................................................................................................ ")
        physical6 = Entry(DemographicSectionframe)
        r = r+1
        physical6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #skin
        label = Label(DemographicSectionframe, text = "\nSkin ............................................................................................................................................ ")
        physical7 = Entry(DemographicSectionframe)
        r = r+1
        physical7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #cardio
        label = Label(DemographicSectionframe, text = "\nCardiovascular ........................................................................................................................... ")
        physical8 = Entry(DemographicSectionframe)
        r = r+1
        physical8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #gu gyn
        label = Label(DemographicSectionframe, text = "\nGU/GYN ...................................................................................................................................... ")
        physical9 = Entry(DemographicSectionframe)
        r = r+1
        physical9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #pulmonary
        label = Label(DemographicSectionframe, text = "\nPulmonary .................................................................................................................................. ")
        physical10 = Entry(DemographicSectionframe)
        r = r+1
        physical10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #g ha
        label = Label(DemographicSectionframe, text = "\nGlasses/Contacts/Hearing Aids/PE tubes .................................................................................... ")
        physical11 = Entry(DemographicSectionframe)
        r = r+1
        physical11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Abdomen
        label = Label(DemographicSectionframe, text = "\nAbdomen ................................................................................................................................... ")
        physical12 = Entry(DemographicSectionframe)
        r = r+1
        physical12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #LN
        label = Label(DemographicSectionframe, text = "\nLymph Nodes ............................................................................................................................. ")
        physical13 = Entry(DemographicSectionframe)
        r = r+1
        physical13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Extremities
        label = Label(DemographicSectionframe, text = "\nExtremities ................................................................................................................................. ")
        physical14 = Entry(DemographicSectionframe)
        r = r+1
        physical14.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #spine
        label = Label(DemographicSectionframe, text = "\nSpine ......................................................................................................................................... ")
        physical15 = Entry(DemographicSectionframe)
        r = r+1
        physical15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Misc
        label = Label(DemographicSectionframe, text = "\nMiscellaneous ............................................................................................................................ ")
        physical16 = Entry(DemographicSectionframe)
        r = r+1
        physical16.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #comm
        label = Label(DemographicSectionframe, text = "\nComments .................................................................................................................................. ")
        physical17 = Entry(DemographicSectionframe)
        r = r+1
        physical17.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#cognative development level
        #header
        labelCogDevSection = Label(DemographicSectionframe, text = "\n\nCOGNITIVE DEVELOPMENT INFORMATION")
        r = r+1
        labelCogDevSection.grid(row = r, columnspan = 2)
        labelCogDevSection.config(font=("Helvetica", 20))

        #development level
        label = Label(DemographicSectionframe, text = "\nDevelopment Level ..................................................................................................................... ")
        cogDev0 = StringVar()
        choices = ['Age Appropriate', 'Mild Delay', 'Moderate Delay', 'Severe Delay']
        option = tk.OptionMenu(DemographicSectionframe, cogDev0, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #other info
        label = Label(DemographicSectionframe, text = "\nOther Psychosocoal Information ................................................................................................. ")
        cogDev1 = Entry(DemographicSectionframe)
        r = r+1
        cogDev1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Varicella screening
        #header
        labelTuberculosisSection = Label(DemographicSectionframe, text = "\n\nVARICELLA SCREENING")
        r = r+1
        labelTuberculosisSection.grid(row = r, columnspan = 2)
        labelTuberculosisSection.config(font=("Helvetica", 20))

        #Two_Doses
        label = Label(DemographicSectionframe, text = "\nTwo doses of vaccine ................................................................................................................. ")
        varicella0 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = varicella0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = varicella0, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Chicken_Pox
        label = Label(DemographicSectionframe, text = "\nHistory of chicken pox or shingles? ............................................................................................ ")
        varicella1 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = varicella1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = varicella1, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Chicken_Pox_Date
        label = Label(DemographicSectionframe, text = "\nChicken pox/ shingles date (YYYY-MM-DD) ................................................................................ ")
        varicella2 = Entry(DemographicSectionframe)
        r = r+1
        varicella2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Varicella_Antibody
        label = Label(DemographicSectionframe, text = "\nVaricella antibody ....................................................................................................................... ")
        varicella3 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Neg", variable = varicella3, value=1)
        No = Radiobutton(DemographicSectionframe, text = "Pos", variable = varicella3, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Varicella_Antibody_Date
        label = Label(DemographicSectionframe, text = "\nVaricella antibody date (YYYY-MM-DD) ...................................................................................... ")
        varicella4 = Entry(DemographicSectionframe)
        r = r+1
        varicella4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#tuberculosis screening
        #header
        labelTuberculosisSection = Label(DemographicSectionframe, text = "\n\nTUBERCULOSIS SCREENING")
        r = r+1
        labelTuberculosisSection.grid(row = r, columnspan = 2)
        labelTuberculosisSection.config(font=("Helvetica", 20))

        #Tuberculin Skin Test
        label = Label(DemographicSectionframe, text = "\nTuberculin Skin Test")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #date
        label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................. ")
        tuberculosis10 = Entry(DemographicSectionframe)
        r = r+1
        tuberculosis10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Result
        label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... ")
        tuberculosis11 = Entry(DemographicSectionframe)
        r = r+1
        tuberculosis11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Quantiferon Testing
        label = Label(DemographicSectionframe, text = "\nQuantiferon Testing")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #date
        label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................. ")
        tuberculosis20 = Entry(DemographicSectionframe)
        r = r+1
        tuberculosis20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Result
        label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... ")
        tuberculosis21 = Entry(DemographicSectionframe)
        r = r+1
        tuberculosis21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Chest X-ray
        label = Label(DemographicSectionframe, text = "\nChest X-ray")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #date
        label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................. ")
        tuberculosis30 = Entry(DemographicSectionframe)
        r = r+1
        tuberculosis30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Result
        label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... ")
        tuberculosis31 = Entry(DemographicSectionframe)
        r = r+1
        tuberculosis31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Restrictions_And_Recommendations
        #header
        labelTuberculosisSection = Label(DemographicSectionframe, text = "\n\nRESTRICTIONS AND RECOMMENDATIONS")
        r = r+1
        labelTuberculosisSection.grid(row = r, columnspan = 2)
        labelTuberculosisSection.config(font=("Helvetica", 20))

        #Restrictions and recommendations
        label = Label(DemographicSectionframe, text = "\nRestrictions and recommendations ............................................................................................ ")
        restrictionsRec = Entry(DemographicSectionframe)
        r = r+1
        restrictionsRec.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#medcare provider medications
        #header
        labelMedicineProviderSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER MEDICATION INFORMATION")
        r = r+1
        labelMedicineProviderSection.grid(row = r, columnspan = 2)
        labelMedicineProviderSection.config(font=("Helvetica", 20))

        #med 1
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 1')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed11 = Entry(DemographicSectionframe)
        r = r+1
        medProMed11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed12 = Entry(DemographicSectionframe)
        r = r+1
        medProMed12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed13 = Entry(DemographicSectionframe)
        r = r+1
        medProMed13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 2
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 2')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed21 = Entry(DemographicSectionframe)
        r = r+1
        medProMed21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed22 = Entry(DemographicSectionframe)
        r = r+1
        medProMed22.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed23 = Entry(DemographicSectionframe)
        r = r+1
        medProMed23.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 3
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 3')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed31 = Entry(DemographicSectionframe)
        r = r+1
        medProMed31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed32 = Entry(DemographicSectionframe)
        r = r+1
        medProMed32.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed33 = Entry(DemographicSectionframe)
        r = r+1
        medProMed33.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 4
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 4')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed41 = Entry(DemographicSectionframe)
        r = r+1
        medProMed41.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed42 = Entry(DemographicSectionframe)
        r = r+1
        medProMed42.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed43 = Entry(DemographicSectionframe)
        r = r+1
        medProMed43.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 5
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 5')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed51 = Entry(DemographicSectionframe)
        r = r+1
        medProMed51.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed52 = Entry(DemographicSectionframe)
        r = r+1
        medProMed52.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed53 = Entry(DemographicSectionframe)
        r = r+1
        medProMed53.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 6
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 6')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed61 = Entry(DemographicSectionframe)
        r = r+1
        medProMed61.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed62 = Entry(DemographicSectionframe)
        r = r+1
        medProMed62.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed63 = Entry(DemographicSectionframe)
        r = r+1
        medProMed63.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 7
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 7')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed71 = Entry(DemographicSectionframe)
        r = r+1
        medProMed71.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed72 = Entry(DemographicSectionframe)
        r = r+1
        medProMed72.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed73 = Entry(DemographicSectionframe)
        r = r+1
        medProMed73.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 8
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 8')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed81 = Entry(DemographicSectionframe)
        r = r+1
        medProMed81.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed82 = Entry(DemographicSectionframe)
        r = r+1
        medProMed82.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed83 = Entry(DemographicSectionframe)
        r = r+1
        medProMed83.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 9
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 9')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed91 = Entry(DemographicSectionframe)
        r = r+1
        medProMed91.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed92 = Entry(DemographicSectionframe)
        r = r+1
        medProMed92.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed93 = Entry(DemographicSectionframe)
        r = r+1
        medProMed93.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 10
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 10')
        label.grid(row = r, column = 0, sticky = 'w')
        #medication10
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed101 = Entry(DemographicSectionframe)
        r = r+1
        medProMed101.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed102 = Entry(DemographicSectionframe)
        r = r+1
        medProMed102.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #times to give
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed103 = Entry(DemographicSectionframe)
        r = r+1
        medProMed103.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#medcare provider verification statement
        #header
        labelMedicalStatementSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER VERIFICATION STATEMENT")
        r = r+1
        labelMedicalStatementSection.grid(row = r, columnspan = 2)
        labelMedicalStatementSection.config(font=("Helvetica", 20))

        #signature
        label = Label(DemographicSectionframe, text = "\nSignature Provided? ................................................................................................................... ")
        medProvVerState0 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = medProvVerState0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = medProvVerState0, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #signature date
        label = Label(DemographicSectionframe, text = "\nDate (YYYY-MM-DD) .................................................................................................................. ")
        medProvVerState1 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #name
        label = Label(DemographicSectionframe, text = "\nExaminer Name .......................................................................................................................... ")
        medProvVerState2 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address street
        label = Label(DemographicSectionframe, text = "\nAddress Street ........................................................................................................................... ")
        medProvVerState3 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address city
        label = Label(DemographicSectionframe, text = "\nAddress City .............................................................................................................................. ")
        medProvVerState4 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address state
        label = Label(DemographicSectionframe, text = "\nAddress State ............................................................................................................................ ")
        medProvVerState5 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address zip
        label = Label(DemographicSectionframe, text = "\nAddress Zipcode ........................................................................................................................ ")
        medProvVerState6 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #phone
        label = Label(DemographicSectionframe, text = "\nPhone ........................................................................................................................................ ")
        medProvVerState7 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #emergency contact
        label = Label(DemographicSectionframe, text = "\nEmergency Contact .................................................................................................................... ")
        medProvVerState8 = Entry(DemographicSectionframe)
        r = r+1
        medProvVerState8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#
#hiv provider sections
#
        #header
        r = r+1
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nHIV PROVIDER SECTION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 25))

#health history
        #header
        labelHealthHistorySection = Label(DemographicSectionframe, text = "\n\nHEALTH HISTORY INFORMATION FROM HIV PROVIDER")
        r = r+1
        labelHealthHistorySection.grid(row = r, columnspan = 2)
        labelHealthHistorySection.config(font=("Helvetica", 20))
        
        #surgical history
        label = Label(DemographicSectionframe, text = "\nMajor Surgical History ................................................................................................................ ")
        healthHistory0 = Entry(DemographicSectionframe)
        r = r+1
        healthHistory0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #health history
        label = Label(DemographicSectionframe, text = "\nHealth History ............................................................................................................................ ")
        r = r+1
        label.grid(row = r, column = 0)

        #HIV
        healthHistory1 = IntVar()
        Checkbutton(DemographicSectionframe, text = 'HIV', variable = healthHistory1).grid(row = r,  column = 1, sticky = W)

        #Hepatitis B
        healthHistory2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Hepatitis B', variable = healthHistory2).grid(row = r,  column = 1, sticky = W)

        #Hepatitis C
        healthHistory3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Hepatitis C', variable = healthHistory3).grid(row = r,  column = 1, sticky = W)

        #Poor growth
        healthHistory4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Poor growth', variable = healthHistory4).grid(row = r,  column = 1, sticky = W)

        #Bleeding disorders
        healthHistory5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Bleeding disorders', variable = healthHistory5).grid(row = r,  column = 1, sticky = W)

        #Asthma
        healthHistory6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Asthma', variable = healthHistory6).grid(row = r,  column = 1, sticky = W)

        #Pulmonary Disease
        healthHistory7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Pulmonary Disease', variable = healthHistory7).grid(row = r,  column = 1, sticky = W)

        #Chronic Cough
        healthHistory8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Chronic Cough', variable = healthHistory8).grid(row = r,  column = 1, sticky = W)

        #ADD or ADHD
        healthHistory9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'ADD or ADHD', variable = healthHistory9).grid(row = r,  column = 1, sticky = W)

        #Renal Disease
        healthHistory10 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Renal Disease', variable = healthHistory10).grid(row = r,  column = 1, sticky = W)

        #Sickle Cell disease
        healthHistory11 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Sickle Cell disease', variable = healthHistory11).grid(row = r,  column = 1, sticky = W)

        #Congenital Heart Disease
        healthHistory12 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Congenital Heart Disease', variable = healthHistory12).grid(row = r,  column = 1, sticky = W)

        #Hypertension
        healthHistory13 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Hypertension', variable = healthHistory13).grid(row = r,  column = 1, sticky = W)

        #Cryptosporidium
        healthHistory14 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Cryptosporidium', variable = healthHistory14).grid(row = r,  column = 1, sticky = W)

        #Chronic diarrhea
        healthHistory15 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Chronic diarrhea', variable = healthHistory15).grid(row = r,  column = 1, sticky = W)

        #Seizures
        healthHistory16 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Seizures', variable = healthHistory16).grid(row = r,  column = 1, sticky = W)

        #Diabetes
        healthHistory17 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Diabetes', variable = healthHistory17).grid(row = r,  column = 1, sticky = W)

        #Other
        healthHistory18 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text = 'Other', variable = healthHistory18).grid(row = r,  column = 1, sticky = W)

        #If other
        healthHistory19 = Entry(DemographicSectionframe, width = 19)
        healthHistory19.grid(row = r, column = 1, sticky = E)

        #history of noncompliance
        label = Label(DemographicSectionframe, text = "\nHistory of Noncompliance? ......................................................................................................... ")
        healthHistory20 = IntVar()
        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = healthHistory20, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = healthHistory20, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #explanation
        label = Label(DemographicSectionframe, text = "\nExplanation of Noncompliance .................................................................................................... ")
        healthHistory21 = Entry(DemographicSectionframe)
        r = r+1
        healthHistory21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#lab data
        #header
        labelHealthHistorySection = Label(DemographicSectionframe, text = "\n\nLAB DATA")
        r = r+1
        labelHealthHistorySection.grid(row = r, columnspan = 2)
        labelHealthHistorySection.config(font=("Helvetica", 20))
        
        #lab1 date
        label = Label(DemographicSectionframe, text = "\nDate of First Lab Examination (YYYY-MM-DD) ............................................................................ ")
        lab0 = Entry(DemographicSectionframe)
        r = r+1
        lab0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 wbc
        label = Label(DemographicSectionframe, text = "White Blood Cell Count .............................................................................................................. ")
        lab1 = Entry(DemographicSectionframe)
        r = r+1
        lab1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 hgb
        label = Label(DemographicSectionframe, text = "Hemoglobin Level ....................................................................................................................... ")
        lab2 = Entry(DemographicSectionframe)
        r = r+1
        lab2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 hct
        label = Label(DemographicSectionframe, text = "Hematocrit Level ........................................................................................................................ ")
        lab3 = Entry(DemographicSectionframe)
        r = r+1
        lab3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 plt
        label = Label(DemographicSectionframe, text = "Plt Count .................................................................................................................................... ")
        lab4 = Entry(DemographicSectionframe)
        r = r+1
        lab4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)


        #lab2 date
        label = Label(DemographicSectionframe, text = "\nDate of Second Lab Examination (YYYY-MM-DD) ........................................................................ ")
        lab5 = Entry(DemographicSectionframe)
        r = r+1
        lab5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab2 cd4
        label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... ")
        lab6 = Entry(DemographicSectionframe)
        r = r+1
        lab6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab2 viral load
        label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... ")
        lab7 = Entry(DemographicSectionframe)
        r = r+1
        lab7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab3 date
        label = Label(DemographicSectionframe, text = "\nDate of Third Lab Examination (YYYY-MM-DD) ........................................................................... ")
        lab8 = Entry(DemographicSectionframe)
        r = r+1
        lab8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab3 cd4
        label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... ")
        lab9 = Entry(DemographicSectionframe)
        r = r+1
        lab9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab3 viral load
        label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... ")
        lab10 = Entry(DemographicSectionframe)
        r = r+1
        lab10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Submit arrays
        demInfoArr = [demInfo0, demInfo1, demInfo2, demInfo3, demInfo4, demInfo5, demInfo6, demInfo7, demInfo8, demInfo9,
        demInfo10, demInfo11, demInfo12, demInfo13, demInfo14, demInfo15, demInfo16, demInfo17, demInfo18, demInfo19, demInfo20]
        demInfoTransportArr = [demInfoTransport0, demInfoTransport1, demInfoTransport2, demInfoTransport3, demInfoTransport4, demInfoTransport5]
        demContactInfoArr = [demContactInfo10, demContactInfoTime10, demContactInfoTime11, demContactInfo11,
        demContactInfo20, demContactInfoTime20, demContactInfoTime21, demContactInfo21,
        demContactInfo30, demContactInfoTime30, demContactInfoTime31, demContactInfo31]
        emergencyInfoArr = [emergencyInfo10, emergencyInfo11, emergencyInfo12, emergencyInfo13, emergencyInfo20, emergencyInfo21, emergencyInfo22, emergencyInfo23]
        insuranceInfoArr = [insuranceInfo0, insuranceInfo1, insuranceInfo2, insuranceInfo3]
        medProviderInfoArr = [medProviderInfo0, medProviderInfo1, medProviderInfo2, medProviderInfo3]
        medInfoCurrArr = [medInfoCurr0, medInfoCurr1, medInfoCurr2, medInfoCurr3, medInfoCurr4, medInfoCurr5, medInfoCurr6, medInfoCurr7, medInfoCurr8, medInfoCurr9]
        medInfoArr = [medInfo0, medInfo1]
        allergyInfoArr = [allergyInfo0, allergyInfo1, allergyInfo2, allergyInfo3, allergyInfo4, allergyInfo5, allergyInfo6]
        dietaryNeedsInfoArr = [dietaryNeedsInfo0, dietaryNeedsInfo1, dietaryNeedsInfo2, dietaryNeedsInfo3, dietaryNeedsInfo4,
        dietaryNeedsInfo5, dietaryNeedsInfo6, dietaryNeedsInfo7, dietaryNeedsInfo8, dietaryNeedsInfo9]
        dietaryNeedsHowInfoArr = [dietaryNeedsHowInfo0, dietaryNeedsHowInfo1]
        genHealthLimitArr = [genHealthLimit0, genHealthLimit1, genHealthLimit2, genHealthLimit3, genHealthLimit4, genHealthLimit5, genHealthLimit6, genHealthLimit7, genHealthLimit8, genHealthLimit9]
        genHealthArr = [genHealth0, genHealth1, genHealth2, genHealth3, genHealth4, genHealth5, genHealth6]
        behaviorArr = [behavior0, behavior1, behavior2, behavior3, behavior4]
        behaviorExperiancesArr = [behaviorExperiances0, behaviorExperiances1, behaviorExperiances2, behaviorExperiances3, behaviorExperiances4, behaviorExperiances5, behaviorExperiances6, behaviorExperiances7, behaviorExperiances8, behaviorExperiances9]
        behaviorInterestsArr = [behaviorInterests0, behaviorInterests1, behaviorInterests2, behaviorInterests3, behaviorInterests4, behaviorInterests5, behaviorInterests6, behaviorInterests7, behaviorInterests8, behaviorInterests9,
        behaviorInterests10, behaviorInterests11, behaviorInterests12]
        medArr = [med10, med11, med12, med20, med21, med22, med30, med31, med32, med40, med41, med42, med50, med51, med52, med60, med61, med62, med70, med71, med72,
        med80, med81, med82, med90, med91, med92, med100, med101, med102, med110, med111, med112]
        parentSigArr = [parentSig0, parentSig1, parentSig2, parentSig3, parentSig4, parentSig5]
        medProviderArr = [medProvider0, medProvider1, medProvider2, medProvider3, medProvider4, medProvider5, medProvider6, medProvider7, medProvider8]
        foodAlergyArr = [foodAllergy1, foodReaction1, foodAllergy2, foodReaction2, foodAllergy3, foodReaction3, foodAllergy4, foodReaction4, foodAllergy5, foodReaction5]
        medAlergyArr = [medAllergy1, medReaction1, medAllergy2, medReaction2, medAllergy3, medReaction3, medAllergy4, medReaction4, medAllergy5, medReaction5]
        envAlergyArr = [envAllergy1, envReaction1, envAllergy2, envReaction2, envAllergy3, envReaction3, envAllergy4, envReaction4,  envAllergy5, envReaction5]
        physicalArr = [physical0, physical1, physical2, physical3, physical4, physical5, physical6, physical7, physical8, physical9,
        physical10, physical11, physical12, physical13, physical14, physical15, physical16, physical17]
        cogDevArr = [cogDev0, cogDev1]
        varicellaArr = [varicella0, varicella1, varicella2, varicella3, varicella4]
        tuberculosisArr = [tuberculosis10, tuberculosis11, tuberculosis20, tuberculosis21, tuberculosis30, tuberculosis31]
        medProMedArr = [medProMed11, medProMed12, medProMed13, medProMed21, medProMed22, medProMed23, medProMed31, medProMed32, medProMed33, medProMed41, medProMed42, medProMed43,
        medProMed51, medProMed52, medProMed53, medProMed61, medProMed62, medProMed63, medProMed71, medProMed72, medProMed73, medProMed81, medProMed82, medProMed83,
        medProMed91, medProMed92, medProMed93, medProMed101, medProMed102, medProMed103]
        medProvVerStateArr = [medProvVerState0, medProvVerState1, medProvVerState2, medProvVerState3, medProvVerState4, medProvVerState5, medProvVerState6, medProvVerState7, medProvVerState8]
        healthHistoryArr = [healthHistory0, healthHistory1, healthHistory2, healthHistory3, healthHistory4, healthHistory5, healthHistory6, healthHistory7, healthHistory8, healthHistory9,
        healthHistory10, healthHistory11, healthHistory12, healthHistory13, healthHistory14, healthHistory15, healthHistory16, healthHistory17, healthHistory18,
        healthHistory19, healthHistory20, healthHistory21]
        labArr = [lab0, lab1, lab2, lab3, lab4, lab5, lab6, lab7, lab8, lab9, lab10]

#Submit
        r = r+1
        submitProfileButton = Button(DemographicSectionframe, text = "Submit Profile", 
            command = lambda:self.submitCampProfile(
        id, date,
        demInfoArr, demInfoTransportArr, demContactInfoArr, emergencyInfoArr, insuranceInfoArr, medProviderInfoArr, medInfoCurrArr, medInfoArr,
        allergyInfoArr, dietaryNeedsInfoArr, dietaryNeedsHowInfoArr, genHealthLimitArr, genHealthArr, behaviorArr, behaviorExperiancesArr,
        behaviorInterestsArr, medArr, parentSigArr, medProviderArr, foodAlergyArr, medAlergyArr, envAlergyArr, physicalArr, cogDevArr, varicellaArr,
        tuberculosisArr, restrictionsRec, medProMedArr, medProvVerStateArr, healthHistoryArr, labArr))


        submitProfileButton.grid(sticky = 'w, e', row = r, columnspan = 2)

    def submitCampProfile(self,
        id, date,
        demInfoArr, demInfoTransportArr, demContactInfoArr, emergencyInfoArr, insuranceInfoArr, medProviderInfoArr, medInfoCurrArr, medInfoArr,
        allergyInfoArr, dietaryNeedsInfoArr, dietaryNeedsHowInfoArr, genHealthLimitArr, genHealthArr, behaviorArr, behaviorExperiancesArr,
        behaviorInterestsArr, medArr, parentSigArr, medProviderArr, foodAlergyArr, medAlergyArr, envAlergyArr, physicalArr, cogDevArr, varicellaArr,
        tuberculosisArr, restrictionsRec, medProMedArr, medProvVerStateArr, healthHistoryArr, labArr):

        success = 1
        goodData = 1

#adapt for database

#Demographic info section
        demInfo0 = demInfoArr[0].get()
        if demInfo0 == '':
            demInfo0 = None
        
        demInfo1 = demInfoArr[1].get()
        if demInfo1 == '':
            demInfo1 = None

        demInfo2 = demInfoArr[2].get()
        if demInfo2 == '':
            demInfo2 = None

        demInfo3 = demInfoArr[3].get()
        if demInfo3 != '':
            if self.is_number(demInfo3):
                demInfo3 = int(demInfo3)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nAge must be only numbers.")
                goodData = 0
        else:
            demInfo3 = None

        demInfo4 = demInfoArr[4].get()
        if demInfo4 != '':
            if not self.is_date(demInfo4):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            demInfo4 = None

        demInfo5 = demInfoArr[5].get()
        if demInfo5 == '':
            demInfo5 = None

        demInfo6 = demInfoArr[6].get()
        if demInfo6 == '':
            demInfo6 = None

        demInfo7 = demInfoArr[7].get()
        if demInfo7 == '':
            demInfo7 = None

        demInfo8 = demInfoArr[8].get()
        if demInfo8 == '':
            demInfo8 = None

        demInfo9 = demInfoArr[9].get()
        if demInfo9 == '':
            demInfo9 = None

        demInfo10 = demInfoArr[10].get()
        if demInfo10 == '':
            demInfo10 = None

        demInfo11 = demInfoArr[11].get()
        if demInfo11 == '':
            demInfo11 = None

        demInfo12 = demInfoArr[12].get()
        if demInfo12 != '':
            if self.is_number(demInfo12):
                demInfo12 = int(demInfo12)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nZip must be only numbers.")
                goodData = 0
        else:
            demInfo12 = None

        demInfo13 = demInfoArr[13].get()
        if demInfo13 == '':
            demInfo13 = None

        demInfo14 = demInfoArr[14].get()
        if demInfo14 == '':
            demInfo14 = None

        demInfo15 = demInfoArr[15].get()
        if demInfo15 == '':
            demInfo15 = None

        demInfo16 = demInfoArr[16].get()
        if demInfo16 == '':
            demInfo16 = None

        demInfo17 = demInfoArr[17].get()
        if demInfo17 != '':
            if self.is_number(demInfo17):
                demInfo17 = int(demInfo17)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nGrade level must be only numbers.")
                goodData = 0
        else:
            demInfo17 = None

        demInfo18 = demInfoArr[18].get()
        if demInfo18 == 0:
            demInfo18 = None
        elif demInfo18 == 2:
            demInfo18 = 0

        demInfo19 = demInfoArr[19].get()
        if demInfo19 == 0:
            demInfo19 = None
        elif demInfo19 == 2:
            demInfo19 = 0

        demInfo20 = demInfoArr[20].get()
        if demInfo20 == '':
            demInfo20 = None

        demInfoTransport = ''

        if demInfoTransportArr[0].get():
            demInfoTransport = demInfoTransport + 'Atlanta bus,'

        if demInfoTransportArr[1].get():
            demInfoTransport = demInfoTransport + 'Augusta bus,'

        if demInfoTransportArr[2].get():
            demInfoTransport = demInfoTransport + 'Albany bus,'

        if demInfoTransportArr[3].get():
            demInfoTransport = demInfoTransport + 'Athens bus,'

        if demInfoTransportArr[4].get():
            demInfoTransport = demInfoTransport + 'Savannah bus,'

        if demInfoTransportArr[5].get():
            demInfoTransport = demInfoTransport + 'Car/drop,'

        if demInfoTransport == '':
            demInfoTransport = None
        else:
            demInfoTransport = demInfoTransport[:-1]

#demographic contacts
        #cell
        demContactInfo10 = demContactInfoArr[0].get()
        if demContactInfo10 == '':
            demContactInfo10 = None

        demContactInfoTime1 = ''

        if demContactInfoArr[1].get():
            demContactInfoTime1 = demContactInfoTime1 + 'Day'

        if demContactInfoArr[2].get():
            demContactInfoTime1 = demContactInfoTime1 + 'Evening'

        if demContactInfoTime1 == '':
            demContactInfoTime1 = None

        demContactInfo11 = demContactInfoArr[3].get()
        if demContactInfo11 == '':
            demContactInfo11 = None

        #home
        demContactInfo20 = demContactInfoArr[4].get()
        if demContactInfo20 == '':
            demContactInfo20 = None

        demContactInfoTime2 = ''

        if demContactInfoArr[5].get():
            demContactInfoTime2 = demContactInfoTime2 + 'Day'

        if demContactInfoArr[6].get():
            demContactInfoTime2 = demContactInfoTime2 + 'Evening'

        if demContactInfoTime2 == '':
            demContactInfoTime2 = None

        demContactInfo21 = demContactInfoArr[7].get()
        if demContactInfo21 == '':
            demContactInfo21 = None

        #work
        demContactInfo30 = demContactInfoArr[8].get()
        if demContactInfo30 == '':
            demContactInfo30 = None

        demContactInfoTime3 = ''

        if demContactInfoArr[9].get():
            demContactInfoTime3 = demContactInfoTime3 + 'Day'

        if demContactInfoArr[10].get():
            demContactInfoTime3 = demContactInfoTime3 + 'Evening'

        if demContactInfoTime3 == '':
            demContactInfoTime3 = None

        demContactInfo31 = demContactInfoArr[11].get()
        if demContactInfo31 == '':
            demContactInfo31 = None

#Parent/ Guardian Emergency Contact Section
        emergencyInfo10 = emergencyInfoArr[0].get()
        if emergencyInfo10 == '':
            emergencyInfo10 = None

        emergencyInfo11 = emergencyInfoArr[1].get()
        if emergencyInfo11 == '':
            emergencyInfo11 = None

        emergencyInfo12 = emergencyInfoArr[2].get()
        if emergencyInfo12 == '':
            emergencyInfo12 = None

        emergencyInfo13 = emergencyInfoArr[3].get()
        if emergencyInfo13 == '':
            emergencyInfo13 = None
        
        emergencyInfo20 = emergencyInfoArr[4].get()
        if emergencyInfo20 == '':
            emergencyInfo20 = None

        emergencyInfo21 = emergencyInfoArr[5].get()
        if emergencyInfo21 == '':
            emergencyInfo21 = None

        emergencyInfo22 = emergencyInfoArr[6].get()
        if emergencyInfo22 == '':
            emergencyInfo22 = None

        emergencyInfo23 = emergencyInfoArr[7].get()
        if emergencyInfo23 == '':
            emergencyInfo23 = None

#Insurance Info Section
        insuranceInfo0 = insuranceInfoArr[0].get()
        if insuranceInfo0 == '':
            insuranceInfo0 = None

        insuranceInfo1 = insuranceInfoArr[1].get()
        if insuranceInfo1 == '':
            insuranceInfo1 = None

        insuranceInfo2 = insuranceInfoArr[2].get()
        if insuranceInfo2 == '':
            insuranceInfo2 = None

        insuranceInfo3 = insuranceInfoArr[3].get()
        if insuranceInfo3 == '':
            insuranceInfo3 = None

#Medical Provider Section
        medProviderInfo0 = medProviderInfoArr[0].get()
        if medProviderInfo0 == '':
            medProviderInfo0 = None

        medProviderInfo1 = medProviderInfoArr[1].get()
        if medProviderInfo1 == '':
            medProviderInfo1 = None

        medProviderInfo2 = medProviderInfoArr[2].get()
        if medProviderInfo2 == '':
            medProviderInfo2 = None

        medProviderInfo3 = medProviderInfoArr[3].get()
        if medProviderInfo3 == '':
            medProviderInfo3 = None

#Medical Information Section
        medInfoCurr = ''

        if medInfoCurrArr[0].get():
            medInfoCurr = medInfoCurr + 'HIV,'

        if medInfoCurrArr[1].get():
            medInfoCurr = medInfoCurr + 'Hepatitis B,'

        if medInfoCurrArr[2].get():
            medInfoCurr = medInfoCurr + 'Hepatitis C,'

        if medInfoCurrArr[3].get():
            medInfoCurr = medInfoCurr + 'ADD or ADHD,'

        if medInfoCurrArr[4].get():
            medInfoCurr = medInfoCurr + 'Sickle Cell Disease,'

        if medInfoCurrArr[5].get():
            medInfoCurr = medInfoCurr + 'Asthma,'

        if medInfoCurrArr[6].get():
            medInfoCurr = medInfoCurr + 'Tubes in Ears,'

        if medInfoCurrArr[7].get():
            medInfoCurr = medInfoCurr + 'Heart Problems,'

        if medInfoCurrArr[8].get():
            medInfoCurr = medInfoCurr + 'Mental Health Diagnoses,'

        if medInfoCurrArr[9].get():
            medInfoCurr = medInfoCurr + 'Other,'

        if medInfoCurr == '':
            medInfoCurr = None
        else:
            medInfoCurr = medInfoCurr[:-1]

        medInfo0 = medInfoArr[0].get()
        if medInfo0 == '':
            medInfo0 = None

        medInfo1 = medInfoArr[1].get()
        if medInfo1 == '':
            medInfo1 = None

#Allergies Section
        allergyInfo0 = allergyInfoArr[0].get()
        if allergyInfo0 == 0:
            allergyInfo0 = None
        elif allergyInfo0 == 2:
            allergyInfo0 = 0

        allergyInfo1 = allergyInfoArr[1].get()
        if allergyInfo1 == '':
            allergyInfo1 = None

        allergyInfo2 = allergyInfoArr[2].get()
        if allergyInfo2 == 0:
            allergyInfo2 = None
        elif allergyInfo2 == 2:
            allergyInfo2 = 0

        allergyInfo3 = allergyInfoArr[3].get()
        if allergyInfo3 == '':
            allergyInfo3 = None

        allergyInfo4 = allergyInfoArr[4].get()
        if allergyInfo4 == 0:
            allergyInfo4 = None
        elif allergyInfo4 == 2:
            allergyInfo4 = 0

        allergyInfo5 = allergyInfoArr[5].get()
        if allergyInfo5 == '':
            allergyInfo5 = None

        allergyInfo6 = allergyInfoArr[6].get()
        if allergyInfo6 == 0:
            allergyInfo6 = None
        elif allergyInfo6 == 2:
            allergyInfo6 = 0

#Dietary Needs Section
        dietaryNeedsInfo0 = dietaryNeedsInfoArr[0].get()
        if dietaryNeedsInfo0 == 0:
            dietaryNeedsInfo0 = None
        elif dietaryNeedsInfo0 == 2:
            dietaryNeedsInfo0 = 0

        dietaryNeedsInfo1 = dietaryNeedsInfoArr[1].get()
        if dietaryNeedsInfo1 == 0:
            dietaryNeedsInfo1 = None
        elif dietaryNeedsInfo1 == 2:
            dietaryNeedsInfo1 = 0

        dietaryNeedsInfo2 = dietaryNeedsInfoArr[2].get()
        if dietaryNeedsInfo2 == '':
            dietaryNeedsInfo2 = None

        dietaryNeedsInfo3 = dietaryNeedsInfoArr[3].get()
        if dietaryNeedsInfo3 == '':
            dietaryNeedsInfo3 = None

        dietaryNeedsInfo4 = dietaryNeedsInfoArr[4].get()
        if dietaryNeedsInfo4 == 0:
            dietaryNeedsInfo4 = None
        elif dietaryNeedsInfo4 == 2:
            dietaryNeedsInfo4 = 0

        dietaryNeedsHowInfo = ''

        if dietaryNeedsHowInfoArr[0].get():
            dietaryNeedsHowInfo = dietaryNeedsHowInfo + 'By Mouth,'

        if dietaryNeedsHowInfoArr[1].get():
            dietaryNeedsHowInfo = dietaryNeedsHowInfo + 'By G-Tube,'

        if dietaryNeedsHowInfo == '':
            dietaryNeedsHowInfo = None
        else:
            dietaryNeedsHowInfo = dietaryNeedsHowInfo[:-1]

        dietaryNeedsInfo5 = dietaryNeedsInfoArr[5].get()
        if dietaryNeedsInfo5 == '':
            dietaryNeedsInfo5 = None

        dietaryNeedsInfo6 = demInfoArr[6].get()
        if dietaryNeedsInfo6 != '':
            if self.is_number(dietaryNeedsInfo6):
                dietaryNeedsInfo6 = int(dietaryNeedsInfo6)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nFormula cans per day must be only numbers.")
                goodData = 0
        else:
            dietaryNeedsInfo6 = None

        dietaryNeedsInfo7 = dietaryNeedsInfoArr[7].get()
        if dietaryNeedsInfo7 == 0:
            dietaryNeedsInfo7 = None
        elif dietaryNeedsInfo7 == 2:
            dietaryNeedsInfo7 = 0

        dietaryNeedsInfo8 = dietaryNeedsInfoArr[8].get()
        if dietaryNeedsInfo8 == '':
            dietaryNeedsInfo8 = None

        dietaryNeedsInfo9 = dietaryNeedsInfoArr[9].get()
        if dietaryNeedsInfo9 == '':
            dietaryNeedsInfo9 = None

#General health
        genHealthLimit = ''

        if genHealthLimitArr[0].get():
            genHealthLimit = genHealthLimit + 'Dressing,'

        if genHealthLimitArr[1].get():
            genHealthLimit = genHealthLimit + 'Showering,'

        if genHealthLimitArr[2].get():
            genHealthLimit = genHealthLimit + 'Eating,'

        if genHealthLimitArr[3].get():
            genHealthLimit = genHealthLimit + 'Toileting,'

        if genHealthLimitArr[4].get():
            genHealthLimit = genHealthLimit + 'Walking/Balance,'

        if genHealthLimitArr[5].get():
            genHealthLimit = genHealthLimit + 'Braces,'

        if genHealthLimitArr[6].get():
            genHealthLimit = genHealthLimit + 'Casts,'

        if genHealthLimitArr[7].get():
            genHealthLimit = genHealthLimit + 'Walker,'

        if genHealthLimitArr[8].get():
            genHealthLimit = genHealthLimit + 'Wheelchair,'

        if genHealthLimitArr[9].get():
            genHealthLimit = genHealthLimit + 'Other,'

        if genHealthLimit == '':
            genHealthLimit = None
        else:
            genHealthLimit = genHealthLimit[:-1]

        genHealth0 = genHealthArr[0].get()
        if genHealth0 == '':
            genHealth0 = None

        genHealth1 = genHealthArr[1].get()
        if genHealth1 == 0:
            genHealth1 = None
        elif genHealth1 == 2:
            genHealth1 = 0

        genHealth2 = genHealthArr[2].get()
        if genHealth2 == 0:
            genHealth2 = None
        elif genHealth2 == 2:
            genHealth2 = 0

        genHealth3 = genHealthArr[3].get()
        if genHealth3 == 0:
            genHealth3 = None
        elif genHealth3 == 2:
            genHealth3 = 0

        genHealth4 = genHealthArr[4].get()
        if genHealth4 == 0:
            genHealth4 = None
        elif genHealth4 == 2:
            genHealth4 = 0

        genHealth5 = genHealthArr[5].get()
        if genHealth5 == 0:
            genHealth5 = None
        elif genHealth5 == 2:
            genHealth5 = 0

        genHealth6 = genHealthArr[6].get()
        if genHealth6 == '':
            genHealth6 = None

#Behavior
        behavior0 = behaviorArr[0].get()
        if behavior0 == 0:
            behavior0 = None
        elif behavior0 == 2:
            behavior0 = 0

        behavior1 = behaviorArr[1].get()
        if behavior1 == '':
            behavior1 = None

        behaviorExperiances = ''

        if behaviorExperiancesArr[0].get():
            behaviorExperiances = behaviorExperiances + 'Anxiety,'

        if behaviorExperiancesArr[1].get():
            behaviorExperiances = behaviorExperiances + 'Fear of dark,'

        if behaviorExperiancesArr[2].get():
            behaviorExperiances = behaviorExperiances + 'Homesickness,'

        if behaviorExperiancesArr[3].get():
            behaviorExperiances = behaviorExperiances + 'Sleeps with night light,'

        if behaviorExperiancesArr[4].get():
            behaviorExperiances = behaviorExperiances + 'Fights easily,'

        if behaviorExperiancesArr[5].get():
            behaviorExperiances = behaviorExperiances + 'School suspension due to behavior,'

        if behaviorExperiancesArr[6].get():
            behaviorExperiances = behaviorExperiances + 'Bedwetting,'

        if behaviorExperiancesArr[7].get():
            behaviorExperiances = behaviorExperiances + 'Sleeps with comfort item,'

        if behaviorExperiancesArr[8].get():
            behaviorExperiances = behaviorExperiances + 'Hyperactivity or problems with attention,'

        if behaviorExperiancesArr[9].get():
            behaviorExperiances = behaviorExperiances + 'History of trauma or sexual abuse,'

        if behaviorExperiances == '':
            behaviorExperiances = None
        else:
            behaviorExperiances = behaviorExperiances[:-1]

        behavior2 = behaviorArr[2].get()
        if behavior2 == 0:
            behavior2 = None
        elif behavior2 == 2:
            behavior2 = 0

        behavior3 = behaviorArr[3].get()
        if behavior3 == 0:
            behavior3 = None
        elif behavior3 == 2:
            behavior3 = 0

        behaviorInterests = ''

        if behaviorInterestsArr[0].get():
            behaviorInterests = behaviorInterests + 'Reading,'

        if behaviorInterestsArr[1].get():
            behaviorInterests = behaviorInterests + 'Music,'

        if behaviorInterestsArr[2].get():
            behaviorInterests = behaviorInterests + 'Swimming,'

        if behaviorInterestsArr[3].get():
            behaviorInterests = behaviorInterests + 'Dance,'

        if behaviorInterestsArr[4].get():
            behaviorInterests = behaviorInterests + 'Sports,'

        if behaviorInterestsArr[5].get():
            behaviorInterests = behaviorInterests + 'Arts/Crafts,'

        if behaviorInterestsArr[6].get():
            behaviorInterests = behaviorInterests + 'Fishing,'

        if behaviorInterestsArr[7].get():
            behaviorInterests = behaviorInterests + 'Boating,'

        if behaviorInterestsArr[8].get():
            behaviorInterests = behaviorInterests + 'Archery,'

        if behaviorInterestsArr[9].get():
            behaviorInterests = behaviorInterests + 'Golf,'

        if behaviorInterestsArr[10].get():
            behaviorInterests = behaviorInterests + 'Bicycling,'

        if behaviorInterestsArr[11].get():
            behaviorInterests = behaviorInterests + 'Animals,'

        if behaviorInterestsArr[12].get():
            behaviorInterests = behaviorInterests + 'Nature,'

        if behaviorInterests == '':
            behaviorInterests = None
        else:
            behaviorInterests = behaviorInterests[:-1]

        behavior4 = behaviorArr[4].get()
        if behavior4 == '':
            behavior4 = None

#Medication Info

        med10 = medArr[0].get()
        if med10 == '':
            med10 = None

        med11 = medArr[1].get()
        if med11 == '':
            med11 = None

        med12 = medArr[2].get()
        if med12 == '':
            med12 = None

        med20 = medArr[3].get()
        if med20 == '':
            med20 = None

        med21 = medArr[4].get()
        if med21 == '':
            med21 = None

        med22 = medArr[5].get()
        if med22 == '':
            med22 = None

        med30 = medArr[6].get()
        if med30 == '':
            med30 = None

        med31 = medArr[7].get()
        if med31 == '':
            med31 = None

        med32 = medArr[8].get()
        if med32 == '':
            med32 = None

        med40 = medArr[9].get()
        if med40 == '':
            med40 = None

        med41 = medArr[10].get()
        if med41 == '':
            med41 = None

        med42 = medArr[11].get()
        if med42 == '':
            med42 = None

        med50 = medArr[12].get()
        if med50 == '':
            med50 = None

        med51 = medArr[13].get()
        if med51 == '':
            med51 = None

        med52 = medArr[14].get()
        if med52 == '':
            med52 = None

        med60 = medArr[15].get()
        if med60 == '':
            med60 = None

        med61 = medArr[16].get()
        if med61 == '':
            med61 = None

        med62 = medArr[17].get()
        if med62 == '':
            med62 = None

        med70 = medArr[18].get()
        if med70 == '':
            med70 = None

        med71 = medArr[19].get()
        if med71 == '':
            med71 = None

        med72 = medArr[20].get()
        if med72 == '':
            med72 = None

        med80 = medArr[21].get()
        if med80 == '':
            med80 = None

        med81 = medArr[22].get()
        if med81 == '':
            med81 = None

        med82 = medArr[23].get()
        if med82 == '':
            med82 = None

        med90 = medArr[24].get()
        if med90 == '':
            med90 = None

        med91 = medArr[25].get()
        if med91 == '':
            med91 = None

        med92 = medArr[26].get()
        if med92 == '':
            med92 = None

        med100 = medArr[27].get()
        if med100 == '':
            med100 = None

        med101 = medArr[28].get()
        if med101 == '':
            med101 = None

        med102 = medArr[29].get()
        if med102 == '':
            med102 = None

        med110 = medArr[30].get()
        if med110 == '':
            med110 = None

        med111 = medArr[31].get()
        if med111 == '':
            med111 = None

        med112 = medArr[32].get()
        if med112 == '':
            med112 = None

        parentMeds = [med10, med11, med12, med20, med21, med22, med30, med31, med32,
        med40, med41, med42, med50, med51, med52, med60, med61, med62, med70, med71, med72,
        med80, med81, med82, med90, med91, med92, med100, med101, med102, med110, med111, med112]

#Preliminary signatures
        parentSig0 = parentSigArr[0].get()
        if parentSig0 == 0:
            parentSig0 = None
        elif parentSig0 == 2:
            parentSig0 = 0

        parentSig1 = parentSigArr[1].get()
        if parentSig1 == 0:
            parentSig1 = None
        elif parentSig1 == 2:
            parentSig1 = 0

        parentSig2 = parentSigArr[2].get()
        if parentSig2 == 0:
            parentSig2 = None
        elif parentSig2 == 2:
            parentSig2 = 0

        parentSig3 = parentSigArr[3].get()
        if parentSig3 == 0:
            parentSig3 = None
        elif parentSig3 == 2:
            parentSig3 = 0

        parentSig4 = parentSigArr[4].get()
        if parentSig4 == 0:
            parentSig4 = None
        elif parentSig4 == 2:
            parentSig4 = 0

        parentSig5 = parentSigArr[5].get()
        if parentSig5 == 0:
            parentSig5 = None
        elif parentSig5 == 2:
            parentSig5 = 0

#Medical provider
        medProvider0 = medProviderArr[0].get()
        if medProvider0 == '':
            medProvider0 = None
        
        medProvider1 = medProviderArr[1].get()
        if medProvider1 == '':
            medProvider1 = None
        
        medProvider2 = medProviderArr[2].get()
        if medProvider2 == '':
            medProvider2 = None
        
        medProvider3 = medProviderArr[3].get()
        if medProvider3 == '':
            medProvider3 = None
        
        medProvider4 = medProviderArr[4].get()
        if medProvider4 == '':
            medProvider4 = None

        medHistDiagnosis = [medProvider0, medProvider1, medProvider2, medProvider3, medProvider4]

        medProvider5 = medProviderArr[5].get()
        if medProvider5 == '':
            medProvider5 = None

        medProvider6 = medProviderArr[6].get()
        if medProvider6 == 0:
            medProvider6 = None
        elif medProvider6 == 2:
            medProvider6 = 0

        medProvider7 = medProviderArr[7].get()
        if medProvider7 == '':
            medProvider7 = None

        medProvider8 = medProviderArr[8].get()
        if medProvider8 == '':
            medProvider8 = None

        foodAllergy1 = foodAlergyArr[0].get()
        if foodAllergy1 == '':
            foodAllergy1 = None

        foodReaction1 = foodAlergyArr[1].get()
        if foodReaction1 == '':
            foodReaction1 = None

        foodAllergy2 = foodAlergyArr[2].get()
        if foodAllergy2 == '':
            foodAllergy2 = None

        foodReaction2 = foodAlergyArr[3].get()
        if foodReaction2 == '':
            foodReaction2 = None

        foodAllergy3 = foodAlergyArr[4].get()
        if foodAllergy3 == '':
            foodAllergy3 = None

        foodReaction3 = foodAlergyArr[5].get()
        if foodReaction3 == '':
            foodReaction3 = None

        foodAllergy4 = foodAlergyArr[6].get()
        if foodAllergy4 == '':
            foodAllergy4 = None

        foodReaction4 = foodAlergyArr[7].get()
        if foodReaction4 == '':
            foodReaction4 = None

        foodAllergy5 = foodAlergyArr[8].get()
        if foodAllergy5 == '':
            foodAllergy5 = None

        foodReaction5 = foodAlergyArr[9].get()
        if foodReaction5 == '':
            foodReaction5 = None

        foodAllergies = [foodAllergy1, foodReaction1, foodAllergy2, foodReaction2, foodAllergy3, foodReaction3,
        foodAllergy4, foodReaction4, foodAllergy5, foodReaction5]

        medAllergy1 = medAlergyArr[0].get()
        if medAllergy1 == '':
            medAllergy1 = None

        medReaction1 = medAlergyArr[1].get()
        if medReaction1 == '':
            medReaction1 = None

        medAllergy2 = medAlergyArr[2].get()
        if medAllergy2 == '':
            medAllergy2 = None

        medReaction2 = medAlergyArr[3].get()
        if medReaction2 == '':
            medReaction2 = None

        medAllergy3 = medAlergyArr[4].get()
        if medAllergy3 == '':
            medAllergy3 = None

        medReaction3 = medAlergyArr[5].get()
        if medReaction3 == '':
            medReaction3 = None

        medAllergy4 = medAlergyArr[6].get()
        if medAllergy4 == '':
            medAllergy4 = None

        medReaction4 = medAlergyArr[7].get()
        if medReaction4 == '':
            medReaction4 = None

        medAllergy5 = medAlergyArr[8].get()
        if medAllergy5 == '':
            medAllergy5 = None

        medReaction5 = medAlergyArr[9].get()
        if medReaction5 == '':
            medReaction5 = None

        medAllergies = [medAllergy1, medReaction1, medAllergy2, medReaction2, medAllergy3, medReaction3,
        medAllergy4, medReaction4, medAllergy5, medReaction5]

        envAllergy1 = envAlergyArr[0].get()
        if envAllergy1 == '':
            envAllergy1 = None

        envReaction1 = envAlergyArr[1].get()
        if envReaction1 == '':
            envReaction1 = None

        envAllergy2 = envAlergyArr[2].get()
        if envAllergy2 == '':
            envAllergy2 = None

        envReaction2 = envAlergyArr[3].get()
        if envReaction2 == '':
            envReaction2 = None

        envAllergy3 = envAlergyArr[4].get()
        if envAllergy3 == '':
            envAllergy3 = None

        envReaction3 = envAlergyArr[5].get()
        if envReaction3 == '':
            envReaction3 = None

        envAllergy4 = envAlergyArr[6].get()
        if envAllergy4 == '':
            envAllergy4 = None

        envReaction4 = envAlergyArr[7].get()
        if envReaction4 == '':
            envReaction4 = None

        envAllergy5 = envAlergyArr[8].get()
        if envAllergy5 == '':
            envAllergy5 = None

        envReaction5 = envAlergyArr[9].get()
        if envReaction5 == '':
            envReaction5 = None

        envAllergies = [envAllergy1, envReaction1, envAllergy2, envReaction2, envAllergy3, envReaction3,
        envAllergy4, envReaction4, envAllergy5, envReaction5]

#physical
        physical0 = physicalArr[0].get()
        if physical0 != '':
            if not self.is_date(physical0):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            physical0 = None
        
        physical1 = physicalArr[1].get()
        if physical1 == '':
            physical1 = None
        
        physical2 = physicalArr[2].get()
        if physical2 != '':
            if self.is_number(physical2):
                physical2 = int(physical2)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nWeight must be only numbers.")
                goodData = 0
        else:
            physical2 = None
        
        physical3 = physicalArr[3].get()
        if physical3 != '':
            if self.is_number(physical3):
                physical3 = int(physical3)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nPulse must be only numbers.")
                goodData = 0
        else:
            physical3 = None
        
        physical4 = physicalArr[4].get()
        if physical4 != '':
            if self.is_number(physical4):
                physical4 = int(physical4)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nResperations must be only numbers.")
                goodData = 0
        else:
            physical4 = None
        
        physical5 = physicalArr[5].get()
        if physical5 == '':
            physical5 = None
        
        physical6 = physicalArr[6].get()
        if physical6 == '':
            physical6 = None
        
        physical7 = physicalArr[7].get()
        if physical7 == '':
            physical7 = None
        
        physical8 = physicalArr[8].get()
        if physical8 == '':
            physical8 = None
        
        physical9 = physicalArr[9].get()
        if physical9 == '':
            physical9 = None
        
        physical10 = physicalArr[10].get()
        if physical10 == '':
            physical10 = None
        
        physical11 = physicalArr[11].get()
        if physical11 == '':
            physical11 = None
        
        physical12 = physicalArr[12].get()
        if physical12 == '':
            physical12 = None
        
        physical13 = physicalArr[13].get()
        if physical13 == '':
            physical13 = None
        
        physical14 = physicalArr[14].get()
        if physical14 == '':
            physical14 = None
        
        physical15 = physicalArr[15].get()
        if physical15 == '':
            physical15 = None
        
        physical16 = physicalArr[16].get()
        if physical16 == '':
            physical16 = None
        
        physical17 = physicalArr[17].get()
        if physical17 == '':
            physical17 = None

#cognative development level
        cogDev0 = cogDevArr[0].get()
        if cogDev0 == '':
            cogDev0 = None

        cogDev1 = cogDevArr[1].get()
        if cogDev1 == '':
            cogDev1 = None

#Varicella screening
        varicella0 = varicellaArr[0].get()
        if varicella0 == 0:
            varicella0 = None
        elif varicella0 == 2:
            varicella0 = 0

        varicella1 = varicellaArr[1].get()
        if varicella1 == 0:
            varicella1 = None
        elif varicella1 == 2:
            varicella1 = 0

        varicella2 = varicellaArr[2].get()
        if varicella2 != '':
            if not self.is_date(varicella2):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            varicella2 = None

        varicella3 = varicellaArr[3].get()
        if varicella3 == 0:
            varicella3 = None
        elif varicella3 == 2:
            varicella3 = 0

        varicella4 = varicellaArr[4].get()
        if varicella4 != '':
            if not self.is_date(varicella4):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            varicella4 = None

#tuberculosis screening
        tuberculosis10 = tuberculosisArr[0].get()
        if tuberculosis10 != '':
            if not self.is_date(tuberculosis10):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            tuberculosis10 = None

        tuberculosis11 = tuberculosisArr[1].get()
        if tuberculosis11 == '':
            tuberculosis11 = None

        tuberculosis20 = tuberculosisArr[2].get()
        if tuberculosis20 != '':
            if not self.is_date(tuberculosis20):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            tuberculosis20 = None

        tuberculosis21 = tuberculosisArr[3].get()
        if tuberculosis21 == '':
            tuberculosis21 = None

        tuberculosis30 = tuberculosisArr[4].get()
        if tuberculosis30 != '':
            if not self.is_date(tuberculosis30):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            tuberculosis30 = None

        tuberculosis31 = tuberculosisArr[5].get()
        if tuberculosis31 == '':
            tuberculosis31 = None

#Restrictions_And_Recommendations
        if restrictionsRec == '':
            restrictionsRec = None

#medcare provider medications
        medProMed11 = medProMedArr[0].get()
        if medProMed11 == '':
            medProMed11 = None

        medProMed12 = medProMedArr[1].get()
        if medProMed12 == '':
            medProMed12 = None
        
        medProMed13 = medProMedArr[2].get()
        if medProMed13 == '':
            medProMed13 = None

        medProMed21 = medProMedArr[3].get()
        if medProMed21 == '':
            medProMed21 = None

        medProMed22 = medProMedArr[4].get()
        if medProMed22 == '':
            medProMed22 = None

        medProMed23 = medProMedArr[5].get()
        if medProMed23 == '':
            medProMed23 = None

        medProMed31 = medProMedArr[6].get()
        if medProMed31 == '':
            medProMed31 = None

        medProMed32 = medProMedArr[7].get()
        if medProMed32 == '':
            medProMed32 = None

        medProMed33 = medProMedArr[8].get()
        if medProMed33 == '':
            medProMed33 = None

        medProMed41 = medProMedArr[9].get()
        if medProMed41 == '':
            medProMed41 = None

        medProMed42 = medProMedArr[10].get()
        if medProMed42 == '':
            medProMed42 = None

        medProMed43 = medProMedArr[11].get()
        if medProMed43 == '':
            medProMed43 = None

        medProMed51 = medProMedArr[12].get()
        if medProMed51 == '':
            medProMed51 = None

        medProMed52 = medProMedArr[13].get()
        if medProMed52 == '':
            medProMed52 = None

        medProMed53 = medProMedArr[14].get()
        if medProMed53 == '':
            medProMed53 = None

        medProMed61 = medProMedArr[15].get()
        if medProMed61 == '':
            medProMed61 = None

        medProMed62 = medProMedArr[16].get()
        if medProMed62 == '':
            medProMed62 = None

        medProMed63 = medProMedArr[17].get()
        if medProMed63 == '':
            medProMed63 = None

        medProMed71 = medProMedArr[18].get()
        if medProMed71 == '':
            medProMed71 = None

        medProMed72 = medProMedArr[19].get()
        if medProMed72 == '':
            medProMed72 = None

        medProMed73 = medProMedArr[20].get()
        if medProMed73 == '':
            medProMed73 = None

        medProMed81 = medProMedArr[21].get()
        if medProMed81 == '':
            medProMed81 = None

        medProMed82 = medProMedArr[22].get()
        if medProMed82 == '':
            medProMed82 = None

        medProMed83 = medProMedArr[23].get()
        if medProMed83 == '':
            medProMed83 = None

        medProMed91 = medProMedArr[24].get()
        if medProMed91 == '':
            medProMed91 = None

        medProMed92 = medProMedArr[25].get()
        if medProMed92 == '':
            medProMed92 = None

        medProMed93 = medProMedArr[26].get()
        if medProMed93 == '':
            medProMed93 = None

        medProMed101 = medProMedArr[27].get()
        if medProMed101 == '':
            medProMed101 = None

        medProMed102 = medProMedArr[28].get()
        if medProMed102 == '':
            medProMed102 = None

        medProMed103 = medProMedArr[29].get()
        if medProMed103 == '':
            medProMed103 = None

        medProMedications = [medProMed11, medProMed12, medProMed13, medProMed21, medProMed22, medProMed23, medProMed31, medProMed32, medProMed33, medProMed41, medProMed42, medProMed43,
        medProMed51, medProMed52, medProMed53, medProMed61, medProMed62, medProMed63, medProMed71, medProMed72, medProMed73, medProMed81, medProMed82, medProMed83,
        medProMed91, medProMed92, medProMed93, medProMed101, medProMed102, medProMed103]

#medcare provider verification statement
        medProvVerState0 = medProvVerStateArr[0].get()
        if medProvVerState0 == 0:
            medProvVerState0 = None
        elif medProvVerState0 == 2:
            medProvVerState0 = 0

        medProvVerState1 = medProvVerStateArr[1].get()
        if medProvVerState1 != '':
            if not self.is_date(medProvVerState1):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            medProvVerState1 = None

        medProvVerState2 = medProvVerStateArr[2].get()
        if medProvVerState2 == '':
            medProvVerState2 = None

        medProvVerState3 = medProvVerStateArr[3].get()
        if medProvVerState3 == '':
            medProvVerState3 = None

        medProvVerState4 = medProvVerStateArr[4].get()
        if medProvVerState4 == '':
            medProvVerState4 = None

        medProvVerState5 = medProvVerStateArr[5].get()
        if medProvVerState5 == '':
            medProvVerState5 = None

        medProvVerState6 = medProvVerStateArr[6].get()
        if medProvVerState6 != '':
            if self.is_number(medProvVerState6):
                medProvVerState6 = int(medProvVerState6)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nZip must be only numbers.")
                goodData = 0
        else:
            medProvVerState6 = None

        medProvVerState7 = medProvVerStateArr[7].get()
        if medProvVerState7 == '':
            medProvVerState7 = None

        medProvVerState8 = medProvVerStateArr[8].get()
        if medProvVerState8 == '':
            medProvVerState8 = None

#
#HIV_Provider section
#

#health history
        healthHistory0 = healthHistoryArr[0].get()
        if healthHistory0 == '':
            healthHistory0 = None

        healthHistory = ''

        if healthHistoryArr[1].get():
            healthHistory = healthHistory + 'HIV,'

        if healthHistoryArr[2].get():
            healthHistory = healthHistory + 'Hepatitis B,'

        if healthHistoryArr[3].get():
            healthHistory = healthHistory + 'Hepatitis C,'

        if healthHistoryArr[4].get():
            healthHistory = healthHistory + 'Poor growth,'

        if healthHistoryArr[5].get():
            healthHistory = healthHistory + 'Bleeding disorders,'

        if healthHistoryArr[6].get():
            healthHistory = healthHistory + 'Asthma,'

        if healthHistoryArr[7].get():
            healthHistory = healthHistory + 'Pulmonary Disease,'

        if healthHistoryArr[8].get():
            healthHistory = healthHistory + 'Chronic Cough,'

        if healthHistoryArr[9].get():
            healthHistory = healthHistory + 'ADD or ADHD,'

        if healthHistoryArr[10].get():
            healthHistory = healthHistory + 'Renal Disease,'

        if healthHistoryArr[11].get():
            healthHistory = healthHistory + 'Sickle Cell disease,'

        if healthHistoryArr[12].get():
            healthHistory = healthHistory + 'Congenital Heart Disease,'

        if healthHistoryArr[13].get():
            healthHistory = healthHistory + 'Hypertension,'

        if healthHistoryArr[14].get():
            healthHistory = healthHistory + 'Cryptosporidium,'

        if healthHistoryArr[15].get():
            healthHistory = healthHistory + 'Chronic diarrhea,'

        if healthHistoryArr[16].get():
            healthHistory = healthHistory + 'Seizures,'

        if healthHistoryArr[17].get():
            healthHistory = healthHistory + 'Diabetes,'

        if healthHistoryArr[18].get():
            healthHistory = healthHistory + 'Other,'

        if healthHistory == '':
            healthHistory = None
        else:
            healthHistory = healthHistory[:-1]

        healthHistory19 = healthHistoryArr[19].get()
        if healthHistory19 == '':
            healthHistory19 = None

        healthHistory20 = healthHistoryArr[20].get()
        if healthHistory20 == 0:
            healthHistory20 = None
        elif healthHistory20 == 2:
            healthHistory20 = 0

        healthHistory21 = healthHistoryArr[21].get()
        if healthHistory21 == '':
            healthHistory21 = None

#lab data
        lab0 = labArr[0].get()
        if lab0 == '':
            lab0 = None

        lab1 = labArr[1].get()
        if lab1 != '':
            if not self.is_date(lab1):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            lab1 = None

        lab2 = labArr[2].get()
        if lab2 == '':
            lab2 = None

        lab3 = labArr[3].get()
        if lab3 == '':
            lab3 = None

        lab4 = labArr[4].get()
        if lab4 == '':
            lab4 = None

        lab5 = labArr[5].get()
        if lab5 != '':
            if not self.is_date(lab5):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            lab5 = None

        lab6 = labArr[6].get()
        if lab6 == '':
            lab6 = None

        lab7 = labArr[7].get()
        if lab7 == '':
            lab7 = None

        lab8 = labArr[8].get()
        if lab8 != '':
            if not self.is_date(lab8):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Camper's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            lab8 = None

        lab9 = labArr[9].get()
        if lab9 == '':
            lab9 = None

        lab10 = labArr[10].get()
        if lab10 == '':
            lab10 = None

#Database Connection
        db = self.connect()
        curr = db.cursor()

#Insert into DB
        if goodData:

#camp application
            try:
                curr.execute("""INSERT INTO Camp_Application VALUES (
                %s, %s);""",
                (id, date,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 1
                print e
                print errorCode

#Parent section
            try:
                curr.execute("""INSERT INTO Parent VALUES (
                %s, %s);""",
                (id, date,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 2
                print e
                print errorCode

   #Demographic_Information
            try:
                curr.execute("""INSERT INTO Demographic_Information VALUES (
                    %s, %s, %s, %s, %s, %s, %s, %s,
                    %s, %s, %s, %s, %s, %s, %s, %s,
                    %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, 
                        demInfo0, demInfo1, demInfo2, demInfo3, demInfo4, demInfo5, demInfo6, demInfo7, demInfo8, demInfo9, demInfo10, demInfo11,
                        demInfo12, demInfo13, demInfo14, demInfo15, demInfo16, demInfo17, demInfo18, demInfo19, demInfo20, demInfoTransport
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 3
                print e
                print errorCode

    #Demographic_Contacts
            try:
                curr.execute("""INSERT INTO Demographic_Contacts VALUES (%s, %s, 'Cell', %s, %s, %s);""",
                    (id, date,
                        demContactInfo10, demContactInfoTime1, demContactInfo11
                        ,))

                curr.execute("""INSERT INTO Demographic_Contacts VALUES (%s, %s, 'Home', %s, %s, %s);""",
                    (id, date,
                        demContactInfo20, demContactInfoTime2, demContactInfo21
                        ,))

                curr.execute("""INSERT INTO Demographic_Contacts VALUES (%s, %s, 'Work', %s, %s, %s);""",
                    (id, date,
                        demContactInfo30, demContactInfoTime3, demContactInfo31
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 4
                print e
                print errorCode

    #Parent_Emergency_Contact
            try:
                if emergencyInfo10 is not None:
                    curr.execute("""INSERT INTO Parent_Emergency_Contact VALUES (%s, %s, %s, %s, %s, %s);""",
                        (id, date, 
                            emergencyInfo10, emergencyInfo11, emergencyInfo12, emergencyInfo13
                            ,))
                
                if emergencyInfo20 is not None:
                    curr.execute("""INSERT INTO Parent_Emergency_Contact VALUES (%s, %s, %s, %s, %s, %s);""",
                        (id, date, 
                            emergencyInfo20, emergencyInfo21, emergencyInfo22, emergencyInfo23
                            ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 5
                print e
                print errorCode

    #Insurance_Information
            try:
                curr.execute("""INSERT INTO Insurance_Information VALUES (%s, %s, %s, %s, %s, %s);""",
                    (id, date, 
                        insuranceInfo0, insuranceInfo1, insuranceInfo2, insuranceInfo3
                        ,))

            except (pymysql.Error) as e:
                errorCode = 6
                print e
                print errorCode

    #Medical_Provider_Information
            try:
                curr.execute("""INSERT INTO Medical_Provider_Information VALUES (%s, %s, %s, %s, %s, %s);""",
                    (id, date, 
                        medProviderInfo0, medProviderInfo1, medProviderInfo2, medProviderInfo3
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 7
                print e
                print errorCode

    #Medical_Information
            try:
                curr.execute("""INSERT INTO Medical_Information VALUES (%s, %s, %s, %s, %s);""",
                    (id, date, 
                        medInfoCurr, medInfo0, medInfo1
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 8
                print e
                print errorCode

    #Allergies
            try:
                curr.execute("""INSERT INTO Allergies VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, 
                        allergyInfo0, allergyInfo1, allergyInfo2, allergyInfo3, allergyInfo4, allergyInfo5, allergyInfo6
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 9
                print e
                print errorCode

    #Dietary_Needs
            try:
                curr.execute("""INSERT INTO Dietary_Needs VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, 
                        dietaryNeedsInfo0, dietaryNeedsInfo1, dietaryNeedsInfo2, dietaryNeedsInfo3, dietaryNeedsInfo4,
                        dietaryNeedsHowInfo, dietaryNeedsInfo5, dietaryNeedsInfo6, dietaryNeedsInfo7, dietaryNeedsInfo8, dietaryNeedsInfo9
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 10
                print e
                print errorCode

    #General_Health
            try:
                curr.execute("""INSERT INTO General_Health VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, 
                        genHealthLimit, genHealth0, genHealth1, genHealth2, genHealth3, genHealth4, genHealth5, genHealth6
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 11
                print e
                print errorCode

    #Pyschosocial_and_Behavioral
            try:
                curr.execute("""INSERT INTO Pyschosocial_and_Behavioral_info VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, 
                        behavior0, behavior1, behaviorExperiances, behavior2, behavior3, behaviorInterests, behavior4
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 12
                print e
                print errorCode

    #Parent_Medical
            try:
                i = 0
                while i < len(parentMeds):
                    if parentMeds[i] is None:
                        break
                    curr.execute("""INSERT INTO Parent_Medications VALUES (%s, %s, %s, %s, %s);""",
                        (id, date, 
                            parentMeds[i], parentMeds[i + 1], parentMeds[i + 2]
                            ,))
                    i += 3

            except (pymysql.Error) as e:
                success = 0
                errorCode = 13
                print e
                print errorCode

    #Release_Forms_Signed
            try:
                curr.execute("""INSERT INTO Release_Forms_Signed VALUES (%s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date,
                        parentSig0, parentSig1, parentSig2, parentSig3, parentSig4, parentSig5
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 14
                print e
                print errorCode

#Medical_Care_Provider section
            try:
                curr.execute("""INSERT INTO Medical_Care_Provider VALUES (%s, %s, %s);""",
                    (id, date,
                        restrictionsRec
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 15
                print e
                print errorCode

    #Medical_History
            try:
                curr.execute("""INSERT INTO Medical_History VALUES (%s, %s, %s, %s, %s, %s);""",
                    (id, date,
                        medProvider5, medProvider6, medProvider7, medProvider8
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 16
                print e
                print errorCode

    #Med_Hist_Diagnosis
            try:
                i = 0
                while i < len(medHistDiagnosis):
                    if medHistDiagnosis[i] is None:
                        break
                    curr.execute("""INSERT INTO Med_Hist_Diagnosis VALUES (%s, %s, %s);""",
                        (id, date,
                            medHistDiagnosis[i]
                            ,))
                    i += 1

            except (pymysql.Error) as e:
                success = 0
                errorCode = 17
                print e
                print errorCode

    #Med_Hist_Allergies
            try:
                i = 0
                while i < len(foodAllergies):
                    if foodAllergies[i] is None:
                        break
                    curr.execute("""INSERT INTO Med_Hist_Allergies VALUES (%s, %s, %s, %s, %s);""",
                        (id, date,
                            'Food', foodAllergies[i], foodAllergies[i + 1]
                            ,))
                    i += 2

                i = 0
                while i < len(medAllergies):
                    if medAllergies[i] is None:
                        break
                    curr.execute("""INSERT INTO Med_Hist_Allergies VALUES (%s, %s, %s, %s, %s);""",
                        (id, date,
                            'Medication', medAllergies[i], medAllergies[i + 1]
                            ,))
                    i += 2

                i = 0
                while i < len(envAllergies):
                    if envAllergies[i] is None:
                        break
                    curr.execute("""INSERT INTO Med_Hist_Allergies VALUES (%s, %s, %s, %s, %s);""",
                        (id, date,
                            'Environmental', envAllergies[i], envAllergies[i + 1]
                            ,))
                    i += 2

            except (pymysql.Error) as e:
                success = 0
                errorCode = 18
                print e
                print errorCode

    #Physical_Exam
            try:
                curr.execute("""INSERT INTO Physical_Exam VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date,
                        physical0, physical1, physical2, physical3, physical4, physical5, physical6, physical7, physical8, physical9,
                        physical10, physical11, physical12, physical13, physical14, physical15, physical16, physical17
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 19
                print e
                print errorCode

    #Cognitive_Development_Level
            try:
                curr.execute("""INSERT INTO Cognitive_Development_Level VALUES (%s, %s, %s, %s);""",
                    (id, date,
                        cogDev0, cogDev1
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 20
                print e
                print errorCode

    #Varicella_Screening
            try:
                curr.execute("""INSERT INTO Varicella_Screening VALUES (%s, %s, %s, %s, %s, %s, %s);""",
                    (id, date,
                        varicella0, varicella1, varicella2, varicella3, varicella4
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 21
                print e
                print errorCode

    #tuberculosis screening
            try:
                curr.execute("""INSERT INTO Tuberculosis_Screening VALUES (%s, %s, 'Tuberculin Skin Test', %s, %s);""",
                    (id, date,
                        tuberculosis10, tuberculosis11
                        ,))
                
                curr.execute("""INSERT INTO Tuberculosis_Screening VALUES (%s, %s, 'Quantiferon Testing', %s, %s);""",
                    (id, date,
                        tuberculosis20, tuberculosis21
                        ,))
                
                curr.execute("""INSERT INTO Tuberculosis_Screening VALUES (%s, %s, 'Chest X-ray', %s, %s);""",
                    (id, date,
                        tuberculosis30, tuberculosis31
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 22
                print e
                print errorCode

    #medcare provider medications
            try:
                i = 0
                while i < len(medProMedications):
                    if medProMedications[i] is None:
                        break
                    curr.execute("""INSERT INTO MedCareProvider_Medications VALUES (%s, %s, %s, %s, %s);""",
                        (id, date,
                            medProMedications[i], medProMedications[i + 1], medProMedications[i + 2]
                            ,))
                    i += 3

            except (pymysql.Error) as e:
                success = 0
                errorCode = 23
                print e
                print errorCode

    #medcare provider verification statement
            try:
                curr.execute("""INSERT INTO Medical_Provider_Verification_Statement VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date,
                        medProvVerState0, medProvVerState1, medProvVerState2, medProvVerState3, medProvVerState4, medProvVerState5, medProvVerState6, medProvVerState7, medProvVerState8
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 24
                print e
                print errorCode

#HIV_Provider section
            try:
                curr.execute("""INSERT INTO HIV_Provider VALUES (%s, %s);""",
                    (id, date,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 25
                print e
                print errorCode

    #health history
            try:
                curr.execute("""INSERT INTO Health_History VALUES (%s, %s, %s, %s, %s, %s, %s);""",
                    (id, date,
                        healthHistory0, healthHistory, healthHistory19, healthHistory20, healthHistory21
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 26
                print e
                print errorCode

    #lab data
            try:
                curr.execute("""INSERT INTO Lab_Data VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date,
                        lab0, lab1, lab2, lab3, lab4, lab5, lab6, lab7, lab8, lab9, lab10
                        ,))

            except (pymysql.Error) as e:
                success = 0
                errorCode = 28
                print e
                print errorCode

#close out
            db.commit()

            if success:
                tkMessageBox.showinfo("New Profile", "Submission Sucessful!")
                self.AddNewAppPage();
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nA Camper application \nSubmitted on: " + date + "\nFor ID number: " + str(id) + " \nAlready exists in the system.")


#******************************************************************************************************************************************************

    def NewChildProfilePage(self, id, date):

        #setup
        self.NewChildProfilePageRoot = Toplevel()
        root = self.NewChildProfilePageRoot
        if self.PrevPage is 'nameBirthEntryPage':
            self.nameBirthEntryPageRoot.withdraw()
        elif self.PrevPage is 'AddNewAppPage':
            self.AddNewAppPageRoot.withdraw()
        self.PrevPage = 'NewChildProfilePage'
        root.title("New Child Profile Page")

        self.canvas = Canvas(root)
        master = Frame(self.canvas)

        scrollbarY = Scrollbar(root, orient = "vertical", command = self.canvas.yview)
        scrollbarY.pack(side = RIGHT, fill = Y)
        scrollbarX = Scrollbar(root, orient = "horizontal", command = self.canvas.xview)
        scrollbarX.pack(side = BOTTOM, fill = X)

        self.canvas.configure(xscrollcommand = scrollbarX.set, yscrollcommand = scrollbarY.set)
        self.canvas.pack(side = "left", fill = "both", expand = True)
        self.canvas.create_window((4,4), window = master, anchor="nw", 
                                  tags="master")

        master.bind("<Configure>", self.onFrameConfigure)
        root.geometry("740x1000")

#Buttons
        #frame
        buttonframe = Frame(master)
        buttonframe.pack(side = "top", fill = "x")

        #back
        backButton = Button(buttonframe, text = "Back", command = lambda:self.backNewChildProfilePage(id, date))
        backButton.pack(side = "left")

        #exit
        exitButton = Button(buttonframe, text = "Exit", command=lambda: self.exit())
        exitButton.pack(side = "left")

#Database dump frame
        ChildInfoSectionframe = Frame(master)
        ChildInfoSectionframe.pack(fill = 'y', side = 'left') 
        r = 0

#Child info section

        #header
        labelChildInfoSection = Label(ChildInfoSectionframe, text = "\nCHILD'S INFORMATION")
        labelChildInfoSection.grid(row = r, column = 0)
        labelChildInfoSection.config(font=("Helvetica", 20))

        #first name
        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        childInfo0 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        childInfo1 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #nickname
        label = Label(ChildInfoSectionframe, text = "\nNickname .............................................................................................. ")
        childInfo2 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address street
        label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... ")
        childInfo3 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address city
        label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... ")
        childInfo4 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address county
        label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. ")
        childInfo5 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address zip
        label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ ")
        childInfo6 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #home phone
        label = Label(ChildInfoSectionframe, text = "\nHome Phone .......................................................................................... ")
        childInfo7 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #guardian phone
        label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's Cell Phone ................................................................ ")
        childInfo8 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #guardian email
        label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's e-mail address .......................................................... ")
        childInfo9 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #age
        label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... ")
        childInfo10 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #birthday
        label = Label(ChildInfoSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ................................................................ ")
        childInfo11 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #gender
        label = Label(ChildInfoSectionframe, text = "\nGender .................................................................................................. ")
        childInfo12 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo12, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #HIV status
        label = Label(ChildInfoSectionframe, text = "\nHIV status ............................................................................................. ")
        childInfo13 = StringVar()
        choices = ['HIV Positive','HIV Negative']
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo13, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #aware  
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nIs the child aware that he/she is HIV positive or')
        label.grid(row = r, column = 0, sticky = 'w')
        label = Label(ChildInfoSectionframe, text = 'that a member of the household is HIV positive? ................................... ')
        childInfo14 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo14, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo14, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #why
        label = Label(ChildInfoSectionframe, text = "If no, please provide a reason why child is not aware .............................. ")
        childInfo15 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Referral source
        label = Label(ChildInfoSectionframe, text = "\nReferral Source ..................................................................................... ")
        childInfo16 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo16.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #school attending
        label = Label(ChildInfoSectionframe, text = "\nSchool Attending .................................................................................. ")
        childInfo17 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo17.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Grade Level
        label = Label(ChildInfoSectionframe, text = "\nGrade Level ........................................................................................... ")
        childInfo18 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo18.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Ethnicity
        label = Label(ChildInfoSectionframe, text = "\nEthnicity ............................................................................................... ")
        childInfo19 = StringVar()
        choices = ['White/Caucasian','Black/African-American','Hispanic/Latino',
        'Native American','Asian/Pacific Islander/Indian Sub-Continent','Multi-racial','Other']
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo19, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Ethnicity Other
        label = Label(ChildInfoSectionframe, text = "If Other ................................................................................................. ")
        childInfo20 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Even been...
        label = Label(ChildInfoSectionframe, text = "\nHas your child ever been...")       
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #ADD_ADHD
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with ADD/ADHD? ................................................................. ')
        childInfo21 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo21, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo21, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)
        
        #Learning_Disability
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with a learning disability? .................................................... ')
        childInfo22 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo22, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo22, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Developmental_Disability
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with a developmental disability? .......................................... ')
        childInfo23 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo23, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo23, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Mental_Health_Issues
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with any mental health issues? ............................................. ')
        childInfo24 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo24, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo24, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Other_Medical_Condition
        label = Label(ChildInfoSectionframe, text = 'Diagnosed or suffered from any other medical condition? ..................... ')
        childInfo25 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo25, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo25, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Victim_of_Abuse
        label = Label(ChildInfoSectionframe, text = 'A victim of sexual abuse, physical or emotional abuse? ......................... ')
        childInfo26 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo26, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo26, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Criminal_Justice_System
        label = Label(ChildInfoSectionframe, text = 'Part of the criminal justice system? ...................................................... ')
        childInfo27 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo27, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo27, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Custody
        label = Label(ChildInfoSectionframe, text = "\nWho has legal custody of the child? ...................................................... ")
        childInfo28 = StringVar()
        choices = ['Mother','Father','Both Parents','Aunt/Uncle','Grandparent','Pending Court Action','Other']
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo28, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Custody Other
        label = Label(ChildInfoSectionframe, text = "If Other ................................................................................................. ")
        childInfo29 = Entry(ChildInfoSectionframe)
        r = r+1
        childInfo29.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Parent/ Guardian Section
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nPARENT/GUARDIAN INFORMATION")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #first name
        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        parentInfo0 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        parentInfo1 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Relationship to child
        label = Label(ChildInfoSectionframe, text = "\nRelationship to child ............................................................................. ")
        parentInfo2 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Age
        label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... ")
        parentInfo3 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)       
        
        #HIV Status
        label = Label(ChildInfoSectionframe, text = "\nHIV Status ............................................................................................ ")
        parentInfo4 =  StringVar()
        choices = ['HIV Positive','HIV Negative']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo4, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Adoptive Parent
        label = Label(ChildInfoSectionframe, text = "\nAdoptive Parent ..................................................................................... ")
        parentInfo5 = StringVar()
        choices = ['Yes','No','Not Applicable']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo5, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Marital Status
        label = Label(ChildInfoSectionframe, text = "\nMarital Status ...................................................................................... ")
        parentInfo6 = StringVar()
        choices = ['Married','Single','Separated','Divorced','Widowed']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo6, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Highest Level of Education Completed
        label = Label(ChildInfoSectionframe, text = "\nHighest Level of Education Completed .................................................. ")
        parentInfo7 = StringVar()
        choices = ['HS','GED','Some College','Associates Degree','Bachelor Degree','Master Degree','Doctorate']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo7, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Employment Status
        label = Label(ChildInfoSectionframe, text = "\nEmployment Status ............................................................................... ")
        parentInfo8 = StringVar()
        choices = ['Full-Time','Part-Time','Unemployed','Disability']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo8, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Employment Company
        r = r+1
        label = Label(ChildInfoSectionframe, text = "\nIf employed,")
        label.grid(row = r, column = 0, sticky = 'w')
        label = Label(ChildInfoSectionframe, text = "please provide Company Name ............................................................. ")
        parentInfo9 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Address
        label = Label(ChildInfoSectionframe, text = "\nAddress ................................................................................................ ")
        parentInfo10 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #City
        label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... ")
        parentInfo11 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #State
        label = Label(ChildInfoSectionframe, text = "\nState .................................................................................................... ")
        parentInfo12 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Zip
        label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ ")
        parentInfo13 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Work Phone
        label = Label(ChildInfoSectionframe, text = "\nWork Phone .......................................................................................... ")
        parentInfo14 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo14.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #E-mail
        label = Label(ChildInfoSectionframe, text = "\nE-mail ................................................................................................... ")
        parentInfo15 = Entry(ChildInfoSectionframe)
        r = r+1
        parentInfo15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Absent Parent Info
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nABSENT PARENT INFORMATION")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #first name
        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        absParentInfo0 = Entry(ChildInfoSectionframe)
        r = r+1
        absParentInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        absParentInfo1 = Entry(ChildInfoSectionframe)
        r = r+1
        absParentInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Telephone
        label = Label(ChildInfoSectionframe, text = "\nTelephone .............................................................................................. ")
        absParentInfo2 = Entry(ChildInfoSectionframe)
        r = r+1
        absParentInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Home Address
        label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... ")
        absParentInfo3 = Entry(ChildInfoSectionframe)
        r = r+1
        absParentInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #City
        label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... ")
        absParentInfo4 = Entry(ChildInfoSectionframe)
        r = r+1
        absParentInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #County
        label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. ")
        absParentInfo5 = Entry(ChildInfoSectionframe)
        r = r+1
        absParentInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Zip
        label = Label(ChildInfoSectionframe, text = "\nZip ......................................................................................................... ")
        absParentInfo6 = Entry(ChildInfoSectionframe)
        r = r+1
        absParentInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HIV Status
        label = Label(ChildInfoSectionframe, text = "\nHIV Status ............................................................................................ ")
        absParentInfo7 =  StringVar()
        choices = ['HIV Positive','HIV Negative', 'Unkown']
        option = tk.OptionMenu(ChildInfoSectionframe, absParentInfo7, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

#Household Info
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nHOUSEHOLD INFORMATION")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #list all individuals living in the household
        label = Label(ChildInfoSectionframe, text = "\nAll Individuals Living in the Household")
        r = r+1
        label.grid(row = r, column = 0)

    #person1        
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 1')
        label.grid(row = r, column = 0, sticky = 'w')
        
        #Name1
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")
        houseInfo10 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Relationship to Child1
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")
        houseInfo11 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Sex1
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")
        houseInfo12 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo12, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Age1
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")
        houseInfo13 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HIV Status1
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")
        houseInfo14 = StringVar()
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo14, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

    #person2        
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 2')
        label.grid(row = r, column = 0, sticky = 'w')
        
        #Name2
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")
        houseInfo20 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Relationship to Child2
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")
        houseInfo21 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Sex2
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")
        houseInfo22 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo22, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Age2
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")
        houseInfo23 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo23.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HIV Status2
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")
        houseInfo24 = StringVar()
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo24, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

    #person3        
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 3')
        label.grid(row = r, column = 0, sticky = 'w')
        
        #Name3
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")
        houseInfo30 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Relationship to Child3
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")
        houseInfo31 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Sex3
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")
        houseInfo32 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo32, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Age3
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")
        houseInfo33 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo33.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HIV Status3
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")
        houseInfo34 = StringVar()
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo34, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

    #person4
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 4')
        label.grid(row = r, column = 0, sticky = 'w')
        
        #Name4
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")
        houseInfo40 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo40.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Relationship to Child4
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")
        houseInfo41 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo41.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Sex4
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")
        houseInfo42 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo42, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Age4
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")
        houseInfo43 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo43.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HIV Status4
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")
        houseInfo44 = StringVar()
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo44, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0) 

    #person5        
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 5')
        label.grid(row = r, column = 0, sticky = 'w')
        
        #Name5
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")
        houseInfo50 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo50.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Relationship to Child5
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")
        houseInfo51 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo51.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Sex5
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")
        houseInfo52 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo52, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Age5
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")
        houseInfo53 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo53.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HIV Status5
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")
        houseInfo54 = StringVar()
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo54, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

    #person6        
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 6')
        label.grid(row = r, column = 0, sticky = 'w')
        
        #Name6
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")
        houseInfo60 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo60.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Relationship to Child6
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")
        houseInfo61 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo61.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Sex6
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")
        houseInfo62 = StringVar()
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo62, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Age6
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")
        houseInfo63 = Entry(ChildInfoSectionframe)
        r = r+1
        houseInfo63.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HIV Status6
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")
        houseInfo64 = StringVar()
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo64, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

    #Family Annual Income Info
        label = Label(ChildInfoSectionframe, text = "\nFamily Annual Income Information ......................................................... ")
        famIncome0 = StringVar()
        choices = ['$0-10,000','$10,001-15,000','$15,001-20,000','$20,000-25,000','$25,001-30,000','$30,001-35,000','$35,001-40,000','$40,001-45,000','$50,000+']
        option = tk.OptionMenu(ChildInfoSectionframe, famIncome0, *choices)
        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Source of Family Income
        label = Label(ChildInfoSectionframe, text = "\nSource of Family Income ....................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        famIncome1 = IntVar()
        Checkbutton(ChildInfoSectionframe, text = 'Employment', variable = famIncome1).grid(row = r,  column = 1, sticky = W)

        famIncome2 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = 'Government Support', variable = famIncome2).grid(row = r,  column = 1, sticky = W)

        famIncome3 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = 'Public Assistance', variable = famIncome3).grid(row = r,  column = 1, sticky = W)

        famIncome4 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = 'Unemployment Benefits', variable = famIncome4).grid(row = r,  column = 1, sticky = W)

        famIncome5 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = 'Medicaid', variable = famIncome5).grid(row = r,  column = 1, sticky = W)

        famIncome6 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = 'Social Security', variable = famIncome6).grid(row = r,  column = 1, sticky = W)

        famIncome7 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = 'Veterans Benefits', variable = famIncome7).grid(row = r,  column = 1, sticky = W)

        #Other
        famIncome8 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = 'Other', variable = famIncome8).grid(row = r,  column = 1, sticky = W)

        #If other
        famIncome9 = Entry(ChildInfoSectionframe, width = 19)
        famIncome9.grid(row = r, column = 1, sticky = E)

#In Case of Emergency Contact
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nIN CASE OF EMERGENCY CONTACT")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #first name
        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        emergencyInfo0 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        emergencyInfo1 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Relationship to child
        label = Label(ChildInfoSectionframe, text = "\nRelationship to child ............................................................................. ")
        emergencyInfo2 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Home Address
        label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... ")
        emergencyInfo3 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #City
        label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... ")
        emergencyInfo4 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #State
        label = Label(ChildInfoSectionframe, text = "\nState ..................................................................................................... ")
        emergencyInfo5 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Zip
        label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ ")
        emergencyInfo6 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Home Phone Number
        label = Label(ChildInfoSectionframe, text = "\nHome Phone Number ............................................................................. ")
        emergencyInfo7 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Cell Phone Number
        label = Label(ChildInfoSectionframe, text = "\nCell Phone Number ............................................................................... ")
        emergencyInfo8 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Alternate Phone Number
        label = Label(ChildInfoSectionframe, text = "\nAlternate Phone Number ....................................................................... ")
        emergencyInfo9 = Entry(ChildInfoSectionframe)
        r = r+1
        emergencyInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#H.E.R.O. Programs
        #header               
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nH.E.R.O. FOR CHILDREN PROGRAMS\n")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

    #Program(s) you wish your child to participate in
        label = Label(ChildInfoSectionframe, text = "Program(s) you wish your child to participate in .................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Super HEROes Program
        programs0 = IntVar()
        Checkbutton(ChildInfoSectionframe, text="Super HEROes Program", variable = programs0).grid(row = r,  column = 1, sticky = W)

        #Bright HEROs Program
        programs1 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Bright HEROs Program", variable = programs1).grid(row = r,  column = 1, sticky = W)

        #Camp High Five
        programs2 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Camp High Five", variable = programs2).grid(row = r,  column = 1, sticky = W)

        #Holiday of HEROs
        programs3 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Holiday of HEROs", variable = programs3).grid(row = r,  column = 1, sticky = W)

        #Transition to Adulthood
        programs4 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Transition to Adulthood", variable = programs4).grid(row = r,  column = 1, sticky = W)

    #Program(s) you would be interested in your child to participating in
        label = Label(ChildInfoSectionframe, text = "\nProgram(s) you would be interested in your child to participating in ...... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Healthy HEROs (health curriculum)
        programs5 = IntVar()
        Checkbutton(ChildInfoSectionframe, text="Healthy HEROs", variable = programs5).grid(row = r,  column = 1, sticky = SW)

        #Career Development/Job Readiness
        programs6 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Career Development/Job Readiness", variable = programs6).grid(row = r,  column = 1, sticky = W)

        #Other
        programs7 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Other", variable = programs7).grid(row = r,  column = 1, sticky = W)

        programs8 = Entry(ChildInfoSectionframe, width = 19)
        programs8.grid(row = r, column = 1, sticky = E)

#Referral Needs
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nREFERRAL NEEDS")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

    #Referral
        label = Label(ChildInfoSectionframe, text = "\nReferral Needs ....................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        #Food
        Referral0 = IntVar()
        Checkbutton(ChildInfoSectionframe, text="Food", variable = Referral0).grid(row = r,  column = 1, sticky = SW)

        #Transitional Housing/Shelter
        Referral1 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Transitional Housing/Shelter", variable = Referral1).grid(row = r,  column = 1, sticky = W)

        #Rent/Utilities Assistance
        Referral2 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Rent/Utilities Assistance", variable = Referral2).grid(row = r,  column = 1, sticky = W)

        #Clothing/Furniture
        Referral3 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Clothing/Furniture", variable = Referral3).grid(row = r,  column = 1, sticky = W)

        #Financial/Public Assistance
        Referral4 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Financial/Public Assistance", variable = Referral4).grid(row = r,  column = 1, sticky = W)

        #Other
        Referral5 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Other", variable = Referral5).grid(row = r,  column = 1, sticky = W)
        
        Referral6 = Entry(ChildInfoSectionframe, width = 19)
        Referral6.grid(row = r, column = 1, sticky = E)

#Statement of Understanding
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nSTATEMENT OF UNDERSTANDING")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #one
        label = Label(ChildInfoSectionframe, text = "Statement 1 ........................................................................................... ")
        statement0 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement0, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement0, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #two
        label = Label(ChildInfoSectionframe, text = "Statement 2 .......................................................................................... ")
        statement1 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement1, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement1, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #three
        label = Label(ChildInfoSectionframe, text = "Statement 3 .......................................................................................... ")
        statement2 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement2, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement2, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #four
        label = Label(ChildInfoSectionframe, text = "Statement 4 .......................................................................................... ")
        statement3 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement3, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement3, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #five
        label = Label(ChildInfoSectionframe, text = "Statement 5 .......................................................................................... ")
        statement4 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement4, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement4, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #six
        label = Label(ChildInfoSectionframe, text = "Statement 6 .......................................................................................... ")
        statement5 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement5, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement5, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #seven
        label = Label(ChildInfoSectionframe, text = "Statement 7 .......................................................................................... ")
        statement6 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement6, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement6, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

#Signature
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nSIGNATURE")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #signature completed
        label = Label(ChildInfoSectionframe, text = "\nSignature .............................................................................................. ")
        signature = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = signature, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = signature, value=2)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

#Submit
        r = r+1
        submitProfileButton = Button(ChildInfoSectionframe, text = "Submit Profile", 
            command = lambda:self.submitChildProfile(
        date, id,
        programs0, programs1, programs2, programs3, programs4, programs5, programs6, programs7, programs8,
        Referral0, Referral1, Referral2, Referral3, Referral4, Referral5, Referral6,
        childInfo0, childInfo1, childInfo2, childInfo3, childInfo4, childInfo5, childInfo6, childInfo7,
        childInfo8, childInfo9, childInfo10, childInfo11, childInfo12, childInfo13, childInfo14, childInfo15,
        childInfo16, childInfo17, childInfo18, childInfo19, childInfo20, childInfo21, childInfo22, childInfo23,
        childInfo24, childInfo25, childInfo26, childInfo27, childInfo28, childInfo29,
        parentInfo0, parentInfo1, parentInfo2, parentInfo3, parentInfo4, parentInfo5, parentInfo6, parentInfo7,
        parentInfo8, parentInfo9, parentInfo10, parentInfo11, parentInfo12, parentInfo13, parentInfo14, parentInfo15,
        absParentInfo0, absParentInfo1, absParentInfo2, absParentInfo3, absParentInfo4, absParentInfo5, absParentInfo6, absParentInfo7,
        houseInfo10, houseInfo11, houseInfo12, houseInfo13, houseInfo14,
        houseInfo20, houseInfo21, houseInfo22, houseInfo23, houseInfo24,
        houseInfo30, houseInfo31, houseInfo32, houseInfo33, houseInfo34,
        houseInfo40, houseInfo41, houseInfo42, houseInfo43, houseInfo44,
        houseInfo50, houseInfo51, houseInfo52, houseInfo53, houseInfo54,
        houseInfo60, houseInfo61, houseInfo62, houseInfo63, houseInfo64, 
        famIncome0, famIncome1, famIncome2, famIncome3, famIncome4, famIncome5, famIncome6, famIncome7, famIncome8, famIncome9,
        emergencyInfo0, emergencyInfo1, emergencyInfo2, emergencyInfo3, emergencyInfo4, emergencyInfo5, emergencyInfo6,
        emergencyInfo7, emergencyInfo8, emergencyInfo9,
        statement0, statement1, statement2, statement3, statement4, statement5, statement6, signature))
        
        submitProfileButton.grid(sticky = 'w, e', row = r, columnspan = 2)

#Button Definitions
    def backNewChildProfilePage(self, id, date):
        if askyesno('Verify', '\nAre you sure you want to leave this page?\nYour work will not be saved.'):
            #Go back to 1st level profile page (call back if you can)
            self.AddNewAppPage()

    def submitChildProfile(self,
        date, id,
        programs0, programs1, programs2, programs3, programs4, programs5, programs6, programs7, programs8,
        Referral0, Referral1, Referral2, Referral3, Referral4, Referral5, Referral6,
        childInfo0, childInfo1, childInfo2, childInfo3, childInfo4, childInfo5, childInfo6, childInfo7,
        childInfo8, childInfo9, childInfo10, childInfo11, childInfo12, childInfo13, childInfo14, childInfo15,
        childInfo16, childInfo17, childInfo18, childInfo19, childInfo20, childInfo21, childInfo22, childInfo23,
        childInfo24, childInfo25, childInfo26, childInfo27, childInfo28, childInfo29,
        parentInfo0, parentInfo1, parentInfo2, parentInfo3, parentInfo4, parentInfo5, parentInfo6, parentInfo7,
        parentInfo8, parentInfo9, parentInfo10, parentInfo11, parentInfo12, parentInfo13, parentInfo14, parentInfo15,
        absParentInfo0, absParentInfo1, absParentInfo2, absParentInfo3, absParentInfo4, absParentInfo5, absParentInfo6, absParentInfo7,
        houseInfo10, houseInfo11, houseInfo12, houseInfo13, houseInfo14,
        houseInfo20, houseInfo21, houseInfo22, houseInfo23, houseInfo24,
        houseInfo30, houseInfo31, houseInfo32, houseInfo33, houseInfo34,
        houseInfo40, houseInfo41, houseInfo42, houseInfo43, houseInfo44,
        houseInfo50, houseInfo51, houseInfo52, houseInfo53, houseInfo54,
        houseInfo60, houseInfo61, houseInfo62, houseInfo63, houseInfo64, 
        famIncome0, famIncome1, famIncome2, famIncome3, famIncome4, famIncome5, famIncome6, famIncome7, famIncome8, famIncome9,
        emergencyInfo0, emergencyInfo1, emergencyInfo2, emergencyInfo3, emergencyInfo4, emergencyInfo5, emergencyInfo6,
        emergencyInfo7, emergencyInfo8, emergencyInfo9,
        statement0, statement1, statement2, statement3, statement4, statement5, statement6, signature):

        success = 1
        goodData = 1

#adapt for database

#Child App
        
        #wish
        programsA = ''

        if programs0.get():
            programsA = programsA + 'Super HEROes Program,'

        if programs1.get():
            programsA = programsA + 'Bright HEROs Program,'

        if programs2.get():
            programsA = programsA + 'Camp High Five,'

        if programs3.get():
            programsA = programsA + 'Holiday of HEROs,'

        if programs4.get():
            programsA = programsA + 'Transition to Adulthood,'

        if programsA == '':
            programsA = None
        else:
            programsA = programsA[:-1]

        #future
        programsB = ''

        if programs5.get():
            programsB = programsB + 'Healthy HEROs,'

        if programs6.get():
            programsB = programsB + 'Career Development/Job Readiness,'

        if programs7.get():
            programsB = programsB + 'Other,'

        if programsB == '':
            programsB = None
        else:
            programsB = programsB[:-1]


        programsOther = programs8.get()
        if programsOther == '':
            programsOther = None

        #Referral 
        programsC = ''

        if Referral0.get():
            programsC = programsC + 'Food,'

        if Referral1.get():
            programsC = programsC + 'Transitional Housing/Shelter,'

        if Referral2.get():
            programsC = programsC + 'Rent/Utilities Assistance,'

        if Referral3.get():
            programsC = programsC + 'Clothing/Furniture,'

        if Referral4.get():
            programsC = programsC + 'Financial/Public Assistance,'

        if Referral5.get():
            programsC = programsC + 'Other,'

        if programsC == '':
            programsC = None
        else:
            programsC = programsC[:-1]

        ReferralOther = Referral6.get()
        if ReferralOther == '':
            ReferralOther = None

        #Signature
        sig = signature.get()
        if sig == 0:
            sig = None
        elif sig == 2:
            sig = 0
   
#Child's Information

        cI0 = childInfo0.get()
        if cI0 == '':
            cI0 = None

        cI1 = childInfo1.get()
        if cI1 == '':
            cI1 = None

        cI2 = childInfo2.get()
        if cI2 == '':
            cI2 = None        

        cI3 = childInfo3.get()
        if cI3 == '':
            cI3 = None

        cI4 = childInfo4.get()
        if cI4 == '':
            cI4 = None

        cI5 = childInfo5.get()
        if cI5 == '':
            cI5 = None

        cI6 = childInfo6.get()
        if cI6 != '':
            if self.is_number(cI6):
                cI6 = int(cI6)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Child's Information\n\nZip code must be only numbers.")
                goodData = 0
        else:
            cI6 = None


        cI7 = childInfo7.get()
        if cI7 == '':
            cI7 = None

        cI8 = childInfo8.get()
        if cI8 == '':
            cI8 = None
            
        cI9 = childInfo9.get()
        if cI9 == '':
            cI9 = None

        cI10 = childInfo10.get()
        if cI10 != '':
            if self.is_number(cI10):
                cI10 = int(cI10)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Child's Information\n\nAge must be only numbers.")
                goodData = 0
        else:
            cI10 = None

        cI11 = childInfo11.get()
        if cI11 != '':
            if not self.is_date(cI11):
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Child's Information\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
                goodData = 0
        else:
            cI11 = None

        cI12 = childInfo12.get()
        if cI12 == '':
            cI12 = None

        cI13 = childInfo13.get()
        if cI13 == '':
            cI13 = None

        cI14 = childInfo14.get()
        if cI14 == 0:
            cI14 = None
        elif cI14 == 2:
            cI14 = 0

        cI15 = childInfo15.get()
        if cI15 == '':
            cI15 = None

        cI16 = childInfo16.get()
        if cI16 == '':
            cI16 = None

        cI17 = childInfo17.get()
        if cI17 == '':
            cI17 = None

        cI18 = childInfo18.get()
        if cI18 == '':
            cI18 = None

        cI19 = childInfo19.get()
        if cI19 == '':
            cI19 = None

        cI20 = childInfo20.get()
        if cI20 == '':
            cI20 = None

        cI21 = childInfo21.get()
        if cI21 == 0:
            cI21 = None
        elif cI21 == 2:
            cI21 = 0

        cI22 = childInfo22.get()
        if cI22 == 0:
            cI22 = None
        elif cI22 == 2:
            cI22 = 0

        cI23 = childInfo23.get()
        if cI23 == 0:
            cI23 = None
        elif cI23 == 2:
            cI23 = 0

        cI24 = childInfo24.get()
        if cI24 == 0:
            cI24 = None
        elif cI24 == 2:
            cI24 = 0

        cI25 = childInfo25.get()
        if cI25 == 0:
            cI25 = None
        elif cI25 == 2:
            cI25 = 0

        cI26 = childInfo26.get()
        if cI26 == 0:
            cI26 = None
        elif cI26 == 2:
            cI26 = 0

        cI27 = childInfo27.get()
        if cI27 == 0:
            cI27 = None
        elif cI27 == 2:
            cI27 = 0

        cI28 = childInfo28.get()
        if cI28 == '':
            cI28 = None

        cI29 = childInfo29.get()
        if cI29 == '':
            cI29 = None

#Parent/ Guardian's Information
        #adapt for database

        pI0 = parentInfo0.get()
        if pI0 == '':
            pI0 = None

        pI1 = parentInfo1.get()
        if pI1 == '':
            pI1 = None

        pI2 = parentInfo2.get()
        if pI2 == '':
            pI2 = None

        pI3 = parentInfo3.get()
        if pI3 != '':
            if self.is_number(pI3):
                pI3 = int(pI3)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Parent/Guardian Information\n\nAge must be only numbers.")
                goodData = 0
        else:
            pI3 = None

        pI4 = parentInfo4.get()
        if pI4 == '':
            pI4 = None

        pI5 = parentInfo5.get()
        if pI5 == '':
            pI5 = None

        pI6 = parentInfo6.get()
        if pI6 == '':
            pI6 = None

        pI7 = parentInfo7.get()
        if pI7 == '':
            pI7 = None

        pI8 = parentInfo8.get()
        if pI8 == '':
            pI8 = None

        pI9 = parentInfo9.get()
        if pI9 == '':
            pI9 = None

        pI10 = parentInfo10.get()
        if pI10 == '':
            pI10 = None

        pI11 = parentInfo11.get()
        if pI11 == '':
            pI11 = None

        pI12 = parentInfo12.get()
        if pI12 == '':
            pI12 = None

        pI13 = parentInfo13.get()
        if pI13 != '':
            if self.is_number(pI13):
                pI13 = int(pI13)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Parent/Guardian Information\n\nZip must be only numbers.")
                goodData = 0
        else:
            pI13 = None

        pI14 = parentInfo14.get()
        if pI14 == '':
            pI14 = None

        pI15 = parentInfo15.get()
        if pI15 == '':
            pI15 = None
        
#Absent Parent's Information
        #adapt for database

        abs0 = absParentInfo0.get()
        if abs0 == '':
            abs0 = None

        abs1 = absParentInfo1.get()
        if abs1 == '':
            abs1 = None            

        abs2 = absParentInfo2.get()
        if abs2 == '':
            abs2 = None  

        abs3 = absParentInfo3.get()
        if abs3 == '':
            abs3 = None

        abs4 = absParentInfo4.get()
        if abs4 == '':
            abs4 = None  

        abs5 = absParentInfo5.get()
        if abs5 == '':
            abs5 = None  

        abs6 = absParentInfo6.get()
        if abs6 != '':
            if self.is_number(abs6):
                abs6 = int(abs6)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Absent Parent Information\n\nZip must be only numbers.")
                goodData = 0
        else:
            abs6 = None

        abs7 = absParentInfo7.get()
        if abs7 == '':
            abs7 = None  

#Household Information
        #adapt for database
        person1 = 0
        person2 = 0
        person3 = 0
        person4 = 0
        person5 = 0
        person6 = 0

        #person 1
        house10 = houseInfo10.get()
        if house10 != '':
            person1 = 1

            house11 = houseInfo11.get()
            if house11 == '':
                house11 = None  
            
            house12 = houseInfo12.get()
            if house12 == '':
                house12 = None  
            
            house13 = houseInfo13.get()
            if house13 != '':
                if self.is_number(house13):
                    house13 = int(house13)
                else:
                    tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Household Information\n\nAge must be only numbers.")
                    goodData = 0
            else:
                house13 = None
            
            house14 = houseInfo14.get()
            if house14 == '':
                house14 = None 

        #person 2
        house20 = houseInfo20.get()
        if house20 != '':
            person2 = 1

            house21 = houseInfo21.get()
            if house21 == '':
                house21 = None  
            
            house22 = houseInfo22.get()
            if house22 == '':
                house22 = None  
            
            house23 = houseInfo23.get()
            if house23 != '':
                if self.is_number(house23):
                    house23 = int(house23)
                else:
                    tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Household Information\n\nAge must be only numbers.")
                    goodData = 0
            else:
                house23 = None
            
            house24 = houseInfo24.get()
            if house24 == '':
                house24 = None 

        #person 3
        house30 = houseInfo30.get()
        if house30 != '':
            person3 = 1

            house31 = houseInfo31.get()
            if house31 == '':
                house31 = None  
            
            house32 = houseInfo32.get()
            if house32 == '':
                house32 = None  
            
            house33 = houseInfo33.get()
            if house33 != '':
                if self.is_number(house33):
                    house33 = int(house33)
                else:
                    tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Household Information\n\nAge must be only numbers.")
                    goodData = 0
            else:
                house33 = None
            
            house34 = houseInfo34.get()
            if house34 == '':
                house34 = None 

        #person 4
        house40 = houseInfo40.get()
        if house40 != '':
            person4 = 1

            house41 = houseInfo41.get()
            if house41 == '':
                house41 = None  
            
            house42 = houseInfo42.get()
            if house42 == '':
                house42 = None  
            
            house43 = houseInfo43.get()
            if house43 != '':
                if self.is_number(house43):
                    house43 = int(house43)
                else:
                    tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Household Information\n\nAge must be only numbers.")
                    goodData = 0
            else:
                house43 = None
            
            house44 = houseInfo44.get()
            if house44 == '':
                house44 = None 

        #person 5
        house50 = houseInfo50.get()
        if house50 != '':
            person5 = 1

            house51 = houseInfo51.get()
            if house51 == '':
                house51 = None  
            
            house52 = houseInfo52.get()
            if house52 == '':
                house52 = None  
            
            house53 = houseInfo53.get()
            if house53 != '':
                if self.is_number(house53):
                    house53 = int(house53)
                else:
                    tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Household Information\n\nAge must be only numbers.")
                    goodData = 0
            else:
                house53 = None
            
            house54 = houseInfo54.get()
            if house54 == '':
                house54 = None 

        #person 6
        house60 = houseInfo60.get()
        if house60 != '':
            person6 = 1

            house61 = houseInfo61.get()
            if house61 == '':
                house61 = None  
            
            house62 = houseInfo62.get()
            if house62 == '':
                house62 = None  
            
            house63 = houseInfo63.get()
            if house63 != '':
                if self.is_number(house63):
                    house63 = int(house63)
                else:
                    tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in Household Information\n\nAge must be only numbers.")
                    goodData = 0
            else:
                house63 = None
            
            house64 = houseInfo64.get()
            if house64 == '':
                house64 = None 

#Family Annual Income Info
        #adapt for database

        income = famIncome0.get()
        if income == '':
            income = None

#Source of Family Income
        #adapt for database
        sourceIncome = ''

        if famIncome1.get():
            sourceIncome = sourceIncome + 'Employment,'

        if famIncome2.get():
            sourceIncome = sourceIncome + 'Government Support,'

        if famIncome3.get():
            sourceIncome = sourceIncome + 'Public Assistance,'
        
        if famIncome4.get():
            sourceIncome = sourceIncome + 'Unemployment Benefits,'
        
        if famIncome5.get():
            sourceIncome = sourceIncome + 'Medicaid,'
        
        if famIncome6.get():
            sourceIncome = sourceIncome + 'Social Security,'
        
        if famIncome7.get():
            sourceIncome = sourceIncome + 'Veterans Benefits,'
        
        if famIncome8.get():
            sourceIncome = sourceIncome + 'Other,'

        if sourceIncome == '':
            sourceIncome = None
        else:
            sourceIncome = sourceIncome[:-1]

        otherSource = famIncome9.get()
        if otherSource == '':
            otherSource = None

#In Case of Emergency Contact
        #adapt for database

        emergency0 = emergencyInfo0.get()
        if emergency0 == '':
            emergency0 = None

        emergency1 = emergencyInfo1.get()
        if emergency1 == '':
            emergency1 = None

        emergency2 = emergencyInfo2.get()
        if emergency2 == '':
            emergency2 = None

        emergency3 = emergencyInfo3.get()
        if emergency3 == '':
            emergency3 = None

        emergency4 = emergencyInfo4.get()
        if emergency4 == '':
            emergency4 = None

        emergency5 = emergencyInfo5.get()
        if emergency5 == '':
            emergency5 = None

        emergency6 = emergencyInfo6.get()
        if emergency6 != '':
            if self.is_number(emergency6):
                emergency6 = int(emergency6)
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nIncompatible entry in In Case of Emergency Contact\n\nZip must be only numbers.")
                goodData = 0
        else:
            emergency6 = None

        emergency7 = emergencyInfo7.get()
        if emergency7 == '':
            emergency7 = None

        emergency8 = emergencyInfo8.get()
        if emergency8 == '':
            emergency8 = None

        emergency9 = emergencyInfo9.get()
        if emergency9 == '':
            emergency9 = None

#statements of understanding
        #adapt for database

        s0 = statement0.get()
        if s0 == 0:
            s0 = None
        elif s0 == 2:
            s0 = 0

        s1 = statement1.get()
        if s1 == 0:
            s1 = None
        elif s1 == 2:
            s1 = 0

        s2 = statement2.get()
        if s2 == 0:
            s2 = None
        elif s2 == 2:
            s2 = 0

        s3 = statement3.get()
        if s3 == 0:
            s3 = None
        elif s3 == 2:
            s3 = 0

        s4 = statement4.get()
        if s4 == 0:
            s4 = None
        elif s4 == 2:
            s4 = 0

        s5 = statement5.get()
        if s5 == 0:
            s5 = None
        elif s5 == 2:
            s5 = 0

        s6 = statement6.get()
        if s6 == 0:
            s6 = None
        elif s6 == 2:
            s6 = 0

#Database Connection
        db = self.connect()
        curr = db.cursor()

#Insert into DB

        if goodData:
            try:
                curr.execute("""INSERT INTO Child_Application VALUES (%s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, sig, programsC, ReferralOther, programsB, programsOther, programsA,))

            except (pymysql.IntegrityError) as e:
                success = 0

            try:
                curr.execute("""INSERT INTO Childs_Information VALUES 
                    (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                             (id, date, cI0, cI1, cI2, cI3, cI4, cI5, cI6, cI7, cI8, cI9, cI10, cI11, cI12, cI13, cI14, cI15, cI16,
                                 cI17, cI18, cI19, cI20, cI21, cI22, cI23, cI24, cI25, cI26, cI27, cI28, cI29,))

            except (pymysql.IntegrityError) as e:
                success = 0

            try:
                curr.execute("""INSERT INTO Parent_Guardian_Information VALUES 
                    (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                             (id, date, pI0, pI1, pI2, pI3, pI4, pI5, pI6, pI7, pI8, pI9, pI10, pI11,
                                 pI12, pI13, pI14, pI15,))

            except (pymysql.IntegrityError) as e:
                success = 0

            try:
                curr.execute("""INSERT INTO Absent_Parent_Information VALUES
                    (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                                 (id, date, abs0, abs1, abs2, abs3, abs4, abs5, abs6, abs7,))

            except (pymysql.IntegrityError) as e:
                success = 0

            if person1:
                try:
                    count = 1
                    curr.execute("""INSERT INTO Household_Information VALUES
                        (%s, %s, %s, %s, %s, %s, %s, %s);""",
                                     (id, date, count, house10, house11, house12, house13, house14,))

                except (pymysql.IntegrityError) as e:
                    success = 0

            if person2:
                try:
                    count = 2
                    curr.execute("""INSERT INTO Household_Information VALUES
                        (%s, %s, %s, %s, %s, %s, %s, %s);""",
                                     (id, date, count, house20, house21, house22, house23, house24,))

                except (pymysql.IntegrityError) as e:
                    success = 0

            if person3:
                try:
                    count = 3
                    curr.execute("""INSERT INTO Household_Information VALUES
                        (%s, %s, %s, %s, %s, %s, %s, %s);""",
                                     (id, date, count, house30, house31, house32, house33, house34,))

                except (pymysql.IntegrityError) as e:
                    success = 0

            if person4:
                try:
                    count = 4
                    curr.execute("""INSERT INTO Household_Information VALUES
                        (%s, %s, %s, %s, %s, %s, %s, %s);""",
                                     (id, date, count, house40, house41, house42, house43, house44,))

                except (pymysql.IntegrityError) as e:
                    success = 0

            if person5:
                try:
                    count = 5
                    curr.execute("""INSERT INTO Household_Information VALUES
                        (%s, %s, %s, %s, %s, %s, %s, %s);""",
                                     (id, date, count, house50, house51, house52, house53, house54,))

                except (pymysql.IntegrityError) as e:
                    success = 0

            if person6:
                try:
                    count = 6
                    curr.execute("""INSERT INTO Household_Information VALUES
                        (%s, %s, %s, %s, %s, %s, %s, %s);""",
                                     (id, date, count, house60, house61, house62, house63, house64,))

                except (pymysql.IntegrityError) as e:
                    success = 0

            try:
                curr.execute("""INSERT INTO Fam_Annual_Income VALUES
                    (%s, %s, %s);""",
                    (id, date, income,))

            except (pymysql.IntegrityError) as e:
                success = 0

            try:
                curr.execute("""INSERT INTO Source_Fam_Income VALUES
                    (%s, %s, %s, %s);""",
                    (id, date, sourceIncome, otherSource,))

            except (pymysql.IntegrityError) as e:
                success = 0

            try:
                curr.execute("""INSERT INTO ChildApp_Emergency_Contact VALUES
                    (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, emergency0, emergency1, emergency2, emergency3, emergency4, emergency5, emergency6,
                         emergency7, emergency8, emergency9,))

            except (pymysql.IntegrityError) as e:
                success = 0

            try:
                curr.execute("""INSERT INTO Statement_Of_Understanding VALUES
                    (%s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (id, date, s0, s1, s2, s3, s4, s5, s6,))

            except (pymysql.IntegrityError) as e:
                success = 0
            

            db.commit()

            if success:
                tkMessageBox.showinfo("New Profile", "Submission Sucessful!")
                self.AddNewAppPage();
            else:
                tkMessageBox.showinfo("New Profile", "Submission Unsucessful\n\nA Child application \nSubmitted on: " + date + "\nFor ID number: " + str(id) + " \nAlready exists in the system")

#Close Database Connection
        self.disConnect(curr, db)

#check string entry is a number
    def is_number(self, s):
        try:
            int(s)
            return True
        except ValueError:
            return False

#check string entry is a date (YYYY-MM-DD)
    def is_date(self, s):
        if len(s) != 10:
            return False
        if (s[4] != s[7]) or (s[4] != '-') or (not self.is_number(s[0:4])) or (not self.is_number(s[5:7])) or (not self.is_number(s[-2:])):
            return False
        if (1 > int(s[0:4])) or (1 > int(s[5:7])) or (int(s[5:7]) > 12) or (1 > int(s[-2:])):
            return False
        if int(s[5:7]) == 02:
            if (int(s[-2:]) > 29):
                return False
        elif (int(s[5:7]) == 04) or (int(s[5:7]) == 06) or (int(s[5:7]) == 9) or (int(s[5:7]) == 11):
            if (int(s[-2:]) > 30): 
                return False
        elif int(s[-2:]) > 31:
            return False

        return True

#******************************************************************************************************************************************************

    def AdminUserPage(self):
       
        self.AdminUserPageRoot = Toplevel()
        root = self.AdminUserPageRoot
        if self.PrevPage is 'HomePage':
            self.HomePageRoot.withdraw()
        elif self.PrevPage is 'AddUserPage':
            self.AddUserPageRoot.withdraw()
        elif self.PrevPage is 'DeleteUserPage':
            self.DeleteUserPageRoot.withdraw()
        self.PrevPage = 'AdminUserPage'
        
        root.title("Administrate Users Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        username = self.session['username']
        
        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        back = Button(master, text = "Back", command = lambda: self.HomePage())
        back.grid(row = 0, column = 0)

        addButton = Button(master, text = "Add", command=lambda: self.AddUserPage())
        addButton.grid(row = 1, column = 2, padx = 225, pady = 10)
        
        deleteButton = Button(master, text = "Delete", command = lambda: self.DeleteUserPage())
        deleteButton.grid(row = 2, column = 2, padx = 225, pady = 10)

#******************************************************************************************************************************************************

    def AddUserPage(self):
 
        self.AddUserPageRoot = Toplevel()
        root = self.AddUserPageRoot
        self.AdminUserPageRoot.withdraw()
        self.PrevPage = 'AddUserPage'
        root.title("Add User Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        name = Label(master, text="Name")
        name.grid(row=1, column=2)
        nameEntry = Entry(master)
        nameEntry.grid(row=1, column=3)

        username = Label(master, text="Username")
        username.grid(row=2, column=2)
        usernameEntry = Entry(master)
        usernameEntry.grid(row=2, column=3)

        password = Label(master, text="Password")
        password.grid(row=3, column=2)
        passwordEntry = Entry(master)
        passwordEntry.grid(row=3, column=3)

        level = Label(master, text="Type")
        level.grid(row=4, column=2)
        levelEntry = StringVar(master)
        levelEntry.set("Regular")
        menu = OptionMenu(master, levelEntry, 'Administrator', 'Manager', 'Regular')
        menu.grid(row=4, column=3)

        add = Button(master, text="Add User", command = lambda: self.addUser(nameEntry.get(), usernameEntry.get(), 
            passwordEntry.get(), levelEntry.get()))
        add.grid(row=6, column=3)
        
        back = Button(master, text="Back", command = lambda: self.AdminUserPage())
        back.grid(row=0, column=0)
        
        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)
    
    def addUser(self, name, username, password, level):

        db = self.connect()
        curr = db.cursor()

        curr.execute("""SELECT Username FROM User WHERE Username = %s""", (username,))
        check = curr.fetchall()

        if check is ():
            curr.execute("""INSERT INTO User VALUES (%s, %s, SHA1(%s), %s);""", (name, username, password, level,))
            tkMessageBox.showinfo("Add User", "Update Successful!")

        else:
            tkMessageBox.showinfo("Add User", "Update Unsuccessful\nThis username is taken")

        db.commit()
        self.disConnect(curr, db)


#******************************************************************************************************************************************************

    def DeleteUserPage(self):

        self.DeleteUserPageRoot = Toplevel()
        root = self.DeleteUserPageRoot
        self.AdminUserPageRoot.withdraw()
        self.PrevPage = 'DeleteUserPage'
        root.title("Delete User Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        nameHead = Label(master, text = "Nameame", font= "Verdana 10 underline")
        nameHead.grid(row = 1, column = 0)

        usernameHead = Label(master, text = "Username", font= "Verdana 10 underline")
        usernameHead.grid(row = 1, column = 1)

        critHead = Label(master, text = "User Type", font= "Verdana 10 underline")
        critHead.grid(row = 1, column = 2)

        #back button
        self.back = Button(master, text = "Back", command = lambda: self.AdminUserPage())
        self.back.grid(row = 0, column = 0)
        
        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        #database fetch
        db = pymysql.connect(host = "localhost", user="root", passwd = "Darling", db="HERO")
        curr = db.cursor()
        curr.execute("SELECT * FROM User")
        results = curr.fetchall()
        self.disConnect(curr, db)

        count = 0
        deleteButtonArr = [0 for x in range(len(results))]
        for name,username,_,usertype in results:
            nameLabel = Label(master, text = name, font= "Verdana 10")
            nameLabel.grid(row = 2 + count, column = 0)

            usernameLabel = Label(master, text = username, font= "Verdana 10")
            usernameLabel.grid(row = 2 + count, column = 1)

            usertypeLabel = Label(master, text = usertype, font= "Verdana 10")
            usertypeLabel.grid(row = 2 + count, column = 2)

            deleteButtonArr[count] = Button(master, text = "Delete", command = lambda username1 = username: self.deleteUser(username1))
            deleteButtonArr[count].grid(row = 2 + count, column = 3)
            count += 1

    def deleteUser(self, username):        
        db = pymysql.connect(host = "localhost", user="root", passwd = "Darling", db="HERO")
        curr = db.cursor()

        curr.execute("DELETE FROM User WHERE Username = %s", (username,))
        db.commit()

        self.disConnect(curr, db)

        tkMessageBox.showinfo("Delete User","User "+username+" has been deleted.")
        
        self.DeleteUserPageRoot.withdraw()
        self.DeleteUserPage()

#******************************************************************************************************************************************************

    def SearchPage(self):

        self.SearchPageRoot = Toplevel()
        root = self.SearchPageRoot
        if self.PrevPage is 'HomePage':
            self.HomePageRoot.withdraw()
        elif self.PrevPage is 'SearchCatPage':
            self.SearchCatPageRoot.withdraw()
        elif self.PrevPage is 'SearchNamePage':
            self.SearchNamePageRoot.withdraw()
        elif self.PrevPage is 'FirstProfilePage':
            self.FirstProfilePageRoot.withdraw()
        self.PrevPage = 'SearchPage'
        
        root.title("Search Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        db = self.connect()
        curr = db.cursor()

        curr.execute("SELECT COUNT(ID) FROM Child;")
        total = curr.fetchall()[0][0]
        
        count = Label(master, text = "Total: " + str(total))
        count.grid(row = 0, column = 6)

        catLabel = Label(master, text = "Search by Category", font= "Verdana 10 underline")
        catLabel.grid(row = 2, column = 2)

        nameLabel = Label(master, text = "Search by Name", font= "Verdana 10 underline")
        nameLabel.grid(row = 4, column = 2)

        programList = ['None', "Child Application", "Camp High Five Application"]
        programs = StringVar(root)
        programs.set('Program') 

        dropdownProgram = OptionMenu(master, programs, *programList)
        dropdownProgram.grid(row = 1, column = 3)

        
        #grab all data submitted, remove duplicates, set to yearList
        childDatesSubmitted = curr.execute("SELECT Year(Date_Submitted) FROM Child_Application;")
        childYears = curr.fetchall()
        campDatesSubmitted = curr.execute("SELECT Year(Date_Submitted) FROM Camp_Application;")
        campYears = curr.fetchall()
        yearList = []

        for item in childYears:
            if item not in yearList:
                yearList.append(item)

        for item in campYears:
            if item not in yearList:
                yearList.append(item)
        years = StringVar(root)
        years.set("Year")

        #add back yearlist
        dropdownYear = OptionMenu(master, years, "None", *yearList)
        dropdownYear.grid(row = 1, column = 4)

        categoriesList = ['None', 'Zip Code', 'City', "County", 'Referral Source', "Child's Age",
                    "Child's Gender", "Child's Race/Ethnicity",
                    "Child's HIV Status (infected or affected)", "Child's Other Issues",
                    "Child's HERO Program Participation", "Child's Allergies", "Child's Years with HERO",
                    "Household Composition", "Parent(s) HIV Status (infected or affected)",
                    "Household Income Range", "Household Income Source", "Parent(s) Highest Level of Education",
                    "Parent(s) Employment Status"]
        categories = StringVar(root)
        categories.set("Category")

        dropdownCategories = OptionMenu(master, categories, *categoriesList)
        dropdownCategories.grid(row = 3, column = 3)
        catEntry = Entry(master, width=15)
        catEntry.grid(row = 3, column = 4)

        txt = Label(master, text = "First Name:")
        txt.grid(row = 5, column = 3)

        firstName = Entry(master, width=15)
        firstName.grid(row = 5, column = 4)
        
        txt = Label(master, text = "Last Name:")
        txt.grid(row = 6, column = 3)

        lastName = Entry(master, width=15)
        lastName.grid(row = 6, column = 4)

        searchCatButton = Button(master, text = "Search", command = lambda: self.SearchCatPage(programs.get(), years.get(), categories.get(), catEntry.get()))
        searchCatButton.grid(row = 3, column = 5)

        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        back = Button(master, text = "Back", command = lambda:self.HomePage())
        back.grid(row = 0, column = 0)

        searchNameButton = Button(master, text = "Search", command = lambda: self.SearchNamePage(programs.get(), years.get(), firstName.get(), lastName.get()))
        searchNameButton.grid(row = 5, column = 5)

        self.disConnect(curr, db)
        
#******************************************************************************************************************************************************

    def SearchCatPage(self, selectedProgram, selectedYear, selectedCategory, catEntry):

        self.SearchCatPageRoot = Toplevel()
        root = self.SearchCatPageRoot
        self.SearchPageRoot.withdraw()
        self.PrevPage = 'SearchCatPage'
        root.title("Search Results Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        camp = ''
        child = ''

        db = pymysql.connect(host="localhost", user="root", passwd="Darling", db="HERO")
        curr = db.cursor()

        #check for program selection
        programParam = 1
        if (selectedProgram == 'Program') or (selectedProgram == 'None'):
            #no program input
            programParam = 0

        #check for year selection
        yearParam = 1
        if (selectedYear == 'Year') or (selectedYear == 'None'):
            #no year input
            yearParam = 0
        else:
            selectedYear = selectedYear[1:5]

        #no category input
        if (selectedCategory == 'Category') or (selectedCategory == 'None'):

            #no year & no program OR no year & child
            #first, last, year in child
            if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                    curr.execute("SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information;")
                    child = curr.fetchall()

            #no year & no program OR no year & camp
            #first, last, year in camp
            if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                    curr.execute("SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information;")
                    camp = curr.fetchall()

            #year & no program OR year & child
            #first, last in child
            if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                    curr.execute("SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information WHERE YEAR(Date_Submitted) = %s;", (selectedYear,))
                    child = curr.fetchall()

            #year & no program OR year & camp
            #first, last in camp
            if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                    curr.execute("SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information WHERE YEAR(Date_Submitted) = %s;", (selectedYear,))
                    camp = curr.fetchall()

        elif selectedCategory == 'Zip Code':
            
            if (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_Zip FROM Childs_Information 
                            WHERE Address_Zip != '';""")
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_Zip FROM Demographic_Information 
                            WHERE Address_Zip != '';""")
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                check = yearParam and ((not programParam) or (selectedProgram == 'Child Application'))
                if (check):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_Zip FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_Zip != '';""", (selectedYear,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_Zip FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_Zip != '';""", (selectedYear,))
                        camp = curr.fetchall()
            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_Zip FROM Childs_Information 
                            WHERE Address_Zip = %s;""", (int(catEntry),))
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_Zip FROM Demographic_Information 
                            WHERE Address_Zip = %s;""", (int(catEntry),))
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                check = yearParam and ((not programParam) or (selectedProgram == 'Child Application'))
                if (check):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_Zip FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_Zip = %s;""", (selectedYear, int(catEntry),))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_Zip FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_Zip = %s;""", (selectedYear, int(catEntry),))
                        camp = curr.fetchall()

        elif selectedCategory == 'City':
            
            if (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_City FROM Childs_Information 
                            WHERE Address_City != '';""")
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_City FROM Demographic_Information 
                            WHERE Address_City != '';""")
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                check = yearParam and ((not programParam) or (selectedProgram == 'Child Application'))
                if (check):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_City FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_City != '';""", (selectedYear,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_City FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_City != '';""", (selectedYear,))
                        camp = curr.fetchall()
            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_City FROM Childs_Information 
                            WHERE Address_City = %s;""", (catEntry,))
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_City FROM Demographic_Information 
                            WHERE Address_City = %s;""", (catEntry,))
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                check = yearParam and ((not programParam) or (selectedProgram == 'Child Application'))
                if (check):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_City FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_City = %s;""", (selectedYear, catEntry,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_City FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_City = %s;""", (selectedYear, catEntry,))
                        camp = curr.fetchall()

        elif selectedCategory == 'County':

            if (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_County FROM Childs_Information 
                            WHERE Address_County != '';""")
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_County FROM Demographic_Information 
                            WHERE Address_County != '';""")
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_County FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_County != '';""", (selectedYear,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_County FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_County != '';""", (selectedYear,))
                        camp = curr.fetchall()
            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_County FROM Childs_Information 
                            WHERE Address_County = %s;""", (catEntry,))
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_County FROM Demographic_Information 
                            WHERE Address_County = %s;""", (catEntry,))
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Address_County FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_County = %s;""", (selectedYear, catEntry,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Address_County FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Address_County = %s;""", (selectedYear, catEntry,))
                        camp = curr.fetchall()

        elif selectedCategory == 'Referral Source':

            if (selectedProgram == 'Camp High Five Application'):
                tkMessageBox.showinfo("Search", "This application does not contain the category Referral Source")

            elif (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Referral_Source FROM Childs_Information 
                            WHERE Referral_Source != '';""")
                        child = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Referral_Source FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Referral_Source != '';""", (selectedYear,))
                        child = curr.fetchall()

            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Referral_Source FROM Childs_Information 
                            WHERE Referral_Source = %s;""", (catEntry,))
                        child = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Referral_Source FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Referral_Source = %s;""", (selectedYear, catEntry,))
                        child = curr.fetchall()

        elif selectedCategory == "Child's Age":

            if (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Age FROM Childs_Information 
                            WHERE Age != '';""")
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Age FROM Demographic_Information 
                            WHERE Age != '';""")
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Age FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Age != '';""", (selectedYear,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Age FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Age != '';""", (selectedYear,))
                        camp = curr.fetchall()

            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Age FROM Childs_Information 
                            WHERE Age = %s;""", (catEntry,))
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Age FROM Demographic_Information 
                            WHERE Age = %s;""", (catEntry,))
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Age FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Age = %s;""", (selectedYear, catEntry,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Age FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Age = %s;""", (selectedYear, catEntry,))
                        camp = curr.fetchall()

        elif selectedCategory == "Child's Gender":

            if (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Gender FROM Childs_Information 
                            WHERE Gender != '';""")
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Gender FROM Demographic_Information 
                            WHERE Gender != '';""")
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Gender FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Gender != '';""", (selectedYear,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Gender FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Gender != '';""", (selectedYear,))
                        camp = curr.fetchall()
            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Gender FROM Childs_Information 
                            WHERE Gender = %s;""", (catEntry,))
                        child = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Gender FROM Demographic_Information 
                            WHERE Gender = %s;""", (catEntry,))
                        camp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Gender FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Gender = %s;""", (selectedYear, catEntry,))
                        child = curr.fetchall()

                #year & no program OR year & camp
                #first, last, cat in camp
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Gender FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Gender = %s;""", (selectedYear, catEntry,))
                        camp = curr.fetchall()

        elif selectedCategory == "Child's Race/Ethnicity":

            if catEntry == '':
                #no year & (no program OR camp)
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Race FROM Demographic_Information 
                            WHERE Race != '';""")
                        camp = curr.fetchall()

                #year & (no program OR camp)
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Race FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Race != '';""", (selectedYear,))
                        camp = curr.fetchall()

                #no year & (no program OR child)
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Ethnicity, Ethnicity_Other FROM Childs_Information 
                            WHERE Ethnicity != '' OR Ethnicity_Other != '';""")
                        child = curr.fetchall()

                #year & (no program OR child)
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Ethnicity, Ethnicity_Other FROM Childs_Information 
                            WHERE Ethnicity != '' OR Ethnicity_Other !- '';""")
                        child = curr.fetchall()         

            else:
                #no year & (no program OR camp)
                #first, last, year, cat in camp
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Race FROM Demographic_Information 
                            WHERE Race = %s;""", (catEntry,))
                        camp = curr.fetchall()

                #year & (no program OR camp)
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name, Race FROM Demographic_Information 
                            WHERE YEAR(Date_Submitted) = %s AND Race != %s;""", (selectedYear, catEntry,))
                        camp = curr.fetchall()

                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Ethnicity, Ethnicity_Other FROM Childs_Information 
                            WHERE Ethnicity != %s OR Ethnicity_Other != %s;""", (catEntry, catEntry,))
                        child = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, Ethnicity, Ethnicity_Other FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND (Ethnicity != %s OR Ethnicity_Other != %s);""", (selectedYear, catEntry, catEntry,))
                        child = curr.fetchall()

        elif selectedCategory == "Child's HIV Status (infected or affected)":

            if (selectedProgram == 'Camp High Five Application'):
                tkMessageBox.showinfo("Search", "This application does not contain the category")

            elif (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, HIV_Status FROM Childs_Information 
                            WHERE HIV_Status != '';""")
                        child = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, HIV_Status FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND HIV_Status != '';""", (selectedYear,))
                        child = curr.fetchall()
            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, HIV_Status FROM Childs_Information 
                            WHERE HIV_Status = %s;""", (catEntry,))
                        child = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, HIV_Status FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s AND HIV_Status = %s;""", (selectedYear, catEntry,))
                        child = curr.fetchall()

        elif selectedCategory == "Child's Other Issues":

            if (selectedProgram == 'Camp High Five Application'):
                tkMessageBox.showinfo("Search", "This application does not contain the category")

            elif (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if not yearParam:
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            ADD_ADHD, Learning_Disability, Developmental_Disability, Mental_Health_Issues, 
                            Other_Medical_Condition, Victim_of_Abuse, Criminal_Justice_System
                            FROM Childs_Information 
                            WHERE ADD_ADHD != '' OR Learning_Disability != '' OR Developmental_Disability != '' OR
                            Mental_Health_Issues != '' OR Other_Medical_Condition != '' OR Victim_of_Abuse != '' OR 
                            Criminal_Justice_System != '';""")
                        temp = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if yearParam:
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, 
                            ADD_ADHD, Learning_Disability, Developmental_Disability, Mental_Health_Issues, 
                            Other_Medical_Condition, Victim_of_Abuse, Criminal_Justice_System 
                            FROM Childs_Information WHERE YEAR(Date_Submitted) = %s 
                            AND (ADD_ADHD != '' OR Learning_Disability != '' OR Developmental_Disability != '' OR
                            Mental_Health_Issues != '' OR Other_Medical_Condition != '' OR Victim_of_Abuse != '' OR 
                            Criminal_Justice_System != '');""", (selectedYear,))
                        temp = curr.fetchall()
            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if ((not yearParam) and ((not programParam) or (selectedProgram == 'Child Application'))):
                    if (catEntry == "ADD" or catEntry == "ADHD" or catEntry == "ADD/ADHD"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            ADD_ADHD
                            FROM Childs_Information 
                            WHERE ADD_ADHD != '1';""")
                        temp = curr.fetchall()
                    
                    if (catEntry == "Learning Disability"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Learning_Disability
                            FROM Childs_Information 
                            WHERE Learning_Disability != '1';""")
                        temp = curr.fetchall()
                    
                    if (catEntry == "Developmental Disability"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Developmental_Disability
                            FROM Childs_Information 
                            WHERE Developmental_Disability != '1';""")
                        temp = curr.fetchall()
                    
                    if (catEntry == "Mental Health Issues"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, 
                            Mental_Health_Issues
                            FROM Childs_Information 
                            WHERE Mental_Health_Issues != '1';""")
                        temp = curr.fetchall()
                    
                    if (catEntry == "Other Medical Condition"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Other_Medical_Condition
                            FROM Childs_Information 
                            WHERE Other_Medical_Condition != '1';""")
                        temp = curr.fetchall()
                    
                    if (catEntry == "Victim of Abuse"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Victim_of_Abuse
                            FROM Childs_Information 
                            WHERE Victim_of_Abuse != '1';""")
                        temp = curr.fetchall()
                    
                    if (catEntry == "Criminal Justice System"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Criminal_Justice_System
                            FROM Childs_Information 
                            WHERE Criminal_Justice_System != '1';""")
                        temp = curr.fetchall()
                    

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam and ((not programParam) or (selectedProgram == 'Child Application'))):
                    if (catEntry == "ADD" or catEntry == "ADHD" or catEntry == "ADD/ADHD"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            ADD_ADHD
                            FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s 
                            AND ADD_ADHD != '1';""", (selectedYear,))
                        temp = curr.fetchall()
                
                    if (catEntry == "Learning Disability"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, 
                            Learning_Disability
                            FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s 
                            AND Learning_Disability != '1';""", (selectedYear,))
                        temp = curr.fetchall()
                    
                    if (catEntry == "Developmental Disability"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Developmental_Disability
                            FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s 
                            AND Developmental_Disability != '1';""", (selectedYear,))
                        temp = curr.fetchall()
                    
                    if (catEntry == "Mental Health Issues"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Mental_Health_Issues
                            FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s 
                            AND Mental_Health_Issues != '1';""", (selectedYear,))
                        temp = curr.fetchall()
                    
                    if (catEntry == "Other Medical Condition"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Other_Medical_Condition
                            FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s 
                            AND Other_Medical_Condition != '1';""", (selectedYear,))
                        temp = curr.fetchall()
                    
                    if (catEntry == "Victim of Abuse"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last,
                            Victim_of_Abuse
                            FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s 
                            AND Victim_of_Abuse != '1';""", (selectedYear,))
                        temp = curr.fetchall()
                    
                    if (catEntry == "Criminal Justice System"):
                        curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last, 
                            Criminal_Justice_System
                            FROM Childs_Information 
                            WHERE YEAR(Date_Submitted) = %s 
                            AND Criminal_Justice_System != '1';""", (selectedYear,))
                        temp = curr.fetchall()
            if temp:
                child = ()
                for person in temp:
                    newChild = person[0:4]

                    if person[4]:
                        newChild += ('ADD/ADHD',)
                    if person[5]:
                        newChild += ('Learning Disability',)
                    if person[6]:
                        newChild += ('Developmental Disability',)
                    if person[7]:
                        newChild += ('Mental Health Issues',)
                    if person[8]:
                        newChild += ('Other Medical Condition',)
                    if person[9]:
                        newChild += ('Victim of Abuse',)
                    if person[10]:
                        newChild += ('Criminal Justice System',)

                    child += (newChild,)

        elif selectedCategory == "Child's HERO Program Participation":

            #no year & (no cat OR Child)
            if (not yearParam) and (not programParam or selectedProgram == 'Child Application'):
                curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information;""")
                child = curr.fetchall()

            #no year & (no cat OR Camp)
            if (not yearParam) and (not programParam or selectedProgram == 'Camp High Five Application'):
                curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information;""")
                camp = curr.fetchall()

            #no year & (no cat OR Child)
            if yearParam and (not programParam or selectedProgram == 'Child Application'):
                curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information 
                    WHERE YEAR(Date_Submitted) = %s;""", (selectedYear,))
                child = curr.fetchall()

            #no year & (no cat OR Camp)
            if yearParam and (not programParam or selectedProgram == 'Camp High Five Application'):
                curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information 
                    WHERE YEAR(Date_Submitted) = %s;""", (selectedYear,))
                camp = curr.fetchall()

        elif selectedCategory == "Child's Allergies":
            #child app
            if (selectedProgram == 'Child Application'):
                tkMessageBox.showinfo("Search", "This application does not contain the category")

            #camp app
            else:
                if (catEntry == ''):
                    #no year & (no program OR camp)
                    #first, last, year, cat in camp
                    if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""
                            SELECT Allergies.ID, Allergies.Date_Submitted, Demographic_Information.First_Name, Demographic_Information.Last_Name, Allergies.Med_Reaction, 
                            Allergies.Food_Reaction, Allergies.Env_Reaction, Allergies.Type, Allergies.Allergy, Allergies.Reaction 
                            FROM Demographic_Information 
                            JOIN (
                                SELECT Allergies.ID, Allergies.Date_Submitted, Allergies.Med_Reaction, Allergies.Food_Reaction, Allergies.Env_Reaction, 
                                Med_Hist_Allergies.Type, Med_Hist_Allergies.Allergy, Med_Hist_Allergies.Reaction 
                                FROM Allergies 
                                JOIN Med_Hist_Allergies 
                                ON Allergies.ID = Med_Hist_Allergies.ID AND Allergies.Date_Submitted = Med_Hist_Allergies.Date_Submitted
                                    AND (Allergies.Med_Reaction != '' OR Allergies.Food_Reaction != '' OR Allergies.Env_Reaction != '' 
                                    OR Med_Hist_Allergies.Type != '' OR Med_Hist_Allergies.Allergy != '' OR Med_Hist_Allergies.Reaction != '')
                            ) as Allergies 
                            ON Allergies.ID = Demographic_Information.ID AND Allergies.Date_Submitted = Demographic_Information.Date_Submitted;""")
                        camp = curr.fetchall()


                    #year & (no program OR camp)
                    #first, last, cat in camp
                    if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""
                            SELECT Allergies.ID, Allergies.Date_Submitted, Demographic_Information.First_Name, Demographic_Information.Last_Name, Allergies.Med_Reaction, 
                            Allergies.Food_Reaction, Allergies.Env_Reaction, Allergies.Type, Allergies.Allergy, Allergies.Reaction 
                            FROM Demographic_Information 
                            JOIN (
                                SELECT Allergies.ID, Allergies.Date_Submitted, Allergies.Med_Reaction, Allergies.Food_Reaction, Allergies.Env_Reaction, 
                                Med_Hist_Allergies.Type, Med_Hist_Allergies.Allergy, Med_Hist_Allergies.Reaction 
                                FROM Allergies 
                                JOIN Med_Hist_Allergies 
                                ON Allergies.ID = Med_Hist_Allergies.ID AND Allergies.Date_Submitted = Med_Hist_Allergies.Date_Submitted
                                    AND (Allergies.Med_Reaction != '' OR Allergies.Food_Reaction != '' OR Allergies.Env_Reaction != '' 
                                    OR Med_Hist_Allergies.Type != '' OR Med_Hist_Allergies.Allergy != '' OR Med_Hist_Allergies.Reaction != '')
                                    AND YEAR(Allergies.Date_Submitted) = %s 
                            ) as Allergies 
                            ON Allergies.ID = Demographic_Information.ID AND Allergies.Date_Submitted = Demographic_Information.Date_Submitted;""", (selectedYear,))
                        camp = curr.fetchall()

                else:
                    #no year & (no program OR camp)
                    #first, last, year, cat in camp
                    if ((not yearParam) and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""
                            SELECT Allergies.ID, Allergies.Date_Submitted, Demographic_Information.First_Name, Demographic_Information.Last_Name, Allergies.Med_Reaction, 
                            Allergies.Food_Reaction, Allergies.Env_Reaction, Allergies.Type, Allergies.Allergy, Allergies.Reaction 
                            FROM Demographic_Information 
                            JOIN (
                                SELECT Allergies.ID, Allergies.Date_Submitted, Allergies.Med_Reaction, Allergies.Food_Reaction, Allergies.Env_Reaction, 
                                Med_Hist_Allergies.Type, Med_Hist_Allergies.Allergy, Med_Hist_Allergies.Reaction 
                                FROM Allergies 
                                JOIN Med_Hist_Allergies 
                                ON Allergies.ID = Med_Hist_Allergies.ID AND Allergies.Date_Submitted = Med_Hist_Allergies.Date_Submitted
                                    AND (Allergies.Med_Reaction = %s OR Allergies.Food_Reaction = %s OR Allergies.Env_Reaction = %s 
                                    OR Med_Hist_Allergies.Type = %s OR Med_Hist_Allergies.Allergy = %s OR Med_Hist_Allergies.Reaction = %s)
                            ) as Allergies 
                            ON Allergies.ID = Demographic_Information.ID AND Allergies.Date_Submitted = Demographic_Information.Date_Submitted;""",
                             (catEntry, catEntry, catEntry, catEntry, catEntry, catEntry,))
                        camp = curr.fetchall()

                    #year & (no program OR camp)
                    #first, last, cat in camp
                    if (yearParam and ((not programParam) or (selectedProgram == 'Camp High Five Application'))):
                        curr.execute("""
                            SELECT Allergies.ID, Allergies.Date_Submitted, Demographic_Information.First_Name, Demographic_Information.Last_Name, Allergies.Med_Reaction, 
                            Allergies.Food_Reaction, Allergies.Env_Reaction, Allergies.Type, Allergies.Allergy, Allergies.Reaction 
                            FROM Demographic_Information 
                            JOIN (
                                SELECT Allergies.ID, Allergies.Date_Submitted, Allergies.Med_Reaction, Allergies.Food_Reaction, Allergies.Env_Reaction, 
                                Med_Hist_Allergies.Type, Med_Hist_Allergies.Allergy, Med_Hist_Allergies.Reaction 
                                FROM Allergies 
                                JOIN Med_Hist_Allergies 
                                ON Allergies.ID = Med_Hist_Allergies.ID AND Allergies.Date_Submitted = Med_Hist_Allergies.Date_Submitted
                                    AND (Allergies.Med_Reaction = %s OR Allergies.Food_Reaction = %s OR Allergies.Env_Reaction = %s 
                                    OR Med_Hist_Allergies.Type = %s OR Med_Hist_Allergies.Allergy = %s OR Med_Hist_Allergies.Reaction = %s)
                                    AND YEAR(Allergies.Date_Submitted) = %s 
                            ) as Allergies 
                            ON Allergies.ID = Demographic_Information.ID AND Allergies.Date_Submitted = Demographic_Information.Date_Submitted;""",
                             (catEntry, catEntry, catEntry, catEntry, catEntry, catEntry, selectedYear,))
                        camp = curr.fetchall()

        elif selectedCategory == "Child's Years with HERO":
            if (yearParam):
                tkMessageBox.showinfo("Search", "This category does not take the year parameter")

            if (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year in child
                if ((not programParam) or (selectedProgram == 'Child Application')):
                    curr.execute("""SELECT ID, Name_First, Name_Last, COUNT(DISTINCT Year(Date_Submitted)) FROM Childs_Information GROUP BY ID, Name_First, Name_Last;""")
                    tempChild = curr.fetchall()

                #no year & no program OR no year & camp
                #first, last, year in camp
                if ((not programParam) or (selectedProgram == 'Camp High Five Application')):
                    curr.execute("""SELECT ID, First_Name, Last_Name, COUNT(DISTINCT Year(Date_Submitted)) FROM Demographic_Information GROUP BY ID, First_Name, Last_Name;""")
                    tempCamp = curr.fetchall()

            else:
                #no year & no program OR no year & child
                #
                #first, last, year in child
                if ((not programParam) or (selectedProgram == 'Child Application')):
                    curr.execute("""SELECT ID, Name_First, Name_Last, COUNT(DISTINCT Year(Date_Submitted)) FROM Childs_Information GROUP BY ID, Name_First, Name_Last;""")
                    temp = curr.fetchall()
                    tempChild = [i for i in temp if i[1] == int(catEntry)]

                #no year & no program OR no year & camp
                #first, last, year in camp
                if ((not programParam) or (selectedProgram == 'Camp High Five Application')):
                    curr.execute("""SELECT ID, First_Name, Last_Name, COUNT(DISTINCT Year(Date_Submitted)) FROM Demographic_Information GROUP BY ID, First_Name, Last_Name;""")
                    temp = curr.fetchall()
                    tempCamp = [i for i in temp if i[1] == int(catEntry)]

            if tempChild:
                child = ()
                for person in tempChild:
                    newChild = (person[0], 'NA', person[1], person[2], person[3])
                    child += (newChild,)
            
            if tempCamp:
                camp = ()
                for person in tempCamp:
                    newCamp = (person[0], 'NA', person[1], person[2], person[3])
                    camp += (newCamp,)

        elif selectedCategory == "Household Composition":
            if (catEntry):
                tkMessageBox.showinfo("Search", "This category does not take specific category parameters")
            else:
                #no year
                #first, last, year, cat in child
                if ((not yearParam)):
                    curr.execute("""
                        SELECT  Childs_Information.ID, Childs_Information.Date_Submitted, Childs_Information.Name_First, Childs_Information.Name_Last,
                        Household_Information.Name, Household_Information.Relationship, Household_Information.Sex, Household_Information.Age, Household_Information.HIV_Status
                        FROM Household_Information
                        JOIN Childs_Information
                        ON Childs_Information.ID = Household_Information.ID AND Childs_Information.Date_Submitted = Household_Information.Date_Submitted
                            AND (Household_Information.Name != '' OR Household_Information.Relationship != '' OR Household_Information.Sex != '' OR Household_Information.Age != '' OR Household_Information.HIV_Status != '');""")
                    child = curr.fetchall()

                else:
                #year
                #first, last, cat in child
                    curr.execute("""
                        SELECT  Childs_Information.ID, Childs_Information.Date_Submitted, Childs_Information.Name_First, Childs_Information.Name_Last,
                        Household_Information.Name, Household_Information.Relationship, Household_Information.Sex, Household_Information.Age, Household_Information.HIV_Status
                        FROM Household_Information
                        JOIN Childs_Information
                        ON Childs_Information.ID = Household_Information.ID AND Childs_Information.Date_Submitted = Household_Information.Date_Submitted
                            AND (Household_Information.Name != '' OR Household_Information.Relationship != '' OR Household_Information.Sex != '' OR Household_Information.Age != '' OR Household_Information.HIV_Status != '')
                            AND YEAR(Date_Submitted) = %s;""", (selectedYear,))
                    child = curr.fetchall()

        elif selectedCategory == "Parent(s) HIV Status (infected or affected)":
            if (catEntry):
                #no year
                #first, last, year, cat in child
                if ((not yearParam)):
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last, 
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.HIV_Status as HIV_Status FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted
                        AND Parent_Guardian_Information.HIV_Status as HIV_Status = %s;""", (catEntry,))
                    child = curr.fetchall()
                else:
                #year
                #first, last, cat in child
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last, 
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.HIV_Status as HIV_Status FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted
                        AND Parent_Guardian_Information.HIV_Status as HIV_Status = %s
                        AND YEAR(Parent_Guardian_Information.Date_Submitted) = %s;""", (catEntry, selectedYear,))
                    child = curr.fetchall()
            else:
                #no year
                #first, last, year, cat in child
                if ((not yearParam)):
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.HIV_Status as HIV_Status FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted;""")
                    child = curr.fetchall()
                else:
                #year
                #first, last, cat in child
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.HIV_Status as HIV_Status FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted 
                        AND YEAR(Parent_Guardian_Information.Date_Submitted) = %s;""", (selectedYear,))
                    child = curr.fetchall()

        elif selectedCategory == "Household Income Range":

            if (catEntry == ''):
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if (not yearParam):
                    curr.execute("""SELECT Fam_Annual_Income.ID as ID, Fam_Annual_Income.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last, 
                        Fam_Annual_Income.Fam_Annual_Income as Fam_Annual_Income
                        FROM Fam_Annual_Income 
                        JOIN Childs_Information ON Fam_Annual_Income.ID = Childs_Information.ID 
                        AND Fam_Annual_Income.Date_Submitted = Childs_Information.Date_Submitted;""")
                    child = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam):
                    curr.execute("""SELECT Fam_Annual_Income.ID as ID, Fam_Annual_Income.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last, 
                        Fam_Annual_Income.Fam_Annual_Income as Fam_Annual_Income
                        FROM Fam_Annual_Income 
                        JOIN Childs_Information ON Fam_Annual_Income.ID = Childs_Information.ID 
                        AND Fam_Annual_Income.Date_Submitted = Childs_Information.Date_Submitted
                        AND YEAR(Fam_Annual_Income.Date_Submitted) = %s;""", (selectedYear,))
                    child = curr.fetchall()

            else:
                #no year & no program OR no year & child
                #first, last, year, cat in child
                if (not yearParam):
                    curr.execute("""SELECT Fam_Annual_Income.ID as ID, Fam_Annual_Income.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Fam_Annual_Income.Fam_Annual_Income as Fam_Annual_Income
                        FROM Fam_Annual_Income 
                        JOIN Childs_Information ON Fam_Annual_Income.ID = Childs_Information.ID 
                        AND Fam_Annual_Income.Date_Submitted = Childs_Information.Date_Submitted AND Fam_Annual_Income.Fam_Annual_Income = %s;""", (catEntry,))
                    child = curr.fetchall()

                #year & no program OR year & child
                #first, last, cat in child
                if (yearParam):
                    curr.execute("""SELECT Fam_Annual_Income.ID as ID, Fam_Annual_Income.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Fam_Annual_Income.Fam_Annual_Income as Fam_Annual_Income
                        FROM Fam_Annual_Income 
                        JOIN Childs_Information ON Fam_Annual_Income.ID = Childs_Information.ID 
                        AND Fam_Annual_Income.Date_Submitted = Childs_Information.Date_Submitted AND Fam_Annual_Income.Fam_Annual_Income = %s
                        AND YEAR(Fam_Annual_Income.Date_Submitted) = %s;""", (catEntry, selectedYear,))
                    child = curr.fetchall()

        elif selectedCategory == "Household Income Source":
            if (catEntry == ''):
                #no year
                #first, last, year, cat in child
                if (not yearParam):
                    curr.execute("""SELECT Source_Fam_Income.ID as ID, Source_Fam_Income.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Source_Fam_Income.Source_Fam_Income as Fam_Annual_Income, Source_Fam_Income.Other as Other
                        FROM Source_Fam_Income 
                        JOIN Childs_Information ON Source_Fam_Income.ID = Source_Fam_Income.ID 
                        AND Source_Fam_Income.Date_Submitted = Childs_Information.Date_Submitted;""")
                    child = curr.fetchall()

                #year
                else:
                    curr.execute("""SELECT Source_Fam_Income.ID as ID, Source_Fam_Income.Date_Submitted as Date_Subbmitted,
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last, 
                        Source_Fam_Income.Source_Fam_Income as Fam_Annual_Income, Source_Fam_Income.Other as Other
                        FROM Source_Fam_Income 
                        JOIN Childs_Information ON Source_Fam_Income.ID = Source_Fam_Income.ID 
                        AND Source_Fam_Income.Date_Submitted = Childs_Information.Date_Submitted
                        AND YEAR(Source_Fam_Income.Date_Submitted) = %s;""", (selectedYear,))
                    child = curr.fetchall()

            else:
                #no year
                #first, last, year, cat in child
                if (not yearParam):
                    curr.execute("""SELECT Source_Fam_Income.ID as ID, Source_Fam_Income.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last, 
                        Source_Fam_Income.Source_Fam_Income as Fam_Annual_Income, Source_Fam_Income.Other as Other
                        JOIN Childs_Information ON Source_Fam_Income.ID = Source_Fam_Income.ID 
                        AND Source_Fam_Income.Date_Submitted = Childs_Information.Date_Submitted
                        AND (Source_Fam_Income.Source_Fam_Income = %s OR Source_Fam_Income.Other = %s);""", (catEntry, catEntry))
                    child = curr.fetchall()

                #year
                else:
                    curr.execute("""SELECT Source_Fam_Income.ID as ID, Source_Fam_Income.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last, 
                        Source_Fam_Income.Source_Fam_Income as Fam_Annual_Income, Source_Fam_Income.Other as Other
                        JOIN Childs_Information ON Source_Fam_Income.ID = Source_Fam_Income.ID 
                        AND Source_Fam_Income.Date_Submitted = Childs_Information.Date_Submitted
                        AND (Source_Fam_Income.Source_Fam_Income = %s OR Source_Fam_Income.Other = %s)
                        AND YEAR(Source_Fam_Income.Date_Submitted) = %s;""", (catEntry, catEntry, selectedYear))
                    child = curr.fetchall()

        elif selectedCategory == "Parent(s) Highest Level of Education":
            if (catEntry):
                #no year
                #first, last, year, cat in child
                if ((not yearParam)):
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted,
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,  
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Education_Completed as Education_Completed
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted
                        AND Parent_Guardian_Information.Education_Completed = %s;""", (catEntry))
                    child = curr.fetchall()
                else:
                #year
                #first, last, cat in child
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Education_Completed as Education_Completed
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted 
                        AND Parent_Guardian_Information.Education_Completed = %s
                        AND YEAR(Parent_Guardian_Information.Date_Submitted) = %s;""", (catEntry, selectedYear,))
                    child = curr.fetchall()

            else:
                #no year
                #first, last, year, cat in child
                if ((not yearParam)):
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Education_Completed as Education_Completed 
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted;""")
                    child = curr.fetchall()
                else:
                #year
                #first, last, cat in child
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Education_Completed as Education_Completed
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted 
                        AND YEAR(Parent_Guardian_Information.Date_Submitted) = %s;""", (selectedYear,))
                    child = curr.fetchall()

        elif selectedCategory == "Parent(s) Employment Status":
            if (catEntry):
                #no year
                #first, last, year, cat in child
                if ((not yearParam)):
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Employment_Status as Employment_Status
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted
                        AND Parent_Guardian_Information.Employment_Status = %s;""", (catEntry))
                    child = curr.fetchall()
                else:
                #year
                #first, last, cat in child
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Employment_Status as Employment_Status
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted 
                        AND Parent_Guardian_Information.Employment_Status = %s
                        AND YEAR(Parent_Guardian_Information.Date_Submitted) = %s;""", (catEntry, selectedYear,))
                    child = curr.fetchall()

            else:
                #no year
                #first, last, year, cat in child
                if ((not yearParam)):
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Employment_Status as Employment_Status
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted;""")
                    child = curr.fetchall()
                else:
                #year
                #first, last, cat in child
                    curr.execute("""SELECT Parent_Guardian_Information.ID as ID, Parent_Guardian_Information.Date_Submitted as Date_Subbmitted, 
                        Childs_Information.Name_First as Name_First, Childs_Information.Name_Last as Name_Last,
                        Parent_Guardian_Information.Relationship_to_Child as Relationship_to_Child, 
                        Parent_Guardian_Information.Employment_Status as Employment_Status
                        FROM Parent_Guardian_Information 
                        JOIN Childs_Information ON Parent_Guardian_Information.ID = Childs_Information.ID 
                        AND Parent_Guardian_Information.Date_Submitted = Childs_Information.Date_Submitted 
                        AND YEAR(Parent_Guardian_Information.Date_Submitted) = %s;""", (selectedYear,))
                    child = curr.fetchall()
        

        self.disConnect(curr, db)
        
        #need to implement dynamic tracking of count
        countText = len(child) + len(camp)
        count = Label(master, text = "Total: " + str(countText))
        count.grid(row = 0, column = 6)

        back = Button(master, text = "Back", command = lambda:self.SearchPage())
        back.grid(row = 0, column = 0)
        
        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        r = 2
        idHead = Label(master, text = "ID", font= "Verdana 10 underline")
        idHead.grid(row = r, column = 2)

        dateHead = Label(master, text = "Date Submitted", font= "Verdana 10 underline")
        dateHead.grid(row = r, column = 3)

        nameHead = Label(master, text = "Name", font= "Verdana 10 underline")
        nameHead.grid(row = r, column = 4)

        critHead = Label(master, text = "Criteria", font= "Verdana 10 underline")
        critHead.grid(row = r, column = 5)

        r = r+1
        childHead = Label(master, text = "Child App", font= "Verdana 10 underline")
        childHead.grid(row = r, column = 0)

        r = r+1
        if (child):
            for num in child:

                ID = Label(master, text = num[0])
                ID.grid(row = r, column = 2)

                Date_Submitted = Label(master, text = num[1])
                Date_Submitted.grid(row = r, column = 3)

                nameText = ''
                if (num[2] is not None):
                    nameText += num[2]
                if (num[3] is not None):
                    if (nameText != ''):
                        nameText += ' '
                    nameText += num[3]
                Name = Label(master, text = nameText
                    )
                Name.grid(row = r, column = 4)

                criteriaText = ''
                if (len(num) > 4):
                    for i in range(len(num) - 4):
                        if num[4+i] is not None:
                            criteriaText += str(num[4+i])
                            criteriaText += ', '

                    criteriaText = criteriaText[:-2]
                
                criteria = Label(master, text = criteriaText)
                criteria.grid(row = r, column = 5)

                profBut = Button(master, text = "See Profile", command = lambda ID = num[0]: self.FirstProfilePage(ID))
                profBut.grid(row = r, column = 6)
                r = r+1

        else:
                childNope = Label(master, text = "None")
                childNope.grid(row = r, column = 2)

        r = r+1
        campHead = Label(master, text = "Camper App", font= "Verdana 10 underline")
        campHead.grid(row = r, column = 0)
        
        r = r+1
        if(camp):
            for num in camp:
                ID = Label(master, text = num[0])
                ID.grid(row = r, column = 2)

                Date_Submitted = Label(master, text = num[1])
                Date_Submitted.grid(row = r, column = 3)

                nameText = ''
                if (num[2] is not None):
                    nameText += num[2]
                if (num[3] is not None):
                    if (nameText != ''):
                        nameText += ' '
                    nameText += num[3]
                Name = Label(master, text = nameText
                    )
                Name.grid(row = r, column = 4)

                criteriaText = ''
                if (len(num) > 4):
                    for i in range(len(num) - 4):
                        if num[4+i] is not None:
                            criteriaText += str(num[4+i])
                            criteriaText += ', '
                            
                    criteriaText = criteriaText[:-2]
                
                criteria = Label(master, text = criteriaText)
                criteria.grid(row = r, column = 5)

                profBut = Button(master, text = "See Profile", command = lambda ID = num[0]: self.FirstProfilePage(ID))
                profBut.grid(row = r, column = 6)
                r = r+1

        else:
                campNope = Label(master, text = "None")
                campNope.grid(row = r, column = 2)

    def SearchNamePage(self, selectedProgram, selectedYear, firstName, lastName):

        self.SearchNamePageRoot = Toplevel()
        root = self.SearchNamePageRoot
        if self.PrevPage is 'SearchPage':
            self.SearchPageRoot.withdraw()
        self.PrevPage = 'SearchNamePage'
        
        root.title("Search Results Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        camp = ''
        child = ''

        db = pymysql.connect(host="localhost", user="root", passwd="Darling", db="HERO")
        curr = db.cursor()

        #check for program selection
        programParam = 1
        if (selectedProgram == 'Program') or (selectedProgram == 'None'):
            #no program input
            programParam = 0

        #check for year selection
        yearParam = 1
        if (selectedYear == 'Year') or (selectedYear == 'None'):
            #no year input
            yearParam = 0
        else:
            selectedYear = selectedYear[1:5]

        #no year
        if (not yearParam):

            #no program or child
            if ((not programParam) or (selectedProgram == 'Child Application')):
                


                #no first, no last
                if ((not firstName) and (not lastName)):
                    curr.execute("SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information;")
                    child = curr.fetchall()
                
                #yes first, no last
                elif (not lastName):
                    curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information 
                        WHERE Name_First = %s;""", (firstName,))
                    child = curr.fetchall()

                #no first, yes last
                elif (not firstName):
                    curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information
                        WHERE Name_Last = %s;""", (lastName,))
                    child = curr.fetchall()

                #yes first, yes last
                else:
                    curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information
                        WHERE Name_First = %s AND Name_Last = %s;""", (firstName, lastName,))
                    child = curr.fetchall()

            #no program or camp
            if ((not programParam) or (selectedProgram == 'Camp High Five Application')):
                
                #no first, no last
                if ((not firstName) and (not lastName)):
                    curr.execute("SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information;")
                    camp = curr.fetchall()

                #yes first, no last
                elif (not lastName):
                    curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information 
                        WHERE First_Name = %s;""", (firstName,))
                    camp = curr.fetchall()

                #no first, yes last
                elif (not firstName):
                    curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information
                        WHERE Last_Name = %s;""", (lastName,))
                    camp = curr.fetchall()

                #yes first, yes last
                else:
                    curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information
                        WHERE First_Name = %s AND Last_Name = %s;""", (firstName, lastName,))
                    camp = curr.fetchall()

        #yes year
        else:

            #no program or child
            if ((not programParam) or (selectedProgram == 'Child Application')):
                
                #no first, no last
                if ((not firstName) and (not lastName)):
                    curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information
                        WHERE YEAR(Date_Submitted) = %s;""", (selectedYear,))
                    child = curr.fetchall()

                #yes first, no last
                elif (not lastName):
                    curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information
                        WHERE Name_First = %s AND YEAR(Date_Submitted) = %s;""", (firstName, selectedYear,))
                    child = curr.fetchall()

                #no first, yes last
                elif (not firstName):
                    curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information
                        WHERE Name_Last = %s AND YEAR(Date_Submitted) = %s;""", (lastName, selectedYear,))
                    child = curr.fetchall()

                #yes first, yes last
                else:
                    curr.execute("""SELECT ID, Date_Submitted, Name_First, Name_Last FROM Childs_Information
                        WHERE Name_First = %s AND Name_Last = %s AND YEAR(Date_Submitted) = %s;""", (firstName, lastName, selectedYear,))
                    child = curr.fetchall()

            #no program or camp
            if ((not programParam) or (selectedProgram == 'Camp High Five Application')):
                
                #no first, no last
                if ((not firstName) and (not lastName)):
                    curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information
                         WHERE YEAR(Date_Submitted) = %s;""", (selectedYear,))
                    camp = curr.fetchall()

                #yes first, no last
                elif (not lastName):
                    curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information
                        WHERE First_Name = %s AND YEAR(Date_Submitted) = %s;""", (firstName, selectedYear,))
                    camp = curr.fetchall()

                #no first, yes last
                elif (not firstName):
                    curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information
                        WHERE Last_Name = %s AND YEAR(Date_Submitted) = %s;""", (lastName, selectedYear,))
                    camp = curr.fetchall()

                #yes first, yes last
                else:
                    curr.execute("""SELECT ID, Date_Submitted, First_Name, Last_Name FROM Demographic_Information
                        WHERE First_Name = %s AND Last_Name = %s AND YEAR(Date_Submitted) = %s;""", (firstName, lastName, selectedYear,))
                    camp = curr.fetchall()

        self.disConnect(curr, db)

        #need to implement dynamic tracking of count
        countText = len(child) + len(camp)
        count = Label(master, text = "Total: " + str(countText))
        count.grid(row = 0, column = 6)

        back = Button(master, text = "Back", command = lambda:self.SearchPage())
        back.grid(row = 0, column = 0)

        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        r = 2
        idHead = Label(master, text = "ID", font= "Verdana 10 underline")
        idHead.grid(row = r, column = 2)

        dateHead = Label(master, text = "Date Submitted", font= "Verdana 10 underline")
        dateHead.grid(row = r, column = 3)


        nameHead = Label(master, text = "Name", font= "Verdana 10 underline")
        nameHead.grid(row = r, column = 4)

        r = r+1
        childHead = Label(master, text = "Child App", font= "Verdana 10 underline")
        childHead.grid(row = r, column = 0)

        r = r+1
        if (child):
            for num in child:
                ID = Label(master, text = num[0])
                ID.grid(row = r, column = 2)

                Date_Submitted = Label(master, text = num[1])
                Date_Submitted.grid(row = r, column = 3)

                nameText = ''
                if (num[2] is not None):
                    nameText += num[2]
                if (num[3] is not None):
                    if (nameText != ''):
                        nameText += ' '
                    nameText += num[3]
                Name = Label(master, text = nameText
                    )
                Name.grid(row = r, column = 4)

                profBut = Button(master, text = "See Profile", command = lambda ID = num[0]: self.FirstProfilePage(ID))
                profBut.grid(row = r, column = 6)

                r = r+1
        
        else:
                childNope = Label(master, text = "None")
                childNope.grid(row = r, column = 2)

        r = r+1
        campHead = Label(master, text = "Camper App", font= "Verdana 10 underline")
        campHead.grid(row = r, column = 0)
        
        r = r+1
        if(camp):
            for num in camp:
                ID = Label(master, text = num[0])
                ID.grid(row = r, column = 2)

                Date_Submitted = Label(master, text = num[1])
                Date_Submitted.grid(row = r, column = 3)

                nameText = ''
                if (num[2] is not None):
                    nameText += num[2]
                if (num[3] is not None):
                    if (nameText != ''):
                        nameText += ' '
                    nameText += num[3]
                Name = Label(master, text = nameText
                    )
                Name.grid(row = r, column = 4)

                profBut = Button(master, text = "See Profile", command = lambda ID = num[0]: self.FirstProfilePage(ID))
                profBut.grid(row = r, column = 6)
                r = r+1

        else:
                campNope = Label(master, text = "None")
                campNope.grid(row = r, column = 2)

#******************************************************************************************************************************************************

    def FirstProfilePage(self, id):

        self.FirstProfilePageRoot = Toplevel()
        root = self.FirstProfilePageRoot
        if self.PrevPage is 'SearchCatPage':
            self.SearchCatPageRoot.withdraw()
        if self.PrevPage is 'SearchNamePage':
            self.SearchNamePageRoot.withdraw()
        if self.PrevPage is 'SecondChildProfilePage':
            self.SecondChildProfilePageRoot.withdraw()
        if self.PrevPage is 'SecondCampProfilePage':
            self.SecondCampProfilePageRoot.withdraw()
        self.PrevPage = 'FirstProfilePage'
        root.title("First Level Profile Page")
        master = Frame(root)
        master.grid(row=0, column=0, sticky = NW)

        db = self.connect()
        curr = db.cursor()

        #Get the name from the database
        curr.execute("SELECT Name_First, Name_Last FROM Childs_Information WHERE ID = %s;", (id,))
        name = curr.fetchall()
        if name is () or name is None:
            curr.execute("SELECT First_Name, Last_Name FROM Demographic_Information WHERE ID = %s;", (id,))
            name = curr.fetchall()        

        if name is not ():
            name_first = name[0][0]
            name_last = name[0][1]
        else:
            name_first = ''
            name_last = ''

        # Back button will take you to previous page
        back = Button(master, text="Back", command = lambda: self.SearchPage())
        back.grid(row=0, column=0)

        exitButton = Button(master, text = "Exit", command=lambda: self.exit())
        exitButton.grid(row = 0, column = 1)

        delete = Button(master, text="Delete", command=lambda: self.deleteProfile(id))
        delete.grid(row=0, column=12)

        #name title
        firstNameLabel = Label(master, text= name_first, font="Arial 12 underline").grid(row=1, column=3)
        lastNameLabel = Label(master, text= name_last, font="Arial 12 underline").grid(row=1, column=4)

        #child app
        childAppLabel = Label(master, text= "Child Applications").grid(row=2, column=2)

        curr.execute("SELECT Date_Submitted FROM Child_Application WHERE ID = %s;", (id,))
        childDateArr = curr.fetchall()

        r = 3
        for childDate in childDateArr:
            #date of program attended
            dateLabel = Label(master, text= childDate[0]).grid(row=r, column=3)

            # Details button will take you to another page
            details = Button(master, text="See Details", command=lambda childDate = childDate[0]: self.SecondChildProfilePage(id, childDate))
            details.grid(row=r, column=7)
            r = r + 1

        #camp app
        campAppLabel = Label(master, text= "Camp Applications").grid(row=r, column=2)

        curr.execute("SELECT Date_Submitted FROM Camp_Application WHERE ID = %s;", (id,))
        campDateArr = curr.fetchall()

        r = r + 1
        for campDate in campDateArr:

            #date of program attended
            dateLabel = Label(master, text= campDate[0])
            dateLabel.grid(row=r, column=3)

            # Details button will take you to another page
            details = Button(master, text="See Details", command=lambda campDate = campDate[0]: self.SecondCampProfilePage(id, campDate))
            details.grid(row=r, column=7)
            r = r + 1

        self.disConnect(curr, db)

    def deleteProfile(self, id):

        if askyesno('Verify', 'Really delete?'):
            #Delete application from database

            db = self.connect()
            curr = db.cursor()
            curr.execute("DELETE FROM Child WHERE ID = %s;", (id,))
            db.commit()
            self.disConnect(curr, db)

            tkMessageBox.showinfo("Delete Profile","Profile deletion was successful.")

            self.backFirstProfilePage()

        else:
            #Delete cancelled
            showinfo('No', 'Delete has been cancelled')

#******************************************************************************************************************************************************

    def SecondCampProfilePage(self, id, date):

        #setup
        self.SecondCampProfilePageRoot = Toplevel()
        root = self.SecondCampProfilePageRoot
        if self.PrevPage is 'FirstProfilePage':
            self.FirstProfilePageRoot.withdraw()
        elif self.PrevPage is 'EditCampProfilePage':
            self.EditCampProfilePageRoot.withdraw()
        self.PrevPage = 'SecondCampProfilePage'
        
        root.title("Second Level Profile Page")

        self.canvas = Canvas(root)
        master = Frame(self.canvas)

        scrollbarY = Scrollbar(root, orient = "vertical", command = self.canvas.yview)
        scrollbarY.pack(side = RIGHT, fill = Y)
        scrollbarX = Scrollbar(root, orient = "horizontal", command = self.canvas.xview)
        scrollbarX.pack(side = BOTTOM, fill = X)

        self.canvas.configure(xscrollcommand = scrollbarX.set, yscrollcommand = scrollbarY.set)
        self.canvas.pack(side = "left", fill = "both", expand = True)
        self.canvas.create_window((4,4), window = master, anchor="nw", 
                                  tags="master")

        master.bind("<Configure>", self.onFrameConfigure)
        root.geometry("1000x1000")

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Buttons
        #back button frame + back button
        buttonframe = Frame(master)
        buttonframe.pack(side = "top", fill = "x")

        #fix alignment
        backButton = Button(buttonframe, text = "Back", command = lambda: self.FirstProfilePage(id))
        backButton.pack(side = "left")

        exitButton = Button(buttonframe, text = "Exit", command=lambda: self.exit())
        exitButton.pack(side = "left")

        #edit
        editButton = Button(buttonframe, text = "Edit Application", command = lambda: self.EditCampProfilePage(id, date))
        editButton.pack(side = "right")

        #delete
        deleteButton = Button(buttonframe, text = "Delete Application", command = lambda: self.deleteCampApp(id, date))
        deleteButton.pack(side = "right")

#Database dump frame
        DemographicSectionframe = Frame(master)
        DemographicSectionframe.pack(fill = 'y', side = 'left') 

#Identifying Info Section 
        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\nIDENTIFYING INFORMATION")
        labelDemographicSection.pack(fill = "x")
        labelDemographicSection.config(font=("Helvetica", 20))

        #id
        label = Label(DemographicSectionframe, text = "\nChild ID ...................................................................................................................................... " + str(id))
        label.pack(anchor = 'w')

        #date
        label = Label(DemographicSectionframe, text = "\nDate Submitted .......................................................................................................................... " + str(date))
        label.pack(anchor = 'w')

#
#Parent sections
#
        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nPARENT SECTION")
        labelDemographicSection.pack(fill = "x")
        labelDemographicSection.config(font=("Helvetica", 25))

#Demographic info section
        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nDEMOGRAPHIC INFORMATION")
        labelDemographicSection.pack(fill = "x")
        labelDemographicSection.config(font=("Helvetica", 20))

        #first name
        curr.execute("SELECT First_Name FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFirst Name ................................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nFirst Name ................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #last name
        curr.execute("SELECT Last_Name FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nLast Name ................................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nLast Name  ................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #middle initial
        curr.execute("SELECT Middle_Initial FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMiddle Initial .............................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMiddle Initial .............................................................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #age
        curr.execute("SELECT Age FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nAge ............................................................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nAge ............................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')
                
        #birthday
        curr.execute("SELECT Date_Of_Birth FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ..................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ..................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #gender
        curr.execute("SELECT Gender FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nGender ...................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nGender ...................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #race
        curr.execute("SELECT Race FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nRace .......................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nRace .......................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #language
        curr.execute("SELECT Primary_Language FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPrimary Language ...................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nPrimary Language ...................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #address street
        curr.execute("SELECT Address_Street FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nStreet Address ........................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nStreet Address ........................................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #address city
        curr.execute("SELECT Address_City FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nCity ........................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nCity ........................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #address state
        curr.execute("SELECT Address_State FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nState ......................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nState ......................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #address county
        curr.execute("SELECT Address_County FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nCounty ...................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nCounty ...................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')
                
        #address zip
        curr.execute("SELECT Address_Zip FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nZip ............................................................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nZip ............................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #camper email
        curr.execute("SELECT Camper_Email FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nCamper Email ............................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nCamper Email ............................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Parent email
        curr.execute("SELECT Parent_Email FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nParent Email .............................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nParent Email ............................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Guardian name
        curr.execute("SELECT Guardian_Name FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nGuardian Name .......................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nGuardian Name .......................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Guardian Camper Relationship
        curr.execute("SELECT Guardian_Camper_Relationship FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nGuardian Camper Relationship ................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nGuardian Camper Relationship ................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Last Grade Completed
        curr.execute("SELECT Last_Grade_Completed FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nLast Grade Completed ............................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nLast Grade Completed ............................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Special Ed Classes
        curr.execute("SELECT Special_Ed_Classes FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nSpecial Ed Classes? ................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nSpecial Ed Classes? ................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nSpecial Ed Classes? ................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #siblings applying
        curr.execute("SELECT Siblings_Applying FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nSiblings Applying? ..................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nSiblings Applying? ..................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nSiblings Applying? ..................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #t-shirt size
        curr.execute("SELECT T_Shirt FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nT-Shirt Size ............................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nT-Shirt Size ............................................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Transportation
        curr.execute("SELECT Planned_Transportation FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPlanned Transportation ............................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nPlanned Transportation .................................................................. Unanswered")
        label.pack(anchor = 'w')
        
#demographic contacts
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nCONTACT INFORMATION")
        labelContactsSection.pack(fill = "x")
        labelContactsSection.config(font=("Helvetica", 20))

        curr.execute("SELECT Type FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        contactTypes = curr.fetchall()
        if contactTypes is not ():
            for cType in contactTypes:
                #type
                label = Label(DemographicSectionframe, text = "\nPhone Number Type ................................................................................................................... " + cType[0])
                label.pack(anchor = 'w')

                #Name
                curr.execute("SELECT Name FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, cType[0],))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ " + val)
                else:
                    label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ Unanswered")
                label.pack(anchor = 'w')

                #time pref
                curr.execute("SELECT Time_Preference FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, cType[0],))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... " + val)
                else:
                    label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... Unanswered")
                label.pack(anchor = 'w')

                #phone number
                curr.execute("SELECT Phone_Number FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, cType[0],))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ " + val)
                else:
                    label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ Unanswered")
                label.pack(anchor = 'w')
        else:
            label = Label(DemographicSectionframe, text = "\nPhone Number Type ................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nContact Name ............................................................................................................................ Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nTime Preference ......................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nPhone Number ............................................................................................................................ Unanswered")
            label.pack(anchor = 'w')

#Parent/ Guardian Emergency Contact Section
        #header
        labelEmergencySection = Label(DemographicSectionframe, text = "\n\nEMERGENCY CONTACT INFORMATION")
        labelEmergencySection.pack(fill = "x")
        labelEmergencySection.config(font=("Helvetica", 20))


        #contacts
        curr.execute("SELECT Name FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        contactNum = 0
        if emergencyContacts is not ():
            for contact in emergencyContacts:
                contactNum += 1

                #taken
                label = Label(DemographicSectionframe, text = "\nEmergency Contact Name " + str(contactNum) + " ....................................................................................................... " + contact[0])
                label.pack(anchor = 'w')

                #Relationship
                curr.execute("SELECT Relationship FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, contact[0]))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. " + val)
                else:
                    label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. Unanswered")
                label.pack(anchor = 'w')
                            
                #Daytime Phone
                curr.execute("SELECT Daytime_Phone FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, contact[0]))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... " + val)
                else:
                    label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... Unanswered")
                label.pack(anchor = 'w')
                
                #Evening Phone
                curr.execute("SELECT Evening_Phone FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, contact[0]))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... " + val)
                else:
                    label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... Unanswered")
                label.pack(anchor = 'w')
        
        if contactNum < 1:
            label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 1 ....................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... Unanswered")
            label.pack(anchor = 'w')

        if contactNum < 2:
            label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 2 ....................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... Unanswered")
            label.pack(anchor = 'w')

#Insurance Info Section
        #header
        labelInsuranceSection = Label(DemographicSectionframe, text = "\n\nINSURANCE INFORMATION")
        labelInsuranceSection.pack(fill = "x")
        labelInsuranceSection.config(font=("Helvetica", 20))

        #Insurer
        curr.execute("SELECT Type_of_Health_Insurance FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nHealth Insurance Provider .......................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nHealth Insurance Provider .......................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Private Insurer Name
        curr.execute("SELECT Private_Insurance_Name FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nIf Private, Insurance Provider Name ........................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nIf Private, Insurance Provider Name ........................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Policy Number
        curr.execute("SELECT Policy_Number FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPolicy Number ........................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nPolicy Number ........................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Group Number
        curr.execute("SELECT Group_Number FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nGroup Number ........................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nGroup Number ........................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

#Medical Provider Section
        #header
        labelMedicalSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER INFORMATION")
        labelMedicalSection.pack(fill = "x")
        labelMedicalSection.config(font=("Helvetica", 20))
                
        #Name
        curr.execute("SELECT Medical_Provider_Name FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMedical Provider Name .............................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMedical Provider Name ............................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Office Phone
        curr.execute("SELECT Phone_Office FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMedical Provider Office Phone Number ...................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMedical Provider Office Phone Number ....................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Pharmacy name
        curr.execute("SELECT Pharmacy_Name FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nName of Pharmacy ..................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nName of Pharmacy ...................................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Pharmacy Phone Number
        curr.execute("SELECT Phone_Pharmacy FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPharmacy Phone Number ........................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nPharmacy Phone Number ...................................................................................... Unanswered")
        label.pack(anchor = 'w')

#Medical Information Section
        #header
        labelMedInfoSection = Label(DemographicSectionframe, text = "\n\nMEDICAL INFORMATION")
        labelMedInfoSection.pack(fill = "x")
        labelMedInfoSection.config(font=("Helvetica", 20))

        #Conditions + Other
        curr.execute("SELECT Current_Medical_Conditions FROM Medical_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        conditions = curr.fetchall()[0][0]
        curr.execute("SELECT Other FROM Medical_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        other = curr.fetchall()[0][0]
        if conditions is not None and other is not None:
            label = Label(DemographicSectionframe, text = "\nCurrent Medical Conditions ........................................................................................................ " + conditions + ": " + other)
        elif conditions is not None:
            label = Label(DemographicSectionframe, text = "\nCurrent Medical Conditions ........................................................................................................ " + conditions)
        else:
            label = Label(DemographicSectionframe, text = "\nCurrent Medical Conditions ........................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Conditions Explained
        curr.execute("SELECT Medical_Condition_Explanation FROM Medical_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDescription of Medical Conditions .............................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nDescription of Medical Conditions .............................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
#Allergies Section
        #header
        labelAllergySection = Label(DemographicSectionframe, text = "\n\nALLERGY INFORMATION")
        labelAllergySection.pack(fill = "x")
        labelAllergySection.config(font=("Helvetica", 20))

        #Med Allergy
        curr.execute("SELECT Med_Allergy FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nMedical Allergies? ...................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nMedical Allergies? ...................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nMedical Allergies? ...................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Med Allergy Reaction
        curr.execute("SELECT Med_Reaction FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMedical Allergy Reaction ............................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMedical Allergy Reaction ............................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Food Allergy
        curr.execute("SELECT Food_Allergy FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nFood Allergies? .......................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nFood Allergies? .......................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nFood Allergies? .......................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Food Allergy Reaction
        curr.execute("SELECT Food_Reaction FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFood Allergy Reaction ................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nFood Allergy Reaction ................................................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #Environmental Allergies
        curr.execute("SELECT Env_Allergy FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nEnvironmental Allergies? ............................................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nEnvironmental Allergies? ............................................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nEnvironmental Allergies? ............................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Environmental Allergy Reaction
        curr.execute("SELECT Env_Reaction FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nEnvironmental Allergy Reaction .................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nEnvironmental Allergy Reaction .................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #Epi Pen
        curr.execute("SELECT EpiPen FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nEpiPen for any of the above allergies? ........................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nEpiPen for any of the above allergies? ........................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nEpiPen for any of the above allergies? ........................................................................................ Unanswered")
        label.pack(anchor = 'w')

#Dietary Needs Section
        #header
        labelDietarySection = Label(DemographicSectionframe, text = "\n\nDIETARY INFORMATION")
        labelDietarySection.pack(fill = "x")
        labelDietarySection.config(font=("Helvetica", 20))

        #Special Dietary Needs
        curr.execute("SELECT Special_Dietary_Needs FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nSpecial Dietary Needs ................................................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nSpecial Dietary Needs ................................................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nSpecial Dietary Needs ................................................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #Vegetarian
        curr.execute("SELECT Vegetarian FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nVegetarian ................................................................................................................................. Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nVegetarian ................................................................................................................................. No")
        else:
            label = Label(DemographicSectionframe, text = "\nVegetarian ................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Food Restrictions
        curr.execute("SELECT Food_Restrictions FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFood Restrictions ....................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nFood Restrictions ....................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #G Tube
        curr.execute("SELECT G_Tube FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nG-Tube ...................................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nG-Tube ...................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Formula Supplements
        curr.execute("SELECT Formula_Supplement FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nFormula Supplements ................................................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nFormula Supplements ................................................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nFormula Supplements ................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Formula Supplements How
        curr.execute("SELECT Formula_Supplement_How FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFormula Supplements How? ....................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nFormula Supplements How? ....................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Formula Type
        curr.execute("SELECT Formula_Type FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #cans per day
        curr.execute("SELECT Formula_Cans_Per_Day FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFormula Cans Per Day ................................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nFormula Cans Per Day ................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Feeding Pump
        curr.execute("SELECT Feeding_Pump FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nFeeding Pump ............................................................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nFeeding Pump ............................................................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nFeeding Pump ............................................................................................................................ Unanswered")
        label.pack(anchor = 'w')


        #Feeding Pump Type
        curr.execute("SELECT Pump_Type FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPump Type ................................................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nPump Type ................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Feeding schedule
        curr.execute("SELECT Feeding_Schedule FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFeeding Schedule ...................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nFeeding Schedule ...................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

#General health
        #header
        labelFoodNeedsSection = Label(DemographicSectionframe, text = "\n\nGENERAL HEALTH INFORMATION")
        labelFoodNeedsSection.pack(fill = "x")
        labelFoodNeedsSection.config(font=("Helvetica", 20))

        #Physical Limitations + Other
        curr.execute("SELECT Physical_Limitations FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        physLimit = curr.fetchall()[0][0]
        curr.execute("SELECT Other FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        other = curr.fetchall()[0][0]
        if physLimit is not None and other is not None:
            label = Label(DemographicSectionframe, text = "\nPhysical Limitations ................................................................................................................... " + physLimit + ": " + other)
        elif physLimit is not None:
            label = Label(DemographicSectionframe, text = "\nPhysical Limitations ................................................................................................................... " + physLimit)
        else:
            label = Label(DemographicSectionframe, text = "\nPhysical Limitations ................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Tire Easily
        curr.execute("SELECT Tire_Easily FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nTire Easily .................................................................................................................................. Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nTire Easily .................................................................................................................................. No")
        else:
            label = Label(DemographicSectionframe, text = "\nTire Easily .................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Swim
        curr.execute("SELECT Swim FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nCan Swim ................................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nCan Swim ................................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nCan Swim ................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Chicken Pox
        curr.execute("SELECT Chicken_Pox FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nChicken Pox Vaccinated? ............................................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nChicken Pox Vaccinated? ............................................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nChicken Pox Vaccinated? ............................................................................................................ Unanswered")
        label.pack(anchor = 'w')


        #c pox date
        curr.execute("SELECT Chicken_Pox_Date FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nChicken Pox Date (YYYY-MM-DD) ............................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nChicken Pox Date (YYYY-MM-DD) ............................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Menstrual Cycle
        curr.execute("SELECT Menstrual_Cycle FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nMenstrual Cycle ......................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nMenstrual Cycle ......................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nMenstrual Cycle ......................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #m cycle difficulties
        curr.execute("SELECT Menstrual_Difficulties FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMenstrual Difficulties ................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMenstrual Difficulties ................................................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
#Behavior
        #header
        labelBehaviorSection = Label(DemographicSectionframe, text = "\n\nBEHAVIORAL INFORMATION")
        labelBehaviorSection.pack(fill = "x")
        labelBehaviorSection.config(font=("Helvetica", 20))

        #Camper knows
        curr.execute("SELECT Camper_Knows FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nCamper knows that someone in his/her family has HIV/AIDS ...................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nCamper knows that someone in his/her family has HIV/AIDS ...................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nCamper knows that someone in his/her family has HIV/AIDS ...................................................... Unanswered")
        label.pack(anchor = 'w')

        #How long Camper known
        curr.execute("SELECT Time_Camper_Known FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nHow Long has Camper Been Aware of HIV/AIDS Impacting Them? .............................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nHow Long has Camper Been Aware of HIV/AIDS Impacting Them? .............................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Camper experiences
        curr.execute("SELECT Camper_Experiences FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nExperiences of Camper .............................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nExperiences of Camper .............................................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #medication for hyperactivity
        curr.execute("SELECT Med_Hyper_AttentionProb FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nCamper Takes Medicine for Hyperactivity ................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nCamper Takes Medicine for Hyperactivity ................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nCamper Takes Medicine for Hyperactivity ................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #experience explanation
        curr.execute("SELECT Explanation FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nExplanation of Experiences ........................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nExplanation of Experiences ........................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Camper interests
        curr.execute("SELECT Camper_Interests FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nInterests of Camper ................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nInterests of Camper ................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Recent major events
        curr.execute("SELECT Recent_Major_Events FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nRecent Events for Camper .......................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nRecent Events for Camper .................................................................................................. Unanswered")
        label.pack(anchor = 'w')
    
#Medication Info
        #header
        labelFoodNeedsSection = Label(DemographicSectionframe, text = "\n\nMEDICATION INFORMATION")
        labelFoodNeedsSection.pack(fill = "x")
        labelFoodNeedsSection.config(font=("Helvetica", 20))

        #medications
        curr.execute("SELECT Medication FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        medArr = curr.fetchall()
        if medArr is not ():
            for med in medArr:

                #taken
                label = Label(DemographicSectionframe, text = "\nMedication Taken ....................................................................................................................... " + med[0])
                label.pack(anchor = 'w')

                #amount
                curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, med[0],))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "\nMedication Amount .................................................................................................................... " + val)
                else:
                    label = Label(DemographicSectionframe, text = "\nMedication Amount .................................................................................................................... Unanswered")
                label.pack(anchor = 'w')
                            
                #frequency
                curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, med[0],))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "\nMedication Frequency ................................................................................................................ " + val + "\n")
                else:
                    label = Label(DemographicSectionframe, text = "\nMedication Frequency .................................................................................................. Unanswered\n")
                label.pack(anchor = 'w')
        else:
            label = Label(DemographicSectionframe, text = "\nMedication Taken ....................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nMedication Amount .................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nMedication Frequency .................................................................................................. Unanswered")
            label.pack(anchor = 'w')

#Preliminary signatures
        #header
        labelSignatureSection = Label(DemographicSectionframe, text = "\n\nPARENTAL CONSENT INFORMATION")
        labelSignatureSection.pack(fill = "x")
        labelSignatureSection.config(font=("Helvetica", 20))

        #parent camper contract
        curr.execute("SELECT Parent_Camper_Contract FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nParent Camper Contract ............................................................................................................. Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nParent Camper Contract ............................................................................................................. No")
        else:
            label = Label(DemographicSectionframe, text = "\nParent Camper Contract ............................................................................................................. Unanswered")
        label.pack(anchor = 'w')
                    
        #participation release
        curr.execute("SELECT Partcipation_Consent_Liability_Release FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nParticipation Consent/Liability Release/Disputes Form Signed .................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nParticipation Consent/Liability Release/Disputes Form Signed .................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nParticipation Consent/Liability Release/Disputes Form Signed .................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #Media release
        curr.execute("SELECT Media_Release FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nMedia Release Form Signed ........................................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nMedia Release Form Signed ........................................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nMedia Release Form Signed ........................................................................................................ Unanswered")
        label.pack(anchor = 'w')
                    
        #hiv ed waiver
        curr.execute("SELECT Camper_HIV_Education FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nHIV Education Waiver Signed ...................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nHIV Education Waiver Signed ...................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nHIV Education Waiver Signed ...................................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #camp rules form signed
        curr.execute("SELECT Camp_Twin_Lakes_Rules FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nRules Acknowledgement Form Signed ......................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nRules Acknowledgement Form Signed ......................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nRules Acknowledgement Form Signed ......................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #parental consent and release
        curr.execute("SELECT Parental_Consent_And_Release FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nParental Consent and Release Form Signed ................................................................................. Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nParental Consent and Release Form Signed ................................................................................. No")
        else:
            label = Label(DemographicSectionframe, text = "\nParental Consent and Release Form Signed ................................................................................. Unanswered")
        label.pack(anchor = 'w')

#                  
#Medical provider sections
#

        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER SECTION")
        labelDemographicSection.pack(fill = "x")
        labelDemographicSection.config(font=("Helvetica", 25))

#medical history
        #header
        labelMedicalProviderSection = Label(DemographicSectionframe, text = "\n\nMEDICAL HISTORY")
        labelMedicalProviderSection.pack(fill = "x")
        labelMedicalProviderSection.config(font=("Helvetica", 20))

        #medical diagnosises
        curr.execute("SELECT Diagnosis FROM Med_Hist_Diagnosis WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        diagnosisArr = curr.fetchall()
        if diagnosisArr is not ():
            diganosisCount = 0
            for diagnosis in diagnosisArr:
                diganosisCount = 1 + diganosisCount
                label = Label(DemographicSectionframe, text = "\nMedical Diagnosis " + str(diganosisCount) + " ................................................................................................................... " + diagnosis[0])
                label.pack(anchor = 'w')        
        else:    
            label = Label(DemographicSectionframe, text = "\nMedical Diagnosis ...................................................................................................................... Unanswered")
            label.pack(anchor = 'w')

        #management
        curr.execute("SELECT Management FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMedical Management Comments ................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMedical Management Comments ................................................................................................ Unanswered")
        label.pack(anchor = 'w')
                    
        #nutritional supplements
        curr.execute("SELECT Nutritional_Supplements FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nNutritional Supplements Taken? ................................................................................................. Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nNutritional Supplements Taken? ................................................................................................. No")
        else:
            label = Label(DemographicSectionframe, text = "\nNutritional Supplements Taken? ................................................................................................. Unanswered")
        label.pack(anchor = 'w')
                    
        #supplement comment
        curr.execute("SELECT Feeding_Care FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFeeding Care Comments ............................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nFeeding Care Comments ............................................................................................................ Unanswered or Not Applicable")
        label.pack(anchor = 'w')
                    
        #formula type
        curr.execute("SELECT Formula_Type FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. Unanswered or Not Applicable")
        label.pack(anchor = 'w')

        #allergies
        curr.execute("SELECT Allergy FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        allergyArr = curr.fetchall()
        if allergyArr is not ():
            for allergy in allergyArr:

                #type
                curr.execute("SELECT Type FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s;", (id, date, allergy[0],))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "\n\nAllergy Type ............................................................................................................................... " + val)
                else:
                    label = Label(DemographicSectionframe, text = "\n\nAllergy Type ............................................................................................................................... Unanswered or Not Applicable")
                label.pack(anchor = 'w')

                #allergy
                label = Label(DemographicSectionframe, text = "\nAllergic to .................................................................................................................................. " + allergy[0])
                label.pack(anchor = 'w')

                #reaction
                curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s;", (id, date, allergy[0],))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "\nReaction .................................................................................................................................... " + val)
                else:
                    label = Label(DemographicSectionframe, text = "\nReaction .................................................................................................................................... Unanswered or Not Applicable")
                label.pack(anchor = 'w')
        else:
            label = Label(DemographicSectionframe, text = "\nAllergy Type ............................................................................................................................... Unanswered or Not Applicable")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nAllergic to .................................................................................................................................. Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nReaction .................................................................................................................................... Unanswered or Not Applicable")
            label.pack(anchor = 'w')

#physical
        #header
        labelPhysicalSection = Label(DemographicSectionframe, text = "\n\nMOST RECENT PHYSICAL INFORMATION")
        labelPhysicalSection.pack(fill = "x")
        labelPhysicalSection.config(font=("Helvetica", 20))

        #date completed
        curr.execute("SELECT Date_Completed FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDate Completed (YYY-MM-DD) ................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nDate Completed (YYY-MM-DD) ................................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #height
        curr.execute("SELECT Height FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nHeight ........................................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nHeight ........................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #weight
        curr.execute("SELECT Weight FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nWeight (lb) ................................................................................................................................. " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nWeight (lb) ................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #pulse
        curr.execute("SELECT Pulse FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPulse (bpm) ................................................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nPulse (bpm) ................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #respirations
        curr.execute("SELECT Resperations FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nRespirations ............................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nRespirations ............................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #bp
        curr.execute("SELECT Blood_Pressure FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nBlood Pressure ........................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nBlood Pressure ........................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #HEENT
        curr.execute("SELECT HEENT FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nHEENT ........................................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nHEENT ........................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #skin
        curr.execute("SELECT Skin FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nSkin ............................................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nSkin ............................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #cardio
        curr.execute("SELECT Cardiovascular FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nCardiovascular ........................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nCardiovascular ........................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #gu gyn
        curr.execute("SELECT GU_GYN FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nGU/GYN ...................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nGU/GYN ...................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #pulmonary
        curr.execute("SELECT Pulmonary FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPulmonary .................................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nPulmonary .................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #g ha
        curr.execute("SELECT Glasses_HearingAids_PE FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nGlasses/Contacts/Hearing Aids/PE tubes .................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nGlasses/Contacts/Hearing Aids/PE tubes .................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Abdomen
        curr.execute("SELECT Abdomen FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nAbdomen ................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nAbdomen ................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #LN
        curr.execute("SELECT Lymph_Nodes FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nLymph Nodes ............................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nLymph Nodes ............................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #Extremities
        curr.execute("SELECT Extremities FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nExtremities ................................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nExtremities ................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #spine
        curr.execute("SELECT Spine FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nSpine ......................................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nSpine ......................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Misc
        curr.execute("SELECT Miscellaneous FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMiscellaneous ............................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMiscellaneous ............................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #comm
        curr.execute("SELECT Comments FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nComments .................................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nComments .................................................................................................................................. Unanswered")
        label.pack(anchor = 'w')
                    
#cognative development level
        #header
        labelCogDevSection = Label(DemographicSectionframe, text = "\n\nCOGNITIVE DEVELOPMENT INFORMATION")
        labelCogDevSection.pack(fill = "x")
        labelCogDevSection.config(font=("Helvetica", 20))

        #development level
        curr.execute("SELECT Development_Level FROM Cognitive_Development_Level WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDevelopment Level ..................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nDevelopment Level ..................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #other info
        curr.execute("SELECT Other_Psychosocial_Information FROM Cognitive_Development_Level WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nOther Psychosocoal Information ................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nOther Psychosocoal Information ................................................................................................. Unanswered")
        label.pack(anchor = 'w')

#Varicella screening
        #header
        labelTuberculosisSection = Label(DemographicSectionframe, text = "\n\nVARICELLA SCREENING")
        labelTuberculosisSection.pack(fill = "x")
        labelTuberculosisSection.config(font=("Helvetica", 20))

        #Two_Doses
        curr.execute("SELECT Two_Doses FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nTwo doses of vaccine ................................................................................................................. Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nTwo doses of vaccine ................................................................................................................. No")
        else:
            label = Label(DemographicSectionframe, text = "\nTwo doses of vaccine ................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #Chicken_Pox
        curr.execute("SELECT Chicken_Pox FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nHistory of chicken pox or shingles? ............................................................................................ Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nHistory of chicken pox or shingles? ............................................................................................ No")
        else:
            label = Label(DemographicSectionframe, text = "\nHistory of chicken pox or shingles? ............................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Chicken_Pox_Date
        curr.execute("SELECT Chicken_Pox_Date FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nChicken pox/ shingles date (YYYY-MM-DD) ................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nChicken pox/ shingles date (YYYY-MM-DD) ................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Varicella_Antibody
        curr.execute("SELECT Varicella_Antibody FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nVaricella antibody ....................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nVaricella antibody ....................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nVaricella antibody ....................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Varicella_Antibody_Date
        curr.execute("SELECT Varicella_Antibody_Date FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nVaricella antibody date (YYYY-MM-DD) ...................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nVaricella antibody date (YYYY-MM-DD) ...................................................................................... Unanswered")
        label.pack(anchor = 'w')

#tuberculosis screening
        #header
        labelTuberculosisSection = Label(DemographicSectionframe, text = "\n\nTUBERCULOSIS SCREENING")
        labelTuberculosisSection.pack(fill = "x")
        labelTuberculosisSection.config(font=("Helvetica", 20))

        #Tuberculin Skin Test
        label = Label(DemographicSectionframe, text = "\nTuberculin Skin Test")
        label.pack(anchor = 'w')

        #date
        curr.execute("SELECT Date_Screened FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Tuberculin Skin Test';", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Result
        curr.execute("SELECT Result FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Tuberculin Skin Test';", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... Unanswered")
        label.pack(anchor = 'w')
 
        #Quantiferon Testing
        label = Label(DemographicSectionframe, text = "\nQuantiferon Testing")
        label.pack(anchor = 'w')

        #date
        curr.execute("SELECT Date_Screened FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Quantiferon Testing';", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Result
        curr.execute("SELECT Result FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Quantiferon Testing';", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... Unanswered")
        label.pack(anchor = 'w')
 
        #Chest X-ray
        label = Label(DemographicSectionframe, text = "\nChest X-ray")
        label.pack(anchor = 'w')

        #date
        curr.execute("SELECT Date_Screened FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Chest X-ray';", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #Result
        curr.execute("SELECT Result FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Chest X-ray';", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

#Restrictions_And_Recommendations
        #header
        labelTuberculosisSection = Label(DemographicSectionframe, text = "\n\nRESTRICTIONS AND RECOMMENDATIONS")
        labelTuberculosisSection.pack(fill = "x")
        labelTuberculosisSection.config(font=("Helvetica", 20))

        #Restrictions and recommendations
        curr.execute("SELECT Restrictions_And_Recommendations FROM Medical_Care_Provider WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nRestrictions and recommendations ............................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nRestrictions and recommendations ............................................................................................ Unanswered")
        label.pack(anchor = 'w')

#medcare provider medications
        #header
        labelMedicineProviderSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER MEDICATION INFORMATION")
        labelMedicineProviderSection.pack(fill = "x")
        labelMedicineProviderSection.config(font=("Helvetica", 20))

        #medications
        curr.execute("SELECT Medication_Name FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        nameArr = curr.fetchall()
        if nameArr is not ():
            count = len(nameArr)
            for medName in nameArr:
                count -= 1

                #medication
                label = Label(DemographicSectionframe, text = "\nMedication Name ....................................................................................................................... " + medName[0])
                label.pack(anchor = 'w')

                #amount
                curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, medName,))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "\nAmount and Dosage ................................................................................................................... " + val)
                else:
                    label = Label(DemographicSectionframe, text = "\nAmount and Dosage ................................................................................................................... Unanswered")
                label.pack(anchor = 'w')

                #times to give
                curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, medName,))
                val = curr.fetchall()[0][0]
                if val is not None:
                    label = Label(DemographicSectionframe, text = "\nTimes to Take Medicine .............................................................................................................. " + val)
                else:
                    label = Label(DemographicSectionframe, text = "\nTimes to Take Medicine .................................................................................................. Unanswered")
                label.pack(anchor = 'w')
                
                #spacing
                if count != 0:
                    label = Label(DemographicSectionframe).pack(anchor = 'w')
        else:
            label = Label(DemographicSectionframe, text = "\nMedication Name ....................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nAmount and Dosage ................................................................................................................... Unanswered")
            label.pack(anchor = 'w')
            label = Label(DemographicSectionframe, text = "\nTimes to Take Medicine .................................................................................................. Unanswered")
            label.pack(anchor = 'w')

#medcare provider verification statement
        #header
        labelMedicalStatementSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER VERIFICATION STATEMENT")
        labelMedicalStatementSection.pack(fill = "x")
        labelMedicalStatementSection.config(font=("Helvetica", 20))

        #signature
        curr.execute("SELECT Signature FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nSignature Provided? ................................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nSignature Provided? ................................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nSignature Provided? ................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #signature date
        curr.execute("SELECT Sig_Date FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDate (YYYY-MM-DD) .................................................................................................................. " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nDate (YYYY-MM-DD) .................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #name
        curr.execute("SELECT Name FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nExaminer Name .......................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nExaminer Name .......................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #address street
        curr.execute("SELECT Address_Street FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nAddress Street ........................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nAddress Street ........................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #address city
        curr.execute("SELECT Address_City FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nAddress City .............................................................................................................................. " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nAddress City .............................................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #address state
        curr.execute("SELECT Address_State FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nAddress State ............................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nAddress State ............................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #address zip
        curr.execute("SELECT Address_Zip FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nAddress Zipcode ........................................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nAddress Zipcode ........................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #phone
        curr.execute("SELECT Phone FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nPhone ........................................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nPhone ........................................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #emergency contact
        curr.execute("SELECT Emergency_Contact FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nEmergency Contact .................................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nEmergency Contact .................................................................................................. Unanswered")
        label.pack(anchor = 'w')

#
#hiv provider sections
#

        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nHIV PROVIDER SECTION")
        labelDemographicSection.pack(fill = "x")
        labelDemographicSection.config(font=("Helvetica", 25))

#health history
        #header
        labelHealthHistorySection = Label(DemographicSectionframe, text = "\n\nHEALTH HISTORY INFORMATION FROM HIV PROVIDER")
        labelHealthHistorySection.pack(fill = "x")
        labelHealthHistorySection.config(font=("Helvetica", 20))
        
        #surgical history
        curr.execute("SELECT Major_Surgical_History FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nMajor Surgical History ................................................................................................................ " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nMajor Surgical History ................................................................................................................ Unanswered")
        label.pack(anchor = 'w')
                    
        #health history
        curr.execute("SELECT Health_History FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        History = curr.fetchall()[0][0]
        curr.execute("SELECT Other FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        other = curr.fetchall()[0][0]
        if History is not None and other is not None:
            label = Label(DemographicSectionframe, text = "\nHealth History ............................................................................................................................ " + History + ": " + other)
        elif History is not None:
            label = Label(DemographicSectionframe, text = "\nHealth History ............................................................................................................................ " + History)
        else:
            label = Label(DemographicSectionframe, text = "\nHealth History ............................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #history of noncompliance
        curr.execute("SELECT History_of_Noncompliance FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(DemographicSectionframe, text = "\nHistory of Noncompliance? ......................................................................................................... Yes")
            else:
                label = Label(DemographicSectionframe, text = "\nHistory of Noncompliance? ......................................................................................................... No")
        else:
            label = Label(DemographicSectionframe, text = "\nHistory of Noncompliance? ......................................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #explanation
        curr.execute("SELECT Explanation FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nExplanation of Noncompliance .................................................................................................... " + val)
        else:
            label = Label(DemographicSectionframe, text = "\nExplanation of Noncompliance .................................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
#lab data
        #header
        labelHealthHistorySection = Label(DemographicSectionframe, text = "\n\nLAB DATA")
        labelHealthHistorySection.pack(fill = "x")
        labelHealthHistorySection.config(font=("Helvetica", 20))
        
        #lab1 date
        curr.execute("SELECT Lab1_Date FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDate of First Lab Examination (YYYY-MM-DD) ............................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nDate of First Lab Examination (YYYY-MM-DD) ............................................................................ Unanswered")
        label.pack(anchor = 'w')

        #lab1 wbc
        curr.execute("SELECT Lab1_WBC FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "White Blood Cell Count .............................................................................................................. " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "White Blood Cell Count .............................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #lab1 hgb
        curr.execute("SELECT Lab1_HGB FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Hemoglobin Level ....................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Hemoglobin Level ....................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #lab1 hct
        curr.execute("SELECT Lab1_HCT FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Hematocrit Level ........................................................................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Hematocrit Level ........................................................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #lab1 plt
        curr.execute("SELECT Lab1_Plt_Count FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Plt Count .................................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Plt Count .................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #spacing
        label = Label(DemographicSectionframe).pack(anchor = 'w')

        #lab2 date
        curr.execute("SELECT Lab2_Date FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDate of Second Lab Examination (YYYY-MM-DD) ........................................................................ " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nDate of Second Lab Examination (YYYY-MM-DD) ........................................................................ Unanswered")
        label.pack(anchor = 'w')

        #lab2 cd4
        curr.execute("SELECT Lab2_CD4_Count FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #lab2 viral load
        curr.execute("SELECT Lab2_Viral_Load FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #spacing
        label = Label(DemographicSectionframe).pack(anchor = 'w')

        #lab3 date
        curr.execute("SELECT Lab3_Date FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "\nDate of Third Lab Examination (YYYY-MM-DD) ........................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "\nDate of Third Lab Examination (YYYY-MM-DD) ........................................................................... Unanswered")
        label.pack(anchor = 'w')

        #lab3 cd4
        curr.execute("SELECT Lab3_CD4_Count FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #lab3 viral load
        curr.execute("SELECT Lab3_Viral_Load FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... " + str(val))
        else:
            label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... Unanswered")
        label.pack(anchor = 'w')



#Close Database Connection
        self.disConnect(curr, db)


#******************************************************************************************************************************************************


    def SecondChildProfilePage(self, id, date):

        #setup
        self.SecondChildProfilePageRoot = Toplevel()
        root = self.SecondChildProfilePageRoot
        if self.PrevPage is 'FirstProfilePage':
            self.FirstProfilePageRoot.withdraw()
        elif self.PrevPage is 'EditChildProfilePage':
            self.EditChildProfilePageRoot.withdraw()
        self.PrevPage = 'SecondChildProfilePage'
        root.title("Second Level Profile Page")

        self.canvas = Canvas(root)
        master = Frame(self.canvas)

        scrollbarY = Scrollbar(root, orient = "vertical", command = self.canvas.yview)
        scrollbarY.pack(side = RIGHT, fill = Y)
        scrollbarX = Scrollbar(root, orient = "horizontal", command = self.canvas.xview)
        scrollbarX.pack(side = BOTTOM, fill = X)

        self.canvas.configure(xscrollcommand = scrollbarX.set, yscrollcommand = scrollbarY.set)
        self.canvas.pack(side = "left", fill = "both", expand = True)
        self.canvas.create_window((4,4), window = master, anchor="nw", 
                                  tags="master")

        master.bind("<Configure>", self.onFrameConfigure)
        root.geometry("740x1000")


        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Buttons
        #back button frame + back button
        buttonframe = Frame(master)
        buttonframe.pack(side = "top", fill = "x")

        #fix alignment
        backButton = Button(buttonframe, text = "Back", command = lambda: self.FirstProfilePage(id))
        backButton.pack(side = "left")

        exitButton = Button(buttonframe, text = "Exit", command=lambda: self.exit())
        exitButton.pack(side = "left")

        #edit
        editButton = Button(buttonframe, text = "Edit Application", command = lambda: self.EditChildProfilePage(id, date))
        editButton.pack(side = "right")

        #delete
        deleteButton = Button(buttonframe, text = "Delete Application", command = lambda: self.deleteChildApp(id, date))
        deleteButton.pack(side = "right")

#Database dump frame
        ChildInfoSectionframe = Frame(master)
        ChildInfoSectionframe.pack(fill = 'y', side = 'left') 

#Identifying Info Section
        #header
        labelIdentifyingInfoSection = Label(ChildInfoSectionframe, text = "\nIDENTIFYING INFORMATION")
        labelIdentifyingInfoSection.pack(fill = "x")
        labelIdentifyingInfoSection.config(font=("Helvetica", 20))

        #id
        label = Label(ChildInfoSectionframe, text = "\nChild ID.................................................................................................. " + str(id))
        label.pack(anchor = 'w')

        #date
        label = Label(ChildInfoSectionframe, text = "\nDate Submitted...................................................................................... " + str(date))
        label.pack(anchor = 'w')

#childs information section
        #header
        labelChildInfoSection = Label(ChildInfoSectionframe, text = "\nCHILD'S INFORMATION")
        labelChildInfoSection.pack(fill = "x")
        labelChildInfoSection.config(font=("Helvetica", 20))

        #first name
        curr.execute("SELECT Name_First FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ Unanswered")
        label.pack(anchor = 'w')

        #last name
        curr.execute("SELECT Name_Last FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nLast Name  ............................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #nickname
        curr.execute("SELECT Name_Nickname FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nNickname .............................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nNickname .............................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #address street
        curr.execute("SELECT Address_Street FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #address city
        curr.execute("SELECT Address_City FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #address county
        curr.execute("SELECT Address_County FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. Unanswered")
        label.pack(anchor = 'w')
                
        #address zip
        curr.execute("SELECT Address_Zip FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #home phone
        curr.execute("SELECT Home_Phone FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHome Phone .......................................................................................... " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nHome Phone .......................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #guardian phone
        curr.execute("SELECT Guardian_Phone FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's Cell Phone ................................................................ " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's Cell Phone ................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #guardian email
        curr.execute("SELECT Guardian_Email FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's e-mail address .......................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's e-mail address .......................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #age
        curr.execute("SELECT Age FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... Unanswered")
        label.pack(anchor = 'w')
                
        #birthday
        curr.execute("SELECT Birthday FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ................................................................ " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #gender
        curr.execute("SELECT Gender FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nGender .................................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nGender .................................................................................................. Unanswered")
        label.pack(anchor = 'w')

        #HIV status
        curr.execute("SELECT HIV_Status FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHIV status ............................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nHIV status ............................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #aware
        label = Label(ChildInfoSectionframe, text = '\nIs the child aware that he/she is HIV positive or')
        label.pack(anchor = 'w')
        curr.execute("SELECT Aware FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'that a member of the household is HIV positive? ................................... Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'that a member of the household is HIV positive? ................................... No')
        else:
            label = Label(ChildInfoSectionframe, text = 'that a member of the household is HIV positive? ................................... Unanswered')
        label.pack(anchor = 'w')
        
        #why
        label = Label(ChildInfoSectionframe, text = "\nIf no,")
        label.pack(anchor = 'w')
        curr.execute("SELECT Why FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "please provide a reason why child is not aware ...................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "please provide a reason why child is not aware ...................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Referral source
        curr.execute("SELECT Referral_Source FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nReferral Source ..................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nReferral Source ..................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #school attending
        curr.execute("SELECT School_attending FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nSchool Attending .................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nSchool Attending .................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Grade Level
        curr.execute("SELECT School_grade_level FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nGrade Level ........................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nGrade Level ........................................................................................... Unanswered")
        label.pack(anchor = 'w')

        #Ethnicity
        curr.execute("SELECT Ethnicity_Other FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        ethnicityOther = curr.fetchall()[0][0]
        if ethnicityOther is not None:
            label = Label(ChildInfoSectionframe, text = "\nEthnicity ............................................................................................... " + ethnicityOther)
        else:
            curr.execute("SELECT Ethnicity FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            ethnicity = curr.fetchall()[0][0]
            if ethnicity is not None:
                label = Label(ChildInfoSectionframe, text = "\nEthnicity ............................................................................................... " + ethnicity)
            else:
                label = Label(ChildInfoSectionframe, text = "\nEthnicity ............................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Even been...
        label = Label(ChildInfoSectionframe, text = "\nHas your child ever been...")
        label.pack(anchor = 'w')

        #ADD_ADHD
        curr.execute("SELECT ADD_ADHD FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with ADD/ADHD? ................................................................. Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with ADD/ADHD? ................................................................. No')
        else:
            label = Label(ChildInfoSectionframe, text = 'Diagnosed with ADD/ADHD? ................................................................. Unanswered')
        label.pack(anchor = 'w')
        
        #Learning_Disability
        curr.execute("SELECT Learning_Disability FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with a learning disability? .................................................... Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with a learning disability? .................................................... No')
        else:
            label = Label(ChildInfoSectionframe, text = 'Diagnosed with a learning disability? .................................................... Unanswered')
        label.pack(anchor = 'w')
        
        #Developmental_Disability
        curr.execute("SELECT Developmental_Disability FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with a developmental disability? .......................................... Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with a developmental disability? .......................................... No')
        else:
            label = Label(ChildInfoSectionframe, text = 'Diagnosed with a developmental disability? .......................................... Unanswered')
        label.pack(anchor = 'w')
        
        #Mental_Health_Issues
        curr.execute("SELECT Mental_Health_Issues FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with any mental health issues? ............................................. Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed with any mental health issues? ............................................. No')
        else:
            label = Label(ChildInfoSectionframe, text = 'Diagnosed with any mental health issues? ............................................. Unanswered')
        label.pack(anchor = 'w')
        
        #Other_Medical_Condition
        curr.execute("SELECT Other_Medical_Condition FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed or suffered from any other medical condition? ..................... Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'Diagnosed or suffered from any other medical condition? ..................... No')
        else:
            label = Label(ChildInfoSectionframe, text = 'Diagnosed or suffered from any other medical condition? ..................... Unanswered')
        label.pack(anchor = 'w')
        
        #Victim_of_Abuse
        curr.execute("SELECT Victim_of_Abuse FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'A victim of sexual abuse, physical or emotional abuse? ......................... Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'A victim of sexual abuse, physical or emotional abuse? ......................... No')
        else:
            label = Label(ChildInfoSectionframe, text = 'A victim of sexual abuse, physical or emotional abuse? ......................... Unanswered')
        label.pack(anchor = 'w')
        
        #Criminal_Justice_System
        curr.execute("SELECT Criminal_Justice_System FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = 'Part of the criminal justice system? ...................................................... Yes')
            else:
                label = Label(ChildInfoSectionframe, text = 'Part of the criminal justice system? ...................................................... No')
        else:
            label = Label(ChildInfoSectionframe, text = 'Part of the criminal justice system? ...................................................... Unanswered')
        label.pack(anchor = 'w')
        
        #Custody
        curr.execute("SELECT Custody_Other FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        custodyOther = curr.fetchall()[0][0]
        if custodyOther is not None:
            label = Label(ChildInfoSectionframe, text = "\nWho has legal custody of the child? ...................................................... " + custodyOther)
        else:
            curr.execute("SELECT Legal_Custody FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            custody = curr.fetchall()[0][0]
            if custody is not None:
                label = Label(ChildInfoSectionframe, text = "\nWho has legal custody of the child? ...................................................... " + custody)
            else:
                label = Label(ChildInfoSectionframe, text = "\nWho has legal custody of the child? ...................................................... Unanswered")
        label.pack(anchor = 'w')

#Parent/ Guardian Section
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nPARENT/GUARDIAN INFORMATION")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))

        #First Name
        curr.execute("SELECT Name_First FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #Last Name
        curr.execute("SELECT Name_Last FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................ " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #Relationship to child
        curr.execute("SELECT Relationship_to_Child FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nRelationship to child ............................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nRelationship to child ............................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Age
        curr.execute("SELECT Age FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #HIV Status
        curr.execute("SELECT HIV_Status FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHIV Status ............................................................................................ " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nHIV Status ............................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #Adoptive Parent
        curr.execute("SELECT Adoptive_Parent FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nAdoptive Parent ..................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nAdoptive Parent ..................................................................................... Unanswered")
        label.pack(anchor = 'w')
                
        #Marital Status
        curr.execute("SELECT Marital_Status FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nMarital Status ...................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nMarital Status ...................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Highest Level of Education Completed
        curr.execute("SELECT Education_Completed FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHighest Level of Education Completed .................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nHighest Level of Education Completed .................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Employment Status
        curr.execute("SELECT Employment_Status FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nEmployment Status ............................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nEmployment Status ............................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Employment Company
        label = Label(ChildInfoSectionframe, text = "\nIf employed,")
        label.pack(anchor = 'w')
        
        curr.execute("SELECT Employment_Company_Name FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "please provide Company Name ............................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "please provide Company Name ............................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Address
        curr.execute("SELECT Address_Street FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nAddress ................................................................................................ " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nAddress ................................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #City
        curr.execute("SELECT Address_City FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #State
        curr.execute("SELECT Address_State FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nState .................................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nState .................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #Zip
        curr.execute("SELECT Address_Zip FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ Unanswered")
        label.pack(anchor = 'w')
        
        #Work Phone
        curr.execute("SELECT WorkPhone FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nWork Phone .......................................................................................... " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nWork Phone .......................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #E-mail
        curr.execute("SELECT Email FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nE-mail ................................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nE-mail ................................................................................................... Unanswered")
        label.pack(anchor = 'w')

#Absent Parent Info
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nABSENT PARENT INFORMATION")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))

        #First Name
        curr.execute("SELECT Name_First FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Last Name
        curr.execute("SELECT Name_Last FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Telephone
        curr.execute("SELECT Telephone FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nTelephone .............................................................................................. " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nTelephone .............................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Home Address
        curr.execute("SELECT Address_Street FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #City
        curr.execute("SELECT Address_City FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #County
        curr.execute("SELECT Address_County FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. Unanswered")
        label.pack(anchor = 'w')
        
        #Zip
        curr.execute("SELECT Address_Zip FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nZip ......................................................................................................... " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nZip ......................................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #HIV Status
        curr.execute("SELECT HIV_Status FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHIV Status ............................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nHIV Status ............................................................................................. Unanswered")
        label.pack(anchor = 'w')

#Household Info
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nHOUSEHOLD INFORMATION")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))

        #list all individuals living in the household
        label = Label(ChildInfoSectionframe, text = "\nAll Individuals Living in the Household")
        label.pack(anchor = 'w')

        curr.execute("SELECT Count FROM Household_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        countArr = curr.fetchall()
        for count in countArr:
            #Name
            curr.execute("SELECT Name FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, count[0]))
            val = curr.fetchall()[0][0]
            if val is not None:
                label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... " + val)
            else:
                label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... Unanswered")
            label.pack(anchor = 'w')
                    
            #Relationship to Child
            curr.execute("SELECT Relationship FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, count[0]))
            val = curr.fetchall()[0][0]
            if val is not None:
                label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. " + val)
            else:
                label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. Unanswered")
            label.pack(anchor = 'w')
                                
            #Sex
            curr.execute("SELECT Sex FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, count[0]))
            val = curr.fetchall()[0][0]
            if val is not None:
                label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... " + val)
            else:
                label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... Unanswered")
            label.pack(anchor = 'w')
                                
            #Age
            curr.execute("SELECT Age FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, count[0]))
            val = curr.fetchall()[0][0]
            if val is not None:
                label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... " + str(val))
            else:
                label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... Unanswered")
            label.pack(anchor = 'w')
                    
            #HIV Status
            curr.execute("SELECT HIV_Status FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, count[0]))
            val = curr.fetchall()[0][0]
            if val is not None:
                label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ " + str(val) + "\n")
            else:
                label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ Unanswered\n")
            label.pack(anchor = 'w')
                    
        #Family Annual Income Info
        curr.execute("SELECT Fam_Annual_Income FROM Fam_Annual_Income WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nFamily Annual Income Information ......................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nFamily Annual Income Information ......................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #Source of Family Income
        curr.execute("SELECT Other FROM Source_Fam_Income WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        sourceOther = curr.fetchall()[0][0]
        if sourceOther is not None:
            label = Label(ChildInfoSectionframe, text = "\nSource of Family Income ....................................................................... " + sourceOther)
        else:
            curr.execute("SELECT Source_Fam_Income FROM Source_Fam_Income WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            source = curr.fetchall()[0][0]
            if source is not None:
                label = Label(ChildInfoSectionframe, text = "\nSource of Family Income ....................................................................... " + source)
            else:
                label = Label(ChildInfoSectionframe, text = "\nSource of Family Income ....................................................................... Unanswered")
        label.pack(anchor = 'w')

 #In Case of Emergency Contact
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nIN CASE OF EMERGENCY CONTACT")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))

        #First Name
        curr.execute("SELECT Name_First FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................. Unanswered")
        label.pack(anchor = 'w')
                    
        #Last Name
        curr.execute("SELECT Name_Last FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................ " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................ Unanswered")
        label.pack(anchor = 'w')
                    
        #Relationship to Child
        curr.execute("SELECT Relationship_to_Child FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nRelationship to Child ............................................................................. " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nRelationship to Child ............................................................................. Unanswered")
        label.pack(anchor = 'w')
                    
        #Home Address
        curr.execute("SELECT Address_Street FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #City
        curr.execute("SELECT Address_City FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #State
        curr.execute("SELECT Address_State FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nState ..................................................................................................... " + val)
        else:
            label = Label(ChildInfoSectionframe, text = "\nState ..................................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #Zip
        curr.execute("SELECT Address_Zip FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ Unanswered")
        label.pack(anchor = 'w')
                    
        #Home Phone Number
        curr.execute("SELECT Phone_Home FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nHome Phone Number ............................................................................. " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nHome Phone Number ............................................................................. Unanswered")
        label.pack(anchor = 'w')
                    
        #Cell Phone Number
        curr.execute("SELECT Phone_Cell FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nCell Phone Number ............................................................................... " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nCell Phone Number ............................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #Alternate Phone Number
        curr.execute("SELECT Phone_Alt FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            label = Label(ChildInfoSectionframe, text = "\nAlternate Phone Number ....................................................................... " + str(val))
        else:
            label = Label(ChildInfoSectionframe, text = "\nAlternate Phone Number ....................................................................... Unanswered")
        label.pack(anchor = 'w')

#H.E.R.O. Programs
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nH.E.R.O. FOR CHILDREN PROGRAMS")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))

        #Program(s) you wish your child to participate in
        curr.execute("SELECT HERO_Programs FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        var = curr.fetchall()[0][0]
        if var is not None:
            label = Label(ChildInfoSectionframe, text = "\nProgram(s) you wish your child to participate in .................................... " + var)
        else:
            label = Label(ChildInfoSectionframe, text = "\nProgram(s) you wish your child to participate in .................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #Program(s) you would be interested in your child to participating in
        curr.execute("SELECT Future_Programs FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        programs = curr.fetchall()[0][0]
        curr.execute("SELECT Future_Other FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        otherPrograms = curr.fetchall()[0][0]
        if programs is not None and otherPrograms is not None:
            label = Label(ChildInfoSectionframe, text = "\nProgram(s) you would be interested in your child to participating in ...... " + programs + ": " + otherPrograms)
        elif programs is not None:
            label = Label(ChildInfoSectionframe, text = "\nProgram(s) you would be interested in your child to participating in ...... " + programs)
        else:
            label = Label(ChildInfoSectionframe, text = "\nProgram(s) you would be interested in your child to participating in ...... Unanswered")
        label.pack(anchor = 'w')

#Referral Needs
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nREFERRAL NEEDS")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))

        #Needs
        curr.execute("SELECT Referral FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        Referral = curr.fetchall()[0][0]
        curr.execute("SELECT Referral_Other FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        otherReferral = curr.fetchall()[0][0]
        if Referral is not None and otherReferral is not None:
            label = Label(ChildInfoSectionframe, text = "\nReferral Needs ....................................................................................... " + Referral + ": " + otherReferral)
        elif Referral is not None:
            label = Label(ChildInfoSectionframe, text = "\nReferral Needs ....................................................................................... " + Referral)
        else:
            label = Label(ChildInfoSectionframe, text = "\nReferral Needs ........................................................................................ Unanswered")
        label.pack(anchor = 'w')

#Statement of Understanding
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nSTATEMENT OF UNDERSTANDING")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))
        
        #one
        curr.execute("SELECT Statement_One FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "Statement 1 ........................................................................................... Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "Statement 1 ........................................................................................... Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "Statement 1 ........................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #two
        curr.execute("SELECT Statement_Two FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "Statement 2 .......................................................................................... Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "Statement 2 .......................................................................................... Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "Statement 2 .......................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #three
        curr.execute("SELECT Statement_Three FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "Statement 3 .......................................................................................... Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "Statement 3 .......................................................................................... Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "Statement 3 .......................................................................................... Unanswered")
        label.pack(anchor = 'w')
                    
        #four
        curr.execute("SELECT Statement_Four FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "Statement 4 .......................................................................................... Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "Statement 4 .......................................................................................... Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "Statement 4 .......................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #five
        curr.execute("SELECT Statement_Five FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "Statement 5 .......................................................................................... Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "Statement 5 .......................................................................................... Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "Statement 5 .......................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #six
        curr.execute("SELECT Statement_Six FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "Statement 6 .......................................................................................... Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "Statement 6 .......................................................................................... Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "Statement 6 .......................................................................................... Unanswered")
        label.pack(anchor = 'w')
        
        #seven
        curr.execute("SELECT Statement_Seven FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "Statement 7 .......................................................................................... Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "Statement 7 .......................................................................................... Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "Statement 7 .......................................................................................... Unanswered")
        label.pack(anchor = 'w')

#Signature
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nSIGNATURE")
        labelParentInfoSection.pack(fill = "x")
        labelParentInfoSection.config(font=("Helvetica", 20))

        #signature completed
        curr.execute("SELECT Signature FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        if val is not None:
            if val:
                label = Label(ChildInfoSectionframe, text = "\nSignature .............................................................................................. Signed")
            else:
                label = Label(ChildInfoSectionframe, text = "\nSignature .............................................................................................. Unsigned")
        else:
            label = Label(ChildInfoSectionframe, text = "\nSignature .............................................................................................. Unanswered")
        label.pack(anchor = 'w')

#Close Database Connection
        self.disConnect(curr, db)

#******************************************************************************************************************************************************

    def EditCampProfilePage(self, id, date):

        #setup
        self.EditCampProfilePageRoot = Toplevel()
        root = self.EditCampProfilePageRoot
        if self.PrevPage is 'SecondCampProfilePage':
            self.SecondCampProfilePageRoot.withdraw()
        elif self.PrevPage is 'EditCampProfilePageTwo':
            self.EditCampProfilePageTwoRoot.withdraw()
        self.PrevPage = 'EditCampProfilePage'
        root.title("Edit Camp Profile Page")

        self.canvas = Canvas(root)
        master = Frame(self.canvas)

        scrollbarY = Scrollbar(root, orient = "vertical", command = self.canvas.yview)
        scrollbarY.pack(side = RIGHT, fill = Y)
        scrollbarX = Scrollbar(root, orient = "horizontal", command = self.canvas.xview)
        scrollbarX.pack(side = BOTTOM, fill = X)

        self.canvas.configure(xscrollcommand = scrollbarX.set, yscrollcommand = scrollbarY.set)
        self.canvas.pack(side = "left", fill = "both", expand = True)
        self.canvas.create_window((4,4), window = master, anchor="nw", 
                                  tags="master")

        master.bind("<Configure>", self.onFrameConfigure)
        root.geometry("1000x1000")

        #Database Connection
        db = self.connect()
        curr = db.cursor()

#Buttons
        #frame
        buttonframe = Frame(master)
        buttonframe.pack(side = "top", fill = "x")

        #back
        backButton = Button(buttonframe, text = "Back", command = lambda:self.SecondCampProfilePage(id, date))
        backButton.pack(side = "left")

        exitButton = Button(buttonframe, text = "Exit", command=lambda: self.exit())
        exitButton.pack(side = "left")

        #delete
        deleteButton = Button(buttonframe, text = "Delete Application", command = lambda:self.deleteCampApp(id, date))
        deleteButton.pack(side = "right")

        #next
        nextButton = Button(buttonframe, text = "Next Page", command = lambda:self.EditCampProfilePageTwo(id, date))
        nextButton.pack(side = "right")

#Database dump frame
        DemographicSectionframe = Frame(master)
        DemographicSectionframe.pack(fill = 'y', side = 'left') 
        r = 0

#
#parent sections
#
        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nPARENT SECTION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 25))
        r=r+1

#Demographic info section ************************************************************************************************************************
        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nDEMOGRAPHIC INFORMATION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 20))

        #first name
        curr.execute("SELECT First_Name FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFirst Name ................................................................................................................................. ")
        demInfo0 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo0.insert(0, val)
        else:
            demInfo0.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo0(demInfo0, id, date, demInfo5))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        curr.execute("SELECT Last_Name FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nLast Name ................................................................................................................................. ")
        demInfo1 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo1.insert(0, val)
        else:
            demInfo1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo1(demInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #middle initial
        curr.execute("SELECT Middle_Initial FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMiddle Initial .............................................................................................................................. ")
        demInfo2 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo2.insert(0, val)
        else:
            demInfo2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo2(demInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #age
        curr.execute("SELECT Age FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nAge ............................................................................................................................................ ")
        demInfo3 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo3.insert(0, val)
        else:
            demInfo3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo3(demInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Date of Birth
        curr.execute("SELECT Date_Of_Birth FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ..................................................................................................... ")
        demInfo4 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo4.insert(0, val)
        else:
            demInfo4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo4(demInfo4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #gender
        label = Label(DemographicSectionframe, text = "\nGender ...................................................................................................................................... ")

        curr.execute("SELECT Gender FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        demInfo5 = StringVar()

        choices = ['Male', 'Female']
        option = tk.OptionMenu(DemographicSectionframe, demInfo5, *choices)        
        
        if val is not None:
            demInfo5.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo5(demInfo5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #race
        curr.execute("SELECT Race FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nRace .......................................................................................................................................... ")
        demInfo6 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo6.insert(0, val)
        else:
            demInfo6.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo6(demInfo6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #primary language
        curr.execute("SELECT Primary_Language FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nPrimary Language ...................................................................................................................... ")
        demInfo7 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo7.insert(0, val)
        else:
            demInfo7.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo7(demInfo7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address street
        curr.execute("SELECT Address_Street FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nStreet Address ........................................................................................................................... ")
        demInfo8 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo8.insert(0, val)
        else:
            demInfo8.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo8(demInfo8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address city
        curr.execute("SELECT Address_City FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nCity ........................................................................................................................................... ")
        demInfo9 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo9.insert(0, val)
        else:
            demInfo9.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo9(demInfo9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address state
        curr.execute("SELECT Address_State FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nState ......................................................................................................................................... ")
        demInfo10 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo10.insert(0, val)
        else:
            demInfo10.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo10(demInfo10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address county
        curr.execute("SELECT Address_County FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nCounty ...................................................................................................................................... ")
        demInfo11 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo11.insert(0, val)
        else:
            demInfo11.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo11(demInfo11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address zip
        curr.execute("SELECT Address_Zip FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nZip ............................................................................................................................................ ")
        demInfo12 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo12.insert(0, val)
        else:
            demInfo12.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo12(demInfo12, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #camper email
        curr.execute("SELECT Camper_Email FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nCamper Email ............................................................................................................................ ")
        demInfo13 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo13.insert(0, val)
        else:
            demInfo13.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo13(demInfo13, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #parent email
        curr.execute("SELECT Parent_Email FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nParent Email .............................................................................................................................. ")
        demInfo14 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo14.insert(0, val)
        else:
            demInfo14.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo14(demInfo14, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo14.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #g name
        curr.execute("SELECT Guardian_Name FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nGuardian Name .......................................................................................................................... ")
        demInfo15 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo15.insert(0, val)
        else:
            demInfo15.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo15(demInfo15, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #relationship
        curr.execute("SELECT Guardian_Camper_Relationship FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nGuardian Camper Relationship ................................................................................................... ")
        demInfo16 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo16.insert(0, val)
        else:
            demInfo16.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo16(demInfo16, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo16.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last grade
        curr.execute("SELECT Last_Grade_Completed FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nLast Grade Completed ............................................................................................................... ")
        demInfo17 = Entry(DemographicSectionframe)

        if val is not None:
            demInfo17.insert(0, val)
        else:
            demInfo17.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo17(demInfo17, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demInfo17.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #sped classes
        curr.execute("SELECT Special_Ed_Classes FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nSpecial Ed Classes? ................................................................................................................... ")
        demInfo18 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = demInfo18, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = demInfo18, value=2)

        if val is not None:
            if val is 0:
                demInfo18.set(2)
            else:
                demInfo18.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo18(demInfo18, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #siblings applying
        curr.execute("SELECT Siblings_Applying FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nSiblings Apllying? ..................................................................................................................... ")
        demInfo19 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = demInfo19, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = demInfo19, value=2)

        if val is not None:
            if val is 0:
                demInfo19.set(2)
            else:
                demInfo19.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo19(demInfo19, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #tshirt
        label = Label(DemographicSectionframe, text = "\nT-Shirt Size ............................................................................................................................... ")

        curr.execute("SELECT T_Shirt FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        demInfo20 = StringVar()
        
        choices = ['Youth S','Youth M','Youth L','Adult S','Adult M','Adult L','Adult XL','Adult XXL']
        option = tk.OptionMenu(DemographicSectionframe, demInfo20, *choices)

        if val is not None:
            demInfo20.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo20(demInfo20, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #planned trans
        label = Label(DemographicSectionframe, text = "\nPlanned Transportation ............................................................................................................. ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDemInfo21(demTrans0, demTrans1, demTrans2, demTrans3,
            demTrans4, demTrans5, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Planned_Transportation FROM Demographic_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        #Atlanta
        demTrans0 = IntVar()
        Checkbutton(DemographicSectionframe, text="Atlanta Bus", variable = demTrans0).grid(row = r,  column = 1, sticky = W)

        #Augusta
        demTrans1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Augusta Bus", variable = demTrans1).grid(row = r,  column = 1, sticky = W)
        
        #Albany
        demTrans2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Albany Bus", variable = demTrans2).grid(row = r,  column = 1, sticky = W)
        
        #Athens
        demTrans3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Athens Bus", variable = demTrans3).grid(row = r,  column = 1, sticky = W)
        
        #Savannah
        demTrans4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Savannah Bus", variable = demTrans4).grid(row = r,  column = 1, sticky = W)
        
        #Car
        demTrans5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Car/Drop off", variable = demTrans5).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'Atlanta bus' in val:
                demTrans0.set(1)
            if 'Augusta bus' in val:
                demTrans1.set(1)
            if 'Albany bus' in val:
                demTrans2.set(1)
            if 'Athens bus' in val:
                demTrans3.set(1)
            if 'Savannah bus' in val:
                demTrans4.set(1)
            if 'Car/drop' in val:
                demTrans5.set(1)

#demographic contacts ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nCONTACT INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #CELL
        #type
        label = Label(DemographicSectionframe, text = "\nCell Number")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #Name
        curr.execute("SELECT Name FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ ")
        demContactInfo10 = Entry(DemographicSectionframe)

        if val is not None:
            demContactInfo10.insert(0, val)
        else:
            demContactInfo10.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo10(demContactInfo10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demContactInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #time pref
        label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo11(demContactInfoTime10, demContactInfoTime11, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Time_Preference FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
        val = curr.fetchall()[0][0]

        #Day
        demContactInfoTime10 = IntVar()
        Checkbutton(DemographicSectionframe, text="Day", variable = demContactInfoTime10).grid(row = r,  column = 1, sticky = W)

        #Evening
        demContactInfoTime11 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Evening", variable = demContactInfoTime11).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'Day' in val:
                demContactInfoTime10.set(1)

            if 'Evening' in val:
                demContactInfoTime11.set(1)

        #phone number
        curr.execute("SELECT Phone_Number FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ ")
        demContactInfo11 = Entry(DemographicSectionframe)

        if val is not None:
            demContactInfo11.insert(0, val)
        else:
            demContactInfo11.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo12(demContactInfo11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demContactInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HOME
        #type
        label = Label(DemographicSectionframe, text = "\nHome Number")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #Name
        curr.execute("SELECT Name FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (id, date,))
        val = curr.fetchall()

        label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ ")
        demContactInfo20 = Entry(DemographicSectionframe)

        if val is not None:
            demContactInfo20.insert(0, val)
        else:
            demContactInfo20.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo20(demContactInfo20, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demContactInfo20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #time pref
        label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo21(demContactInfoTime20, demContactInfoTime21, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Time_Preference FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (id, date,))
        val = curr.fetchall()[0][0]

        #Day
        demContactInfoTime20 = IntVar()
        Checkbutton(DemographicSectionframe, text="Day", variable = demContactInfoTime20).grid(row = r,  column = 1, sticky = W)

        #Evening
        demContactInfoTime21 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Evening", variable = demContactInfoTime21).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'Day' in val:
                demContactInfoTime20.set(1)

            if 'Evening' in val:
                demContactInfoTime21.set(1)

        #phone number
        curr.execute("SELECT Phone_Number FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ ")
        demContactInfo21 = Entry(DemographicSectionframe)

        if val is not None:
            demContactInfo21.insert(0, val)
        else:
            demContactInfo21.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo22(demContactInfo21, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demContactInfo21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #WORK
        #type
        label = Label(DemographicSectionframe, text = "\nWork Number")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #Name
        curr.execute("SELECT Name FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Contact Name ............................................................................................................................ ")
        demContactInfo30 = Entry(DemographicSectionframe)

        if val is not None:
            demContactInfo30.insert(0, val)
        else:
            demContactInfo30.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo30(demContactInfo30, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demContactInfo30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #time pref
        label = Label(DemographicSectionframe, text = "Time Preference ......................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo31(demContactInfoTime30, demContactInfoTime31, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Time_Preference FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (id, date,))
        val = curr.fetchall()[0][0]

        #Day
        demContactInfoTime30 = IntVar()
        Checkbutton(DemographicSectionframe, text="Day", variable = demContactInfoTime30).grid(row = r,  column = 1, sticky = W)

        #Evening
        demContactInfoTime31 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Evening", variable = demContactInfoTime31).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'Day' in val:
                demContactInfoTime30.set(1)

            if 'Evening' in val:
                demContactInfoTime31.set(1)

        #phone number
        curr.execute("SELECT Phone_Number FROM Demographic_Contacts WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Phone Number ............................................................................................................................ ")
        demContactInfo31 = Entry(DemographicSectionframe)

        if val is not None:
            demContactInfo31.insert(0, val)
        else:
            demContactInfo31.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateContactDemInfo32(demContactInfo31, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        demContactInfo31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Parent/ Guardian Emergency Contact Section ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nEMERGENCY CONTACT INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #contacts
        curr.execute("SELECT Name FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        
        if emergencyContacts is ():
            emergencyContacts = []

        if len(emergencyContacts) > 0:        
            
            #Name
            label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 1 ....................................................................................................... ")
            emergencyInfo10 = Entry(DemographicSectionframe)

            emergencyInfo10.insert(0, emergencyContacts[0][0])
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo0(emergencyInfo10, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo10.grid(row = r, column = 1)
            label.grid(row = r, column = 0)


            #Relationship
            curr.execute("SELECT Relationship FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, emergencyContacts[0][0]))
            val = curr.fetchall()[0][0]

            label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. ")
            emergencyInfo11 = Entry(DemographicSectionframe)

            if val is not None:
                emergencyInfo11.insert(0, val)
            else:
                emergencyInfo11.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo1(emergencyInfo11, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo11.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Daytime Phone
            curr.execute("SELECT Daytime_Phone FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, emergencyContacts[0][0]))
            val = curr.fetchall()[0][0]

            label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... ")
            emergencyInfo12 = Entry(DemographicSectionframe)

            if val is not None:
                emergencyInfo12.insert(0, val)
            else:
                emergencyInfo12.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo2(emergencyInfo12, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo12.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Evening Phone
            curr.execute("SELECT Evening_Phone FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, emergencyContacts[0][0]))
            val = curr.fetchall()[0][0]

            label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... ")
            emergencyInfo13 = Entry(DemographicSectionframe)

            if val is not None:
                emergencyInfo13.insert(0, val)
            else:
                emergencyInfo13.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo3(emergencyInfo13, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo13.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

        else:

            #Name
            label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 1 ....................................................................................................... ")
            emergencyInfo10 = Entry(DemographicSectionframe)
            emergencyInfo10.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo0(emergencyInfo10, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo10.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Relationship
            label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. ")
            emergencyInfo11 = Entry(DemographicSectionframe)

            emergencyInfo11.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo1(emergencyInfo11, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo11.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Daytime Phone
            label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... ")
            emergencyInfo12 = Entry(DemographicSectionframe)

            emergencyInfo12.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo2(emergencyInfo12, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo12.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Evening Phone
            label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... ")
            emergencyInfo13 = Entry(DemographicSectionframe)

            emergencyInfo13.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo3(emergencyInfo13, 1, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo13.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

        if len(emergencyContacts) < 2:
            
            #Name
            label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 2 ....................................................................................................... ")
            emergencyInfo20 = Entry(DemographicSectionframe)
            emergencyInfo20.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo0(emergencyInfo20, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo20.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Relationship
            label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. ")
            emergencyInfo21 = Entry(DemographicSectionframe)

            emergencyInfo21.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo1(emergencyInfo21, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo21.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Daytime Phone
            label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... ")
            emergencyInfo22 = Entry(DemographicSectionframe)

            emergencyInfo22.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo2(emergencyInfo22, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo22.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Evening Phone
            label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... ")
            emergencyInfo23 = Entry(DemographicSectionframe)

            emergencyInfo23.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo3(emergencyInfo23, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo23.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

        else:
            #Name
            label = Label(DemographicSectionframe, text = "\nEmergency Contact Name 2 ....................................................................................................... ")
            emergencyInfo20 = Entry(DemographicSectionframe)

            emergencyInfo20.insert(0, emergencyContacts[1][0])
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo0(emergencyInfo20, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo20.grid(row = r, column = 1)
            label.grid(row = r, column = 0)


            #Relationship
            curr.execute("SELECT Relationship FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, emergencyContacts[1][0]))
            val = curr.fetchall()[0][0]

            label = Label(DemographicSectionframe, text = "Relationship to Camper .............................................................................................................. ")
            emergencyInfo21 = Entry(DemographicSectionframe)

            if val is not None:
                emergencyInfo21.insert(0, val)
            else:
                emergencyInfo21.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo1(emergencyInfo21, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo21.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Daytime Phone
            curr.execute("SELECT Daytime_Phone FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, emergencyContacts[1][0]))
            val = curr.fetchall()[0][0]

            label = Label(DemographicSectionframe, text = "Daytime Phone ........................................................................................................................... ")
            emergencyInfo22 = Entry(DemographicSectionframe)

            if val is not None:
                emergencyInfo22.insert(0, val)
            else:
                emergencyInfo22.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo2(emergencyInfo22, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo22.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

            #Evening Phone
            curr.execute("SELECT Evening_Phone FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, emergencyContacts[1][0]))
            val = curr.fetchall()[0][0]

            label = Label(DemographicSectionframe, text = "Evening Phone ........................................................................................................................... ")
            emergencyInfo23 = Entry(DemographicSectionframe)

            if val is not None:
                emergencyInfo23.insert(0, val)
            else:
                emergencyInfo23.insert(0, 'Unanswered')
                
            buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateEmergencyInfo3(emergencyInfo23, 2, id, date))

            r = r+1
            buttonUpdate.grid(row = r, column = 2)
            emergencyInfo23.grid(row = r, column = 1)
            label.grid(row = r, column = 0)

#Insurance Info Section ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nINSURANCE INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Insurer
        label = Label(DemographicSectionframe, text = "\nHealth Insurance Provider .......................................................................................................... ")

        curr.execute("SELECT Type_of_Health_Insurance FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        insuranceInfo0 = StringVar()
        
        choices = ['Medicaid','PeachCare','Private','None']
        option = tk.OptionMenu(DemographicSectionframe, insuranceInfo0, *choices)

        if val is not None:
            insuranceInfo0.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateInsuranceInfo0(insuranceInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Private Insurer Name
        curr.execute("SELECT Private_Insurance_Name FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nIf Private, Insurance Provider Name ........................................................................................... ")
        insuranceInfo1 = Entry(DemographicSectionframe)

        if val is not None:
            insuranceInfo1.insert(0, val)
        else:
            insuranceInfo1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateInsuranceInfo1(insuranceInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        insuranceInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Policy Number
        curr.execute("SELECT Policy_Number FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nPolicy Number ........................................................................................................................... ")
        insuranceInfo2 = Entry(DemographicSectionframe)

        if val is not None:
            insuranceInfo2.insert(0, val)
        else:
            insuranceInfo2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateInsuranceInfo2(insuranceInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        insuranceInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Group Number
        curr.execute("SELECT Group_Number FROM Insurance_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nGroup Number ........................................................................................................................... ")
        insuranceInfo3 = Entry(DemographicSectionframe)

        if val is not None:
            insuranceInfo3.insert(0, val)
        else:
            insuranceInfo3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateInsuranceInfo3(insuranceInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        insuranceInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Medical Provider Section ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Name
        curr.execute("SELECT Medical_Provider_Name FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMedical Provider Name .............................................................................................................. ")
        medProviderInfo0 = Entry(DemographicSectionframe)

        if val is not None:
            medProviderInfo0.insert(0, val)
        else:
            medProviderInfo0.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProviderInfo0(medProviderInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProviderInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Office Phone
        curr.execute("SELECT Phone_Office FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMedical Provider Name .............................................................................................................. ")
        medProviderInfo1 = Entry(DemographicSectionframe)

        if val is not None:
            medProviderInfo1.insert(0, val)
        else:
            medProviderInfo1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProviderInfo1(medProviderInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProviderInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Pharmacy name
        curr.execute("SELECT Pharmacy_Name FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nName of Pharmacy ..................................................................................................................... ")
        medProviderInfo2 = Entry(DemographicSectionframe)

        if val is not None:
            medProviderInfo2.insert(0, val)
        else:
            medProviderInfo2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProviderInfo2(medProviderInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProviderInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Pharmacy Phone Number
        curr.execute("SELECT Phone_Pharmacy FROM Medical_Provider_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nPharmacy Phone Number ........................................................................................................... ")
        medProviderInfo3 = Entry(DemographicSectionframe)

        if val is not None:
            medProviderInfo3.insert(0, val)
        else:
            medProviderInfo3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProviderInfo3(medProviderInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProviderInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Medical Information Section ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nMEDICAL INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Conditions
        label = Label(DemographicSectionframe, text = "\nCurrent Medical Conditions ........................................................................................................ ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedInfoCurr(medInfoCurr0, medInfoCurr1, medInfoCurr2, medInfoCurr3, medInfoCurr4,
            medInfoCurr5, medInfoCurr6, medInfoCurr7, medInfoCurr8, medInfoCurr9, medInfoCurr10, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Current_Medical_Conditions FROM Medical_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        #HIV
        medInfoCurr0 = IntVar()
        Checkbutton(DemographicSectionframe, text="HIV", variable = medInfoCurr0).grid(row = r,  column = 1, sticky = W)

        #Hepatitis B
        medInfoCurr1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Hepatitis B", variable = medInfoCurr1).grid(row = r,  column = 1, sticky = W)
        
        #Hepatitis C
        medInfoCurr2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Hepatitis C", variable = medInfoCurr2).grid(row = r,  column = 1, sticky = W)
        
        #ADD or ADHD
        medInfoCurr3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="ADD or ADHD", variable = medInfoCurr3).grid(row = r,  column = 1, sticky = W)
        
        #Sickle Cell Disease
        medInfoCurr4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Sickle Cell Disease", variable = medInfoCurr4).grid(row = r,  column = 1, sticky = W)
        
        #Asthma
        medInfoCurr5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Asthma", variable = medInfoCurr5).grid(row = r,  column = 1, sticky = W)
        
        #Tubes in Ears
        medInfoCurr6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Tubes in Ears", variable = medInfoCurr6).grid(row = r,  column = 1, sticky = W)
        
        #Heart Problems
        medInfoCurr7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Heart Problems", variable = medInfoCurr7).grid(row = r,  column = 1, sticky = W)
        
        #Mental Health Diagnoses
        medInfoCurr8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Mental Health Diagnoses", variable = medInfoCurr8).grid(row = r,  column = 1, sticky = W)
        
        #Other
        medInfoCurr9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Other", variable = medInfoCurr9).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'HIV' in val:
                medInfoCurr0.set(1)
            if 'Hepatitis B' in val:
                medInfoCurr1.set(1)
            if 'Hepatitis C' in val:
                medInfoCurr2.set(1)
            if 'ADD or ADHD' in val:
                medInfoCurr3.set(1)
            if 'Sickle Cell Disease' in val:
                medInfoCurr4.set(1)
            if 'Asthma' in val:
                medInfoCurr5.set(1)
            if 'Tubes in Ears' in val:
                medInfoCurr6.set(1)
            if 'Heart Problems' in val:
                medInfoCurr7.set(1)
            if 'Mental Health Diagnoses' in val:
                medInfoCurr8.set(1)
            if 'Other' in val:
                medInfoCurr9.set(1)

        #Conditions other
        curr.execute("SELECT Other FROM Medical_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        medInfoCurr10 = Entry(DemographicSectionframe, width = 14)

        if val is not None:
            medInfoCurr10.insert(0, val)
        else:
            medInfoCurr10.insert(0, 'Unanswered')
        medInfoCurr10.grid(row = r, column = 1, sticky = E)

        #Conditions Explained
        curr.execute("SELECT Medical_Condition_Explanation FROM Medical_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nDescription of Medical Conditions .............................................................................................. ")
        medInfo1 = Entry(DemographicSectionframe)

        if val is not None:
            medInfo1.insert(0, val)
        else:
            medInfo1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedInfo1(medInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Allergies Section ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nALLERGY INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))        

        #Med Allergy
        curr.execute("SELECT Med_Allergy FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMedical Allergies? ...................................................................................................................... ")
        allergyInfo0 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo0, value=2)

        if val is not None:
            if val is 0:
                allergyInfo0.set(2)
            else:
                allergyInfo0.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateAllergyInfo0(allergyInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Med Allergy Reaction
        curr.execute("SELECT Med_Reaction FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMedical Allergy Reaction ............................................................................................................ ")
        allergyInfo1 = Entry(DemographicSectionframe)

        if val is not None:
            allergyInfo1.insert(0, val)
        else:
            allergyInfo1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateAllergyInfo1(allergyInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        allergyInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Food Allergy
        curr.execute("SELECT Food_Allergy FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFood Allergies? .......................................................................................................................... ")
        allergyInfo2 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo2, value=2)

        if val is not None:
            if val is 0:
                allergyInfo2.set(2)
            else:
                allergyInfo2.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateAllergyInfo2(allergyInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Food Allergy Reaction
        curr.execute("SELECT Food_Reaction FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFood Allergy Reaction ................................................................................................................ ")
        allergyInfo3 = Entry(DemographicSectionframe)

        if val is not None:
            allergyInfo3.insert(0, val)
        else:
            allergyInfo3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateAllergyInfo3(allergyInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        allergyInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Environmental Allergies
        curr.execute("SELECT Env_Allergy FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nEnvironmental Allergies? ............................................................................................................ ")
        allergyInfo4 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo4, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo4, value=2)

        if val is not None:
            if val is 0:
                allergyInfo4.set(2)
            else:
                allergyInfo4.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateAllergyInfo4(allergyInfo4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Environmental Allergy Reaction
        curr.execute("SELECT Env_Reaction FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nEnvironmental Allergy Reaction .................................................................................................. ")
        allergyInfo5 = Entry(DemographicSectionframe)

        if val is not None:
            allergyInfo5.insert(0, val)
        else:
            allergyInfo5.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateAllergyInfo5(allergyInfo5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        allergyInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Epi Pen
        curr.execute("SELECT EpiPen FROM Allergies WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nEpiPen for any of the above allergies? ........................................................................................ ")
        allergyInfo6 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = allergyInfo6, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = allergyInfo6, value=2)

        if val is not None:
            if val is 0:
                allergyInfo6.set(2)
            else:
                allergyInfo6.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateAllergyInfo6(allergyInfo6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

#Dietary Needs Section ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nDIETARY INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))   

        #Special Dietary Needs
        curr.execute("SELECT Special_Dietary_Needs FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nSpecial Dietary Needs ................................................................................................................ ")
        dietaryNeedsInfo0 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo0, value=2)

        if val is not None:
            if val is 0:
                dietaryNeedsInfo0.set(2)
            else:
                dietaryNeedsInfo0.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo0(dietaryNeedsInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Vegetarian
        curr.execute("SELECT Vegetarian FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nVegetarian ................................................................................................................................. ")
        dietaryNeedsInfo1 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo1, value=2)

        if val is not None:
            if val is 0:
                dietaryNeedsInfo1.set(2)
            else:
                dietaryNeedsInfo1.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo1(dietaryNeedsInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Food Restrictions
        curr.execute("SELECT Food_Restrictions FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFood Restrictions ....................................................................................................................... ")
        dietaryNeedsInfo2 = Entry(DemographicSectionframe)

        if val is not None:
            dietaryNeedsInfo2.insert(0, val)
        else:
            dietaryNeedsInfo2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo2(dietaryNeedsInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        dietaryNeedsInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #G Tube
        label = Label(DemographicSectionframe, text = "\nG-Tube ...................................................................................................................................... ")

        curr.execute("SELECT G_Tube FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        dietaryNeedsInfo3 = StringVar()
        
        choices = ['None','Medicine','Formula','Both']
        option = tk.OptionMenu(DemographicSectionframe, dietaryNeedsInfo3, *choices)

        if val is not None:
            dietaryNeedsInfo3.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo3(dietaryNeedsInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Formula Supplements
        curr.execute("SELECT Formula_Supplement FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFormula Supplements ................................................................................................................ ")
        dietaryNeedsInfo4 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo4, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo4, value=2)

        if val is not None:
            if val is 0:
                dietaryNeedsInfo4.set(2)
            else:
                dietaryNeedsInfo4.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo4(dietaryNeedsInfo4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Formula Supplements How
        label = Label(DemographicSectionframe, text = "\nFormula Supplements How? ....................................................................................................... ")

        curr.execute("SELECT Formula_Supplement_How FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        dietaryNeedsInfo5 = StringVar()
        
        choices = ['By Mouth','By G-Tube']
        option = tk.OptionMenu(DemographicSectionframe, dietaryNeedsInfo5, *choices)

        if val is not None:
            dietaryNeedsInfo5.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo5(dietaryNeedsInfo5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Formula Type
        curr.execute("SELECT Food_Restrictions FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. ")
        dietaryNeedsInfo6 = Entry(DemographicSectionframe)

        if val is not None:
            dietaryNeedsInfo6.insert(0, val)
        else:
            dietaryNeedsInfo6.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo6(dietaryNeedsInfo6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        dietaryNeedsInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #cans per day
        curr.execute("SELECT Formula_Cans_Per_Day FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFormula Cans Per Day ................................................................................................................ ")
        dietaryNeedsInfo7 = Entry(DemographicSectionframe)

        if val is not None:
            dietaryNeedsInfo7.insert(0, val)
        else:
            dietaryNeedsInfo7.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo7(dietaryNeedsInfo7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        dietaryNeedsInfo7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Feeding Pump
        curr.execute("SELECT Feeding_Pump FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFeeding Pump ............................................................................................................................ ")
        dietaryNeedsInfo8 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = dietaryNeedsInfo8, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = dietaryNeedsInfo8, value=2)

        if val is not None:
            if val is 0:
                dietaryNeedsInfo8.set(2)
            else:
                dietaryNeedsInfo8.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo8(dietaryNeedsInfo8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Feeding Pump Type
        curr.execute("SELECT Pump_Type FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nPump Type ................................................................................................................................ ")
        dietaryNeedsInfo9 = Entry(DemographicSectionframe)

        if val is not None:
            dietaryNeedsInfo9.insert(0, val)
        else:
            dietaryNeedsInfo9.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo9(dietaryNeedsInfo9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        dietaryNeedsInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Feeding schedule
        curr.execute("SELECT Feeding_Schedule FROM Dietary_Needs WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFeeding Schedule ...................................................................................................................... ")
        dietaryNeedsInfo10 = Entry(DemographicSectionframe)

        if val is not None:
            dietaryNeedsInfo10.insert(0, val)
        else:
            dietaryNeedsInfo10.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDietaryNeedsInfo10(dietaryNeedsInfo10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        dietaryNeedsInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#General health ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nGENERAL HEALTH INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Physical Limitations
        label = Label(DemographicSectionframe, text = "\nPhysical Limitations ................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.genHealthLimit(genHealthLimit0, genHealthLimit1, genHealthLimit2, genHealthLimit3, genHealthLimit4,
            genHealthLimit5, genHealthLimit6, genHealthLimit7, genHealthLimit8, genHealthLimit9, genHealthLimit10, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Physical_Limitations FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        #Dressing
        genHealthLimit0 = IntVar()
        Checkbutton(DemographicSectionframe, text="Dressing", variable = genHealthLimit0).grid(row = r,  column = 1, sticky = W)

        #Showering
        genHealthLimit1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Showering", variable = genHealthLimit1).grid(row = r,  column = 1, sticky = W)
        
        #Eating
        genHealthLimit2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Eating", variable = genHealthLimit2).grid(row = r,  column = 1, sticky = W)
        
        #Toileting
        genHealthLimit3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Toileting", variable = genHealthLimit3).grid(row = r,  column = 1, sticky = W)

        #Walking/Balance
        genHealthLimit4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Walking/Balance", variable = genHealthLimit4).grid(row = r,  column = 1, sticky = W)

        #Braces
        genHealthLimit5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Braces", variable = genHealthLimit5).grid(row = r,  column = 1, sticky = W)

        #Casts
        genHealthLimit6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Casts", variable = genHealthLimit6).grid(row = r,  column = 1, sticky = W)

        #Walker
        genHealthLimit7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Walker", variable = genHealthLimit7).grid(row = r,  column = 1, sticky = W)

        #Wheelchair
        genHealthLimit8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Wheelchair", variable = genHealthLimit8).grid(row = r,  column = 1, sticky = W)

        #Other
        genHealthLimit9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Other", variable = genHealthLimit9).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'Dressing' in val:
                genHealthLimit0.set(1)
            if 'Showering' in val:
                genHealthLimit1.set(1)
            if 'Eating' in val:
                genHealthLimit2.set(1)
            if 'Toileting' in val:
                genHealthLimit3.set(1)
            if 'Walking/Balance' in val:
                genHealthLimit4.set(1)
            if 'Braces' in val:
                genHealthLimit5.set(1)
            if 'Casts' in val:
                genHealthLimit6.set(1)
            if 'Walker' in val:
                genHealthLimit7.set(1)
            if 'Wheelchair' in val:
                genHealthLimit8.set(1)
            if 'Other' in val:
                genHealthLimit9.set(1)

        #Physical Limitations other
        curr.execute("SELECT Other FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        genHealthLimit10 = Entry(DemographicSectionframe, width = 14)

        if val is not None:
            genHealthLimit10.insert(0, val)
        else:
            genHealthLimit10.insert(0, 'Unanswered')
        genHealthLimit10.grid(row = r, column = 1, sticky = E)

        #Tire Easily
        curr.execute("SELECT Tire_Easily FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nTire Easily .................................................................................................................................. ")
        genHealth1 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth1, value=2)

        if val is not None:
            if val is 0:
                genHealth1.set(2)
            else:
                genHealth1.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateGenHealth1(genHealth1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Swim
        curr.execute("SELECT Swim FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nCan Swim ................................................................................................................................... ")
        genHealth2 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth2, value=2)

        if val is not None:
            if val is 0:
                genHealth2.set(2)
            else:
                genHealth2.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateGenHealth2(genHealth2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Chicken Pox
        curr.execute("SELECT Chicken_Pox FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nChicken Pox Vaccinated? ............................................................................................................ ")
        genHealth3 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth3, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth3, value=2)

        if val is not None:
            if val is 0:
                genHealth3.set(2)
            else:
                genHealth3.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateGenHealth3(genHealth3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #c pox date
        curr.execute("SELECT Chicken_Pox_Date FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nChicken Pox Date (YYYY-MM-DD) ............................................................................................... ")
        genHealth4 = Entry(DemographicSectionframe)

        if val is not None:
            genHealth4.insert(0, val)
        else:
            genHealth4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateGenHealth4(genHealth4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        genHealth4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Menstrual Cycle
        curr.execute("SELECT Menstrual_Cycle FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMenstrual Cycle ......................................................................................................................... ")
        genHealth5 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = genHealth5, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = genHealth5, value=2)

        if val is not None:
            if val is 0:
                genHealth5.set(2)
            else:
                genHealth5.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateGenHealth5(genHealth5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #m cycle difficulties
        curr.execute("SELECT Menstrual_Difficulties FROM General_Health WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMenstrual Difficulties ................................................................................................................. ")
        genHealth6 = Entry(DemographicSectionframe)

        if val is not None:
            genHealth6.insert(0, val)
        else:
            genHealth6.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateGenHealth6(genHealth6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        genHealth6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Behavior ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nBEHAVIORAL INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Camper knows
        curr.execute("SELECT Camper_Knows FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nCamper knows that someone in his/her family has HIV/AIDS ...................................................... ")
        behavior0 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = behavior0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = behavior0, value=2)

        if val is not None:
            if val is 0:
                behavior0.set(2)
            else:
                behavior0.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateBehavior0(behavior0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #How long Camper known
        label = Label(DemographicSectionframe, text = "\nHow Long has Camper Been Aware of HIV/AIDS Impacting Them? .............................................. ")

        curr.execute("SELECT Time_Camper_Known FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        behavior1 = StringVar()
        
        choices = ['less than 6 months', 'less than 1 year', 'a few years', 'always']
        option = tk.OptionMenu(DemographicSectionframe, behavior1, *choices)

        if val is not None:
            behavior1.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateBehavior1(behavior1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Camper experiences
        label = Label(DemographicSectionframe, text = "\nExperiences of Camper .............................................................................................................. ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateBehaviorExperiances(behaviorExperiances0, behaviorExperiances1, behaviorExperiances2, behaviorExperiances3, behaviorExperiances4,
            behaviorExperiances5, behaviorExperiances6, behaviorExperiances7, behaviorExperiances8, behaviorExperiances9, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Camper_Experiences FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        #Anxiety
        behaviorExperiances0 = IntVar()
        Checkbutton(DemographicSectionframe, text="Anxiety", variable = behaviorExperiances0).grid(row = r,  column = 1, sticky = W)

        #Fear of dark
        behaviorExperiances1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Fear of dark", variable = behaviorExperiances1).grid(row = r,  column = 1, sticky = W)
 
        #Homesickness
        behaviorExperiances2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Homesickness", variable = behaviorExperiances2).grid(row = r,  column = 1, sticky = W)

        #Sleeps with night light
        behaviorExperiances3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Sleeps with night light", variable = behaviorExperiances3).grid(row = r,  column = 1, sticky = W)

        #Fights easily
        behaviorExperiances4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Fights easily", variable = behaviorExperiances4).grid(row = r,  column = 1, sticky = W)

        #School suspension due to behavior
        behaviorExperiances5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="School suspension due to behavior", variable = behaviorExperiances5).grid(row = r,  column = 1, sticky = W)

        #Bedwetting
        behaviorExperiances6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Bedwetting", variable = behaviorExperiances6).grid(row = r,  column = 1, sticky = W)

        #Sleeps with comfort item
        behaviorExperiances7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Sleeps with comfort item", variable = behaviorExperiances7).grid(row = r,  column = 1, sticky = W)

        #Hyperactivity or problems with attention
        behaviorExperiances8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Hyperactivity or problems with attention", variable = behaviorExperiances8).grid(row = r,  column = 1, sticky = W)

        #History of trauma or sexual abuse
        behaviorExperiances9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="History of trauma or sexual abuse", variable = behaviorExperiances9).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'Anxiety' in val:
                behaviorExperiances0.set(1)
            if 'Fear of dark' in val:
                behaviorExperiances1.set(1)
            if 'Homesickness' in val:
                behaviorExperiances2.set(1)
            if 'Sleeps with night light' in val:
                behaviorExperiances3.set(1)
            if 'Fights easily' in val:
                behaviorExperiances4.set(1)
            if 'School suspension due to behavior' in val:
                behaviorExperiances5.set(1)
            if 'Bedwetting' in val:
                behaviorExperiances6.set(1)
            if 'Sleeps with comfort item' in val:
                behaviorExperiances7.set(1)
            if 'Hyperactivity or problems with attention' in val:
                behaviorExperiances8.set(1)
            if 'History of trauma or sexual abuse' in val:
                behaviorExperiances9.set(1)

        #medication for hyperactivity
        curr.execute("SELECT Med_Hyper_AttentionProb FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nCamper Takes Medicine for Hyperactivity ................................................................................... ")
        behavior2 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = behavior2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = behavior2, value=2)

        if val is not None:
            if val is 0:
                behavior2.set(2)
            else:
                behavior2.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateBehavior2(behavior2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #experience explanation
        curr.execute("SELECT Explanation FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nExplanation of Experiences ........................................................................................................ ")
        behavior3 = Entry(DemographicSectionframe)

        if val is not None:
            behavior3.insert(0, val)
        else:
            behavior3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateBehavior3(behavior3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        behavior3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Camper interests
        label = Label(DemographicSectionframe, text = "\nInterests of Camper ................................................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateBehaviorInterests(behaviorInterests0, behaviorInterests1, behaviorInterests2, behaviorInterests3, behaviorInterests4,
            behaviorInterests5, behaviorInterests6, behaviorInterests7, behaviorInterests8, behaviorInterests9,
            behaviorInterests10, behaviorInterests11, behaviorInterests12, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Camper_Interests FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        #Reading
        behaviorInterests0 = IntVar()
        Checkbutton(DemographicSectionframe, text="Reading", variable = behaviorInterests0).grid(row = r,  column = 1, sticky = W)

        #Music
        behaviorInterests1 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Music", variable = behaviorInterests1).grid(row = r,  column = 1, sticky = W)
 
        #Swimming
        behaviorInterests2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Swimming", variable = behaviorInterests2).grid(row = r,  column = 1, sticky = W)
 
        #Dance
        behaviorInterests3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Dance", variable = behaviorInterests3).grid(row = r,  column = 1, sticky = W)
 
        #Sports
        behaviorInterests4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Sports", variable = behaviorInterests4).grid(row = r,  column = 1, sticky = W)
 
        #Arts/Crafts
        behaviorInterests5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Arts/Crafts", variable = behaviorInterests5).grid(row = r,  column = 1, sticky = W)
 
        #Fishing
        behaviorInterests6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Fishing", variable = behaviorInterests6).grid(row = r,  column = 1, sticky = W)
 
        #Boating
        behaviorInterests7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Boating", variable = behaviorInterests7).grid(row = r,  column = 1, sticky = W)
 
        #Archery
        behaviorInterests8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Archery", variable = behaviorInterests8).grid(row = r,  column = 1, sticky = W)
 
        #Golf
        behaviorInterests9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Golf", variable = behaviorInterests9).grid(row = r,  column = 1, sticky = W)
 
        #Bicycling
        behaviorInterests10 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Bicycling", variable = behaviorInterests10).grid(row = r,  column = 1, sticky = W)
 
        #Animals
        behaviorInterests11 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Animals", variable = behaviorInterests11).grid(row = r,  column = 1, sticky = W)
 
        #Nature
        behaviorInterests12 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Nature", variable = behaviorInterests12).grid(row = r,  column = 1, sticky = W)

        if val is not None:
            if 'Reading' in val:
                behaviorInterests0.set(1)
            if 'Music' in val:
                behaviorInterests1.set(1)
            if 'Swimming' in val:
                behaviorInterests2.set(1)
            if 'Dance' in val:
                behaviorInterests3.set(1)
            if 'Sports' in val:
                behaviorInterests4.set(1)
            if 'Arts/Crafts' in val:
                behaviorInterests5.set(1)
            if 'Fishing' in val:
                behaviorInterests6.set(1)
            if 'Boating' in val:
                behaviorInterests7.set(1)
            if 'Archery' in val:
                behaviorInterests8.set(1)
            if 'Golf' in val:
                behaviorInterests9.set(1)
            if 'Bicycling' in val:
                behaviorInterests10.set(1)
            if 'Animals' in val:
                behaviorInterests11.set(1)
            if 'Nature' in val:
                behaviorInterests12.set(1)

        #Recent major events
        curr.execute("SELECT Recent_Major_Events FROM Pyschosocial_and_Behavioral_info WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nRecent Events for Camper .......................................................................................................... ")
        behavior4 = Entry(DemographicSectionframe)

        if val is not None:
            behavior4.insert(0, val)
        else:
            behavior4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateBehavior4(behavior4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        behavior4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Medication Info ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nMEDICATION INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        curr.execute("SELECT Medication FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        medArr = curr.fetchall()

        #med 1
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 1')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 0:
            name = medArr[0][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med10 = Entry(DemographicSectionframe)
        med10.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med10, 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med11 = Entry(DemographicSectionframe)
        med11.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med11, 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med12 = Entry(DemographicSectionframe)
        med12.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med12, 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 2
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 2')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 1:
            name = medArr[1][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med20 = Entry(DemographicSectionframe)
        med20.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med20, 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med21 = Entry(DemographicSectionframe)
        med21.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med21, 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med22 = Entry(DemographicSectionframe)
        med22.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med22, 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med22.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 3
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 3')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 2:
            name = medArr[2][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med30 = Entry(DemographicSectionframe)
        med30.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med30, 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med31 = Entry(DemographicSectionframe)
        med31.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med31, 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med32 = Entry(DemographicSectionframe)
        med32.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med32, 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med32.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 4
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 4')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 3:
            name = medArr[3][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med40 = Entry(DemographicSectionframe)
        med40.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med40, 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med40.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med41 = Entry(DemographicSectionframe)
        med41.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med41, 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med41.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med42 = Entry(DemographicSectionframe)
        med42.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med42, 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med42.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 5
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 5')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 4:
            name = medArr[4][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med50 = Entry(DemographicSectionframe)
        med50.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med50, 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med50.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med51 = Entry(DemographicSectionframe)
        med51.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med51, 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med51.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med52 = Entry(DemographicSectionframe)
        med52.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med52, 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med52.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 6
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 6')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 5:
            name = medArr[5][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med60 = Entry(DemographicSectionframe)
        med60.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMe0(med60, 6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med60.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med61 = Entry(DemographicSectionframe)
        med61.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med61, 6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med61.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med62 = Entry(DemographicSectionframe)
        med62.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med62, 6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med62.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 7
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 7')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 6:
            name = medArr[6][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med70 = Entry(DemographicSectionframe)
        med70.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med70, 7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med70.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med71 = Entry(DemographicSectionframe)
        med71.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med71, 7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med71.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med72 = Entry(DemographicSectionframe)
        med72.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med72, 7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med72.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 8
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 8')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 7:
            name = medArr[7][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med80 = Entry(DemographicSectionframe)
        med80.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med80, 8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med80.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med81 = Entry(DemographicSectionframe)
        med81.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med81, 8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med81.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med82 = Entry(DemographicSectionframe)
        med82.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med82, 8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med82.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 9
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 9')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 8:
            name = medArr[8][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med90 = Entry(DemographicSectionframe)
        med90.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med90, 9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med90.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med91 = Entry(DemographicSectionframe)
        med91.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med91, 9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med91.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med92 = Entry(DemographicSectionframe)
        med92.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med92, 9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med92.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 10
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 10')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 9:
            name = medArr[9][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med100 = Entry(DemographicSectionframe)
        med100.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med100, 10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med100.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med101 = Entry(DemographicSectionframe)
        med101.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med101, 10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med101.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med102 = Entry(DemographicSectionframe)
        med102.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med102, 10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med102.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #med 11
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 11')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 10:
            name = medArr[10][0]
            
            curr.execute("SELECT Amount FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Time_Instruction FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Taken ....................................................................................................................... ")
        med110 = Entry(DemographicSectionframe)
        med110.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed0(med110, 11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med110.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Medication Amount .................................................................................................................... ")
        med111 = Entry(DemographicSectionframe)
        med111.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed1(med111, 11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med111.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Medication Frequency ................................................................................................................ ")
        med112 = Entry(DemographicSectionframe)
        med112.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMed2(med112, 11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        med112.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Preliminary signatures ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nPARENTAL CONSENT INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #parent camper contract
        curr.execute("SELECT Parent_Camper_Contract FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nParent Camper Contract ............................................................................................................. ")
        parentSig0 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig0, value=2)

        if val is not None:
            if val is 0:
                parentSig0.set(2)
            else:
                parentSig0.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateParentSig0(parentSig0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #participation release
        curr.execute("SELECT Partcipation_Consent_Liability_Release FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nParticipation Consent/Liability Release/Disputes Form Signed .................................................... ")
        parentSig1 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig1, value=2)

        if val is not None:
            if val is 0:
                parentSig1.set(2)
            else:
                parentSig1.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateParentSig1(parentSig1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Media release
        curr.execute("SELECT Media_Release FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMedia Release Form Signed ........................................................................................................ ")
        parentSig2 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig2, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig2, value=2)

        if val is not None:
            if val is 0:
                parentSig2.set(2)
            else:
                parentSig2.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateParentSig2(parentSig2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #hiv ed waiver
        curr.execute("SELECT Camper_HIV_Education FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nHIV Education Waiver Signed ...................................................................................................... ")
        parentSig3 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig3, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig3, value=2)

        if val is not None:
            if val is 0:
                parentSig3.set(2)
            else:
                parentSig3.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateParentSig3(parentSig3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #camp rules form signed
        curr.execute("SELECT Camp_Twin_Lakes_Rules FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nRules Acknowledgement Form Signed ......................................................................................... ")
        parentSig4 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig4, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig4, value=2)

        if val is not None:
            if val is 0:
                parentSig4.set(2)
            else:
                parentSig4.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateParentSig4(parentSig4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #parental consent and release
        curr.execute("SELECT Parental_Consent_And_Release FROM Release_Forms_Signed WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nParental Consent and Release Form Signed ................................................................................. ")
        parentSig5 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = parentSig5, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = parentSig5, value=2)

        if val is not None:
            if val is 0:
                parentSig5.set(2)
            else:
                parentSig5.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateParentSig5(parentSig5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #next
        r = r+1
        nextButton = Button(DemographicSectionframe, text = "Next Page", command = lambda:self.EditCampProfilePageTwo(id, date))
        nextButton.grid(row = r, column = 2, sticky="E")

#******************************************************************************************************************************************************

    def EditCampProfilePageTwo(self, id, date):
        #setup
        self.EditCampProfilePageTwoRoot = Toplevel()
        root = self.EditCampProfilePageTwoRoot
        self.EditCampProfilePageRoot.withdraw()
        self.PrevPage = 'EditCampProfilePageTwo'
        root.title("Edit Camp Profile Page")

        self.canvas = Canvas(root)
        master = Frame(self.canvas)

        scrollbarY = Scrollbar(root, orient = "vertical", command = self.canvas.yview)
        scrollbarY.pack(side = RIGHT, fill = Y)
        scrollbarX = Scrollbar(root, orient = "horizontal", command = self.canvas.xview)
        scrollbarX.pack(side = BOTTOM, fill = X)

        self.canvas.configure(xscrollcommand = scrollbarX.set, yscrollcommand = scrollbarY.set)
        self.canvas.pack(side = "left", fill = "both", expand = True)
        self.canvas.create_window((4,4), window = master, anchor="nw", 
                                  tags="master")

        master.bind("<Configure>", self.onFrameConfigure)
        root.geometry("1000x1000")

        #Database Connection
        db = self.connect()
        curr = db.cursor()

#Buttons
        #frame
        buttonframe = Frame(master)
        buttonframe.pack(side = "top", fill = "x")

        #back
        prevButton = Button(buttonframe, text = "Prev Page", command = lambda:self.EditCampProfilePage(id, date))
        prevButton.pack(side = "left")

        exitButton = Button(buttonframe, text = "Exit", command=lambda: self.exit())
        exitButton.pack(side = "left")

        #delete
        deleteButton = Button(buttonframe, text = "Delete Application", command = lambda:self.deleteCampApp(id, date))
        deleteButton.pack(side = "right")

#Database dump frame
        DemographicSectionframe = Frame(master)
        DemographicSectionframe.pack(fill = 'y', side = 'left') 
        r = 0

#
#Medical provider sections
#
        #header
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER SECTION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 25))

#medical history ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nMEDICAL INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        curr.execute("SELECT Diagnosis FROM Med_Hist_Diagnosis WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        diagnosisArr = curr.fetchall()

        #medical diagnosises 1
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 1 ................................................................................................................... ")
        medProvider0 = Entry(DemographicSectionframe)

        if len(diagnosisArr) > 0:
            medProvider0.insert(0, diagnosisArr[0][0])
        else:
            medProvider0.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDiagnosis(medProvider0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvider0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #medical diagnosises 2
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 2 ................................................................................................................... ")
        medProvider1 = Entry(DemographicSectionframe)

        if len(diagnosisArr) > 1:
            medProvider1.insert(0, diagnosisArr[1][0])
        else:
            medProvider1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDiagnosis(medProvider1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvider1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #medical diagnosises 3
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 3 ................................................................................................................... ")
        medProvider2 = Entry(DemographicSectionframe)

        if len(diagnosisArr) > 2:
            medProvider2.insert(0, diagnosisArr[2][0])
        else:
            medProvider2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDiagnosis(medProvider2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvider2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #medical diagnosises 4
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 4 ................................................................................................................... ")
        medProvider3 = Entry(DemographicSectionframe)

        if len(diagnosisArr) > 3:
            medProvider3.insert(0, diagnosisArr[3][0])
        else:
            medProvider3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDiagnosis(medProvider3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvider3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #medical diagnosises 5
        label = Label(DemographicSectionframe, text = "\nMedical Diagnosis 5 ................................................................................................................... ")
        medProvider4 = Entry(DemographicSectionframe)

        if len(diagnosisArr) > 4:
            medProvider4.insert(0, diagnosisArr[4][0])
        else:
            medProvider4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateDiagnosis(medProvider4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvider4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #management
        curr.execute("SELECT Management FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMedical Management Comments ................................................................................................ ")
        medProvider5 = Entry(DemographicSectionframe)

        if val is not None:
            medProvider5.insert(0, val)
        else:
            medProvider5.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvider5(medProvider5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvider5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #nutritional supplements
        curr.execute("SELECT Nutritional_Supplements FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nNutritional Supplements Taken? ................................................................................................. ")
        medProvider6 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = medProvider6, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = medProvider6, value=2)

        if val is not None:
            if val is 0:
                medProvider6.set(2)
            else:
                medProvider6.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvider6(medProvider6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #supplement comment
        curr.execute("SELECT Feeding_Care FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nFeeding Care Comments ............................................................................................................ ")
        medProvider7 = Entry(DemographicSectionframe)

        if val is not None:
            medProvider7.insert(0, val)
        else:
            medProvider7.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvider7(medProvider7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvider7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #formula type
        label = Label(DemographicSectionframe, text = "\nFormula Type ............................................................................................................................. ")

        curr.execute("SELECT Formula_Type FROM Medical_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        medProvider8 = StringVar()
        choices = ['Oral', 'G-tube', 'N-G tube']
        option = tk.OptionMenu(DemographicSectionframe, medProvider8, *choices)

        if val is not None:
            medProvider8.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvider8(medProvider8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #allergies
        #FOOD
        label = Label(DemographicSectionframe, text = "\nFood Allergy")
        r = r+1
        label.grid(row = r, column = 0)

        curr.execute("SELECT Allergy FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Type = 'Food';", (id, date,))
        allergyArr = curr.fetchall()

        #allergy1
        if len(allergyArr) > 0:
            allergy = allergyArr[0][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Food';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 1 .................................................................................................................................... ")
        foodAllergy1 = Entry(DemographicSectionframe)
        foodAllergy1.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(foodAllergy1, 'Food', 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodAllergy1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 1 .................................................................................................................................. ")
        foodReaction1 = Entry(DemographicSectionframe)
        foodReaction1.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(foodReaction1, 'Food', 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodReaction1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy2
        if len(allergyArr) > 1:
            allergy = allergyArr[1][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Food';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 2 .................................................................................................................................... ")
        foodAllergy2 = Entry(DemographicSectionframe)
        foodAllergy2.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(foodAllergy2, 'Food', 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodAllergy2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 2 .................................................................................................................................. ")
        foodReaction2 = Entry(DemographicSectionframe)
        foodReaction2.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(foodReaction2, 'Food', 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodReaction2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy3
        if len(allergyArr) > 2:
            allergy = allergyArr[2][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Food';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 3 .................................................................................................................................... ")
        foodAllergy3 = Entry(DemographicSectionframe)
        foodAllergy3.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(foodAllergy3, 'Food', 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodAllergy3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 3 .................................................................................................................................. ")
        foodReaction3 = Entry(DemographicSectionframe)
        foodReaction3.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(foodReaction3, 'Food', 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodReaction3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy4
        if len(allergyArr) > 3:
            allergy = allergyArr[3][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Food';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 4 .................................................................................................................................... ")
        foodAllergy4 = Entry(DemographicSectionframe)
        foodAllergy4.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(foodAllergy4, 'Food', 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodAllergy4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 4 .................................................................................................................................. ")
        foodReaction4 = Entry(DemographicSectionframe)
        foodReaction4.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(foodReaction4, 'Food', 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodReaction4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy5
        if len(allergyArr) > 4:
            allergy = allergyArr[4][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Food';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 5 .................................................................................................................................... ")
        foodAllergy5 = Entry(DemographicSectionframe)
        foodAllergy5.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(foodAllergy5, 'Food', 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodAllergy5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 5 .................................................................................................................................. ")
        foodReaction5 = Entry(DemographicSectionframe)
        foodReaction5.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(foodReaction5, 'Food', 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        foodReaction5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION
        label = Label(DemographicSectionframe, text = "\nMedication Allergy")
        r = r+1
        label.grid(row = r, column = 0)

        curr.execute("SELECT Allergy FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Type = 'Medication';", (id, date,))
        allergyArr = curr.fetchall()

        #allergy1
        if len(allergyArr) > 0:
            allergy = allergyArr[0][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Medication';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 1 .................................................................................................................................... ")
        medAllergy1 = Entry(DemographicSectionframe)
        medAllergy1.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(medAllergy1, 'Medication', 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medAllergy1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 1 .................................................................................................................................. ")
        medReaction1 = Entry(DemographicSectionframe)
        medReaction1.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(medReaction1, 'Medication', 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medReaction1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy2
        if len(allergyArr) > 1:
            allergy = allergyArr[1][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Medication';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 2 .................................................................................................................................... ")
        medAllergy2 = Entry(DemographicSectionframe)
        medAllergy2.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(medAllergy2, 'Medication', 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medAllergy2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 2 .................................................................................................................................. ")
        medReaction2 = Entry(DemographicSectionframe)
        medReaction2.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(medReaction2, 'Medication', 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medReaction2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy3
        if len(allergyArr) > 2:
            allergy = allergyArr[2][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Medication';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 3 .................................................................................................................................... ")
        medAllergy3 = Entry(DemographicSectionframe)
        medAllergy3.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(medAllergy3, 'Medication', 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medAllergy3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 3 .................................................................................................................................. ")
        medReaction3 = Entry(DemographicSectionframe)
        medReaction3.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(medReaction3, 'Medication', 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medReaction3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy4
        if len(allergyArr) > 3:
            allergy = allergyArr[3][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Medication';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 4 .................................................................................................................................... ")
        medAllergy4 = Entry(DemographicSectionframe)
        medAllergy4.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(medAllergy4, 'Medication', 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medAllergy4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 4 .................................................................................................................................. ")
        medReaction4 = Entry(DemographicSectionframe)
        medReaction4.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(medReaction4, 'Medication', 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medReaction4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy5
        if len(allergyArr) > 4:
            allergy = allergyArr[4][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Medication';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 5 .................................................................................................................................... ")
        medAllergy5 = Entry(DemographicSectionframe)
        medAllergy5.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(medAllergy5, 'Medication', 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medAllergy5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 5 .................................................................................................................................. ")
        medReaction5 = Entry(DemographicSectionframe)
        medReaction5.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(medReaction5, 'Medication', 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medReaction5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #ENVIRONMENTAL
        label = Label(DemographicSectionframe, text = "\nEnvironmental Allergy")
        r = r+1
        label.grid(row = r, column = 0)

        curr.execute("SELECT Allergy FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Type = 'Environmental';", (id, date,))
        allergyArr = curr.fetchall()

        #allergy1
        if len(allergyArr) > 0:
            allergy = allergyArr[0][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Environmental';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 1 .................................................................................................................................... ")
        envAllergy1 = Entry(DemographicSectionframe)
        envAllergy1.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(envAllergy1, 'Environmental', 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envAllergy1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 1 .................................................................................................................................. ")
        envReaction1 = Entry(DemographicSectionframe)
        envReaction1.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(envReaction1, 'Environmental', 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envReaction1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy2
        if len(allergyArr) > 1:
            allergy = allergyArr[1][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Environmental';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 2 .................................................................................................................................... ")
        envAllergy2 = Entry(DemographicSectionframe)
        envAllergy2.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(envAllergy2, 'Environmental', 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envAllergy2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 2 .................................................................................................................................. ")
        envReaction2 = Entry(DemographicSectionframe)
        envReaction2.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(envReaction2, 'Environmental', 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envReaction2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy3
        if len(allergyArr) > 2:
            allergy = allergyArr[2][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Environmental';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 3 .................................................................................................................................... ")
        envAllergy3 = Entry(DemographicSectionframe)
        envAllergy3.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(envAllergy3, 'Environmental', 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envAllergy3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 3 .................................................................................................................................. ")
        envReaction3 = Entry(DemographicSectionframe)
        envReaction3.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(envReaction3, 'Environmental', 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envReaction3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy4
        if len(allergyArr) > 3:
            allergy = allergyArr[3][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Environmental';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 4 .................................................................................................................................... ")
        envAllergy4 = Entry(DemographicSectionframe)
        envAllergy4.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(envAllergy4, 'Environmental', 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envAllergy4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 4 .................................................................................................................................. ")
        envReaction4 = Entry(DemographicSectionframe)
        envReaction4.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(envReaction4, 'Environmental', 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envReaction4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #allergy5
        if len(allergyArr) > 4:
            allergy = allergyArr[4][0]
            
            curr.execute("SELECT Reaction FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s AND Type = 'Environmental';", (id, date, allergy,))
            reaction = curr.fetchall()[0][0]
            if reaction is None:
                reaction = 'Unanswered'
        else:
            allergy = 'Unanswered'
            reaction = 'Unanswered'

        #allergic to
        label = Label(DemographicSectionframe, text = "\nAllergy 5 .................................................................................................................................... ")
        envAllergy5 = Entry(DemographicSectionframe)
        envAllergy5.insert(0, allergy)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistAllergy(envAllergy5, 'Environmental', 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envAllergy5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #reaction
        label = Label(DemographicSectionframe, text = "Reaction 5 .................................................................................................................................. ")
        envReaction5 = Entry(DemographicSectionframe)
        envReaction5.insert(0, reaction)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedHistReaction(envReaction5, 'Environmental', 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        envReaction5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#physical ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nMOST RECENT PHYSICAL INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #date completed
        curr.execute("SELECT Date_Completed FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nDate Completed (YYY-MM-DD) ................................................................................................... ")
        physical0 = Entry(DemographicSectionframe)

        if val is not None:
            physical0.insert(0, val)
        else:
            physical0.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical0(physical0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #height
        curr.execute("SELECT Height FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nHeight ........................................................................................................................................ ")
        physical1 = Entry(DemographicSectionframe)

        if val is not None:
            physical1.insert(0, val)
        else:
            physical1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical1(physical1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #weight
        curr.execute("SELECT Weight FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nWeight (lb) ................................................................................................................................. ")
        physical2 = Entry(DemographicSectionframe)

        if val is not None:
            physical2.insert(0, val)
        else:
            physical2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical2(physical2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #pulse
        curr.execute("SELECT Pulse FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nPulse (bpm) ................................................................................................................................ ")
        physical3 = Entry(DemographicSectionframe)

        if val is not None:
            physical3.insert(0, val)
        else:
            physical3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical3(physical3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #respirations
        curr.execute("SELECT Resperations FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nRespirations ............................................................................................................................... ")
        physical4 = Entry(DemographicSectionframe)

        if val is not None:
            physical4.insert(0, val)
        else:
            physical4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical4(physical4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #bp
        curr.execute("SELECT Blood_Pressure FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nBlood Pressure ............................................................................................................................... ")
        physical5 = Entry(DemographicSectionframe)

        if val is not None:
            physical5.insert(0, val)
        else:
            physical5.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical5(physical5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #HEENT
        curr.execute("SELECT HEENT FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nHEENT ........................................................................................................................................ ")
        physical6 = Entry(DemographicSectionframe)

        if val is not None:
            physical6.insert(0, val)
        else:
            physical6.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical6(physical6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #skin
        curr.execute("SELECT Skin FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nSkin ............................................................................................................................................ ")
        physical7 = Entry(DemographicSectionframe)

        if val is not None:
            physical7.insert(0, val)
        else:
            physical7.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical7(physical7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #cardio
        curr.execute("SELECT Cardiovascular FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nCardiovascular ........................................................................................................................... ")
        physical8 = Entry(DemographicSectionframe)

        if val is not None:
            physical8.insert(0, val)
        else:
            physical8.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical8(physical8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #gu gyn
        curr.execute("SELECT GU_GYN FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nGU/GYN ...................................................................................................................................... ")
        physical9 = Entry(DemographicSectionframe)

        if val is not None:
            physical9.insert(0, val)
        else:
            physical9.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical9(physical9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #pulmonary
        curr.execute("SELECT Pulmonary FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nPulmonary .................................................................................................................................. ")
        physical10 = Entry(DemographicSectionframe)

        if val is not None:
            physical10.insert(0, val)
        else:
            physical10.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical10(physical10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #g ha
        curr.execute("SELECT Glasses_HearingAids_PE FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nGlasses/Contacts/Hearing Aids/PE tubes .................................................................................... ")
        physical11 = Entry(DemographicSectionframe)

        if val is not None:
            physical11.insert(0, val)
        else:
            physical11.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical11(physical11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Abdomen
        curr.execute("SELECT Abdomen FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nAbdomen ................................................................................................................................... ")
        physical12 = Entry(DemographicSectionframe)

        if val is not None:
            physical12.insert(0, val)
        else:
            physical12.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical12(physical12, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #LN
        curr.execute("SELECT Lymph_Nodes FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nLymph Nodes ............................................................................................................................. ")
        physical13 = Entry(DemographicSectionframe)

        if val is not None:
            physical13.insert(0, val)
        else:
            physical13.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical13(physical13, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Extremities
        curr.execute("SELECT Extremities FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nExtremities ................................................................................................................................. ")
        physical14 = Entry(DemographicSectionframe)

        if val is not None:
            physical14.insert(0, val)
        else:
            physical14.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical14(physical14, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical14.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #spine
        curr.execute("SELECT Spine FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nSpine ......................................................................................................................................... ")
        physical15 = Entry(DemographicSectionframe)

        if val is not None:
            physical15.insert(0, val)
        else:
            physical15.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical15(physical15, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Misc
        curr.execute("SELECT Miscellaneous FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMiscellaneous ............................................................................................................................ ")
        physical16 = Entry(DemographicSectionframe)

        if val is not None:
            physical16.insert(0, val)
        else:
            physical16.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical16(physical16, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical16.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #comm
        curr.execute("SELECT Comments FROM Physical_Exam WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nComments .................................................................................................................................. ")
        physical17 = Entry(DemographicSectionframe)

        if val is not None:
            physical17.insert(0, val)
        else:
            physical17.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updatePhysical17(physical17, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        physical17.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#cognative development level ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nCOGNITIVE DEVELOPMENT INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #development level
        label = Label(DemographicSectionframe, text = "\nDevelopment Level ..................................................................................................................... ")

        curr.execute("SELECT Development_Level FROM Cognitive_Development_Level WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        cogDev0 = StringVar()
        choices = ['Age Appropriate', 'Mild Delay', 'Moderate Delay', 'Severe Delay']
        option = tk.OptionMenu(DemographicSectionframe, cogDev0, *choices)

        if val is not None:
            cogDev0.set(val)
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateCogDev0(cogDev0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #other info
        curr.execute("SELECT Other_Psychosocial_Information FROM Cognitive_Development_Level WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nOther Psychosocoal Information ................................................................................................. ")
        cogDev1 = Entry(DemographicSectionframe)

        if val is not None:
            cogDev1.insert(0, val)
        else:
            cogDev1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateCogDev1(cogDev1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        cogDev1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Varicella screening ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nVARICELLA SCREENING")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Two_Doses
        curr.execute("SELECT Two_Doses FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nTwo doses of vaccine ................................................................................................................. ")
        varicella0 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = varicella0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = varicella0, value=2)

        if val is not None:
            if val is 0:
                varicella0.set(2)
            else:
                varicella0.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateVaricella0(varicella0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Chicken_Pox
        curr.execute("SELECT Chicken_Pox FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nHistory of chicken pox or shingles? ............................................................................................ ")
        varicella1 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = varicella1, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = varicella1, value=2)

        if val is not None:
            if val is 0:
                varicella1.set(2)
            else:
                varicella1.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateVaricella1(varicella1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Chicken_Pox_Date
        curr.execute("SELECT Chicken_Pox_Date FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nChicken pox/ shingles date (YYYY-MM-DD) ................................................................................ ")
        varicella2 = Entry(DemographicSectionframe)

        if val is not None:
            varicella2.insert(0, val)
        else:
            varicella2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateVaricella2(varicella2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        varicella2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Varicella_Antibody
        curr.execute("SELECT Varicella_Antibody FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nVaricella antibody ....................................................................................................................... ")
        varicella3 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = varicella3, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = varicella3, value=2)

        if val is not None:
            if val is 0:
                varicella3.set(2)
            else:
                varicella3.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateVaricella3(varicella3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Varicella_Antibody_Date
        curr.execute("SELECT Varicella_Antibody_Date FROM Varicella_Screening WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nVaricella antibody date (YYYY-MM-DD) ...................................................................................... ")
        varicella4 = Entry(DemographicSectionframe)

        if val is not None:
            varicella4.insert(0, val)
        else:
            varicella4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateVaricella4(varicella4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        varicella4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#tuberculosis screening ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nTUBERCULOSIS SCREENING")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Tuberculin Skin Test
        label = Label(DemographicSectionframe, text = "\nTuberculin Skin Test")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #date
        curr.execute("SELECT Date_Screened FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Tuberculin Skin Test';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ ")
        tuberculosis10 = Entry(DemographicSectionframe)

        if val is not None:
            tuberculosis10.insert(0, val)
        else:
            tuberculosis10.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateTuberculosis1(tuberculosis10, 'Tuberculin Skin Test', id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        tuberculosis10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Result
        curr.execute("SELECT Result FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Tuberculin Skin Test';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... ")
        tuberculosis11 = Entry(DemographicSectionframe)

        if val is not None:
            tuberculosis11.insert(0, val)
        else:
            tuberculosis11.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateTuberculosis2(tuberculosis11, 'Tuberculin Skin Test', id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        tuberculosis11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        labelContactsSection.config(font=("Helvetica", 20))

        #Quantiferon Testing
        label = Label(DemographicSectionframe, text = "\nQuantiferon Testing")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #date
        curr.execute("SELECT Date_Screened FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Quantiferon Testing';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ ")
        tuberculosis20 = Entry(DemographicSectionframe)

        if val is not None:
            tuberculosis20.insert(0, val)
        else:
            tuberculosis20.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateTuberculosis1(tuberculosis20, 'Quantiferon Testing', id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        tuberculosis20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Result
        curr.execute("SELECT Result FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Quantiferon Testing';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... ")
        tuberculosis21 = Entry(DemographicSectionframe)

        if val is not None:
            tuberculosis21.insert(0, val)
        else:
            tuberculosis21.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateTuberculosis2(tuberculosis21, 'Quantiferon Testing', id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        tuberculosis21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Chest X-ray
        label = Label(DemographicSectionframe, text = "\nChest X-ray")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')

        #date
        curr.execute("SELECT Date_Screened FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Chest X-ray';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Test Date (YYY-MM-DD) ............................................................................................................ ")
        tuberculosis30 = Entry(DemographicSectionframe)

        if val is not None:
            tuberculosis30.insert(0, val)
        else:
            tuberculosis30.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateTuberculosis1(tuberculosis30, 'Chest X-ray', id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        tuberculosis30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Result
        curr.execute("SELECT Result FROM Tuberculosis_Screening WHERE ID = %s AND Date_Submitted = %s AND Type = 'Chest X-ray';", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Test Results ............................................................................................................................... ")
        tuberculosis31 = Entry(DemographicSectionframe)

        if val is not None:
            tuberculosis31.insert(0, val)
        else:
            tuberculosis31.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateTuberculosis2(tuberculosis31, 'Chest X-ray', id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        tuberculosis31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Restrictions_And_Recommendations ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nRESTRICTIONS AND RECOMMENDATIONS")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #Restrictions and recommendations
        curr.execute("SELECT Restrictions_And_Recommendations FROM Medical_Care_Provider WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nRestrictions and recommendations ............................................................................................ ")
        restrictionsRec = Entry(DemographicSectionframe)

        if val is not None:
            restrictionsRec.insert(0, val)
        else:
            restrictionsRec.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateRestrictionsRec(restrictionsRec, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        restrictionsRec.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#medcare provider medications ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER MEDICATION INFORMATION")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        curr.execute("SELECT Medication_Name FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        medArr = curr.fetchall()

        #med 1
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 1')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 0:
            name = medArr[0][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed11 = Entry(DemographicSectionframe)
        medProMed11.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed11, 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed12 = Entry(DemographicSectionframe)
        medProMed12.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed12, 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed13 = Entry(DemographicSectionframe)
        medProMed13.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed13, 1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 2
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 2')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 1:
            name = medArr[1][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed21 = Entry(DemographicSectionframe)
        medProMed21.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed21, 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed22 = Entry(DemographicSectionframe)
        medProMed22.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed22, 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed22.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed23 = Entry(DemographicSectionframe)
        medProMed23.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed23, 2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed23.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 3
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 3')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 2:
            name = medArr[2][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed31 = Entry(DemographicSectionframe)
        medProMed31.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed31, 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed32 = Entry(DemographicSectionframe)
        medProMed32.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed32, 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed32.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed33 = Entry(DemographicSectionframe)
        medProMed33.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed33, 3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed33.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 4
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 4')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 3:
            name = medArr[3][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed41 = Entry(DemographicSectionframe)
        medProMed41.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed41, 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed41.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed42 = Entry(DemographicSectionframe)
        medProMed42.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed42, 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed42.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed43 = Entry(DemographicSectionframe)
        medProMed43.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed43, 4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed43.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 5
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 5')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 4:
            name = medArr[4][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed51 = Entry(DemographicSectionframe)
        medProMed51.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed51, 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed51.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed52 = Entry(DemographicSectionframe)
        medProMed52.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed52, 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed52.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed53 = Entry(DemographicSectionframe)
        medProMed53.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed53, 5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed53.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 6
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 6')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 5:
            name = medArr[5][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed61 = Entry(DemographicSectionframe)
        medProMed61.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed61, 6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed61.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed62 = Entry(DemographicSectionframe)
        medProMed62.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed62, 6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed62.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed63 = Entry(DemographicSectionframe)
        medProMed63.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed63, 6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed63.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 7
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 7')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 6:
            name = medArr[6][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed71 = Entry(DemographicSectionframe)
        medProMed71.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed71, 7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed71.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed72 = Entry(DemographicSectionframe)
        medProMed72.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed72, 7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed72.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed73 = Entry(DemographicSectionframe)
        medProMed73.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed73, 7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed73.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 8
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 8')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 7:
            name = medArr[7][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed81 = Entry(DemographicSectionframe)
        medProMed81.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed81, 8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed81.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed82 = Entry(DemographicSectionframe)
        medProMed82.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed82, 8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed82.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed83 = Entry(DemographicSectionframe)
        medProMed83.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed83, 8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed83.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 9
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 9')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 8:
            name = medArr[8][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed91 = Entry(DemographicSectionframe)
        medProMed91.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed91, 9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed91.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed92 = Entry(DemographicSectionframe)
        medProMed92.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed92, 9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed92.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed93 = Entry(DemographicSectionframe)
        medProMed93.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed93, 9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed93.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #MEDICATION 10
        r = r+1
        label = Label(DemographicSectionframe, text = '\nMedication 10')
        label.grid(row = r, column = 0, sticky = 'w')

        if len(medArr) > 9:
            name = medArr[9][0]
            
            curr.execute("SELECT Amount_Including_Dosage FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            amount = curr.fetchall()[0][0]
            if amount is None:
                amount = 'Unanswered'

            curr.execute("SELECT Times_To_Give FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, name,))
            frequency = curr.fetchall()[0][0]
            if frequency is None:
                frequency = 'Unanswered'
        else:
            name = 'Unanswered'
            amount = 'Unanswered'
            frequency = 'Unanswered'

        #taken
        label = Label(DemographicSectionframe, text = "Medication Name ....................................................................................................................... ")
        medProMed101 = Entry(DemographicSectionframe)
        medProMed101.insert(0, name)              
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed1(medProMed101, 10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed101.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #amount
        label = Label(DemographicSectionframe, text = "Amount and Dosage ................................................................................................................... ")
        medProMed102 = Entry(DemographicSectionframe)
        medProMed102.insert(0, amount)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed2(medProMed102, 10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed102.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #frequency
        label = Label(DemographicSectionframe, text = "Times to Take Medicine .............................................................................................................. ")
        medProMed103 = Entry(DemographicSectionframe)
        medProMed103.insert(0, frequency)
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProMed3(medProMed103, 10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProMed103.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#medcare provider verification statement ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nMEDICAL PROVIDER VERIFICATION STATEMENT")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #signature
        curr.execute("SELECT Signature FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nSignature Provided? ................................................................................................................... ")
        medProvVerState0 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = medProvVerState0, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = medProvVerState0, value=2)

        if val is not None:
            if val is 0:
                medProvVerState0.set(2)
            else:
                medProvVerState0.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState0(medProvVerState0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #signature date
        curr.execute("SELECT Sig_Date FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nDate (YYYY-MM-DD) .................................................................................................................. ")
        medProvVerState1 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState1.insert(0, val)
        else:
            medProvVerState1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState1(medProvVerState1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #name
        curr.execute("SELECT Name FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nExaminer Name .......................................................................................................................... ")
        medProvVerState2 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState2.insert(0, val)
        else:
            medProvVerState2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState2(medProvVerState2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address street
        curr.execute("SELECT Address_Street FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nAddress Street ........................................................................................................................... ")
        medProvVerState3 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState3.insert(0, val)
        else:
            medProvVerState3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState3(medProvVerState3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address city
        curr.execute("SELECT Address_City FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nAddress City .............................................................................................................................. ")
        medProvVerState4 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState4.insert(0, val)
        else:
            medProvVerState4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState4(medProvVerState4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address state
        curr.execute("SELECT Address_State FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nAddress State ............................................................................................................................ ")
        medProvVerState5 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState5.insert(0, val)
        else:
            medProvVerState5.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState5(medProvVerState5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address zip
        curr.execute("SELECT Address_Zip FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nAddress Zipcode ........................................................................................................................ ")
        medProvVerState6 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState6.insert(0, val)
        else:
            medProvVerState6.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState6(medProvVerState6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #phone
        curr.execute("SELECT Phone FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nPhone ........................................................................................................................................ ")
        medProvVerState7 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState7.insert(0, val)
        else:
            medProvVerState7.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState7(medProvVerState7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #emergency contact
        curr.execute("SELECT Emergency_Contact FROM Medical_Provider_Verification_Statement WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nEmergency Contact .................................................................................................................... ")
        medProvVerState8 = Entry(DemographicSectionframe)

        if val is not None:
            medProvVerState8.insert(0, val)
        else:
            medProvVerState8.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateMedProvVerState8(medProvVerState8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        medProvVerState8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#
#HIV provider sections
#

        #header
        r=r+1
        labelDemographicSection = Label(DemographicSectionframe, text = "\n\nHIV PROVIDER SECTION")
        labelDemographicSection.grid(row = r, columnspan = 2)
        labelDemographicSection.config(font=("Helvetica", 25))

#health history ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nHEALTH HISTORY INFORMATION FROM HIV PROVIDER")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #surgical history
        curr.execute("SELECT Major_Surgical_History FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nMajor Surgical History ................................................................................................................ ")
        healthHistory0 = Entry(DemographicSectionframe)

        if val is not None:
            healthHistory0.insert(0, val)
        else:
            healthHistory0.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateHealthHistory0(healthHistory0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        healthHistory0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #health history
        label = Label(DemographicSectionframe, text = "\nHealth History ............................................................................................................................ ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateHealthHistory1(healthHistory1, healthHistory2, healthHistory3, healthHistory4, healthHistory5,
            healthHistory6, healthHistory7, healthHistory8, healthHistory9, healthHistory10, healthHistory11, healthHistory12, healthHistory13, healthHistory14, healthHistory15, healthHistory16, healthHistory17,
            healthHistory18, healthHistory19, id, date))
        buttonUpdate.grid(row = r, column = 2)

        curr.execute("SELECT Health_History FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        #HIV
        healthHistory1 = IntVar()
        Checkbutton(DemographicSectionframe, text="HIV", variable = healthHistory1).grid(row = r,  column = 1, sticky = W)

        #Hepatitis B
        healthHistory2 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Hepatitis B", variable = healthHistory2).grid(row = r,  column = 1, sticky = W)
 
        #Hepatitis C
        healthHistory3 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Hepatitis C", variable = healthHistory3).grid(row = r,  column = 1, sticky = W)
 
        #Poor growth
        healthHistory4 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Poor growth", variable = healthHistory4).grid(row = r,  column = 1, sticky = W)
 
        #Bleeding disorders
        healthHistory5 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Bleeding disorders", variable = healthHistory5).grid(row = r,  column = 1, sticky = W)
 
        #Asthma
        healthHistory6 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Asthma", variable = healthHistory6).grid(row = r,  column = 1, sticky = W)
 
        #Pulmonary Disease
        healthHistory7 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Pulmonary Disease", variable = healthHistory7).grid(row = r,  column = 1, sticky = W)

        #Chronic Cough
        healthHistory8 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Chronic Cough", variable = healthHistory8).grid(row = r,  column = 1, sticky = W)
 
        #ADD or ADHD
        healthHistory9 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="ADD or ADHD", variable = healthHistory9).grid(row = r,  column = 1, sticky = W)
  
        #Renal Disease
        healthHistory10 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Renal Disease", variable = healthHistory10).grid(row = r,  column = 1, sticky = W)
   
        #Sickle Cell disease
        healthHistory11 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Sickle Cell disease", variable = healthHistory11).grid(row = r,  column = 1, sticky = W)
   
        #Congenital Heart Disease
        healthHistory12 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Congenital Heart Disease", variable = healthHistory12).grid(row = r,  column = 1, sticky = W)
   
        #Hypertension
        healthHistory13 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Hypertension", variable = healthHistory13).grid(row = r,  column = 1, sticky = W)
   
        #Cryptosporidium
        healthHistory14 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Cryptosporidium", variable = healthHistory14).grid(row = r,  column = 1, sticky = W)
   
        #Chronic diarrhea
        healthHistory15 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Chronic diarrhea", variable = healthHistory15).grid(row = r,  column = 1, sticky = W)
   
        #Seizures
        healthHistory16 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Seizures", variable = healthHistory16).grid(row = r,  column = 1, sticky = W)
   
        #Diabetes
        healthHistory17 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Diabetes", variable = healthHistory17).grid(row = r,  column = 1, sticky = W)
   
        #Other
        healthHistory18 = IntVar()
        r = r+1
        Checkbutton(DemographicSectionframe, text="Other", variable = healthHistory18).grid(row = r,  column = 1, sticky = W)
 
        if val is not None:
            if 'HIV' in val:
                healthHistory1.set(1)
            if 'Hepatitis B' in val:
                healthHistory2.set(1)
            if 'Hepatitis C' in val:
                healthHistory3.set(1)
            if 'Poor growth' in val:
                healthHistory4.set(1)
            if 'Bleeding disorders' in val:
                healthHistory5.set(1)
            if 'Asthma' in val:
                healthHistory6.set(1)
            if 'Pulmonary Disease' in val:
                healthHistory7.set(1)
            if 'Chronic Cough' in val:
                healthHistory8.set(1)
            if 'ADD or ADHD' in val:
                healthHistory9.set(1)
            if 'Renal Disease' in val:
                healthHistory10.set(1)
            if 'Sickle Cell disease' in val:
                healthHistory11.set(1)
            if 'Congenital Heart Disease' in val:
                healthHistory12.set(1)
            if 'Hypertension' in val:
                healthHistory13.set(1)
            if 'Cryptosporidium' in val:
                healthHistory14.set(1)
            if 'Chronic diarrhea' in val:
                healthHistory15.set(1)
            if 'Seizures' in val:
                healthHistory16.set(1)
            if 'Diabetes' in val:
                healthHistory17.set(1)
            if 'Other' in val:
                healthHistory18.set(1)

        #If other
        curr.execute("SELECT Other FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        healthHistory19 = Entry(DemographicSectionframe, width = 14)
        if val is not None:
            healthHistory19.insert(0, val)
        else:
            healthHistory19.insert(0, 'Unanswered')

        healthHistory19.grid(row = r, column = 1, sticky = E)

        #history of noncompliance
        curr.execute("SELECT History_of_Noncompliance FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nHistory of Noncompliance? ......................................................................................................... ")
        healthHistory20 = IntVar()

        Yes = Radiobutton(DemographicSectionframe, text = "Yes", variable = healthHistory20, value=1)
        No = Radiobutton(DemographicSectionframe, text = "No", variable = healthHistory20, value=2)

        if val is not None:
            if val is 0:
                healthHistory20.set(2)
            else:
                healthHistory20.set(1)
 
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateHealthHistory2(healthHistory20, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #explanation
        curr.execute("SELECT Explanation FROM Health_History WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nExplanation of Noncompliance .................................................................................................... ")
        healthHistory21 = Entry(DemographicSectionframe)

        if val is not None:
            healthHistory21.insert(0, val)
        else:
            healthHistory21.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateHealthHistory3(healthHistory21, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        healthHistory21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#lab data ************************************************************************************************************************
        #header
        labelContactsSection = Label(DemographicSectionframe, text = "\n\nLAB DATA")
        r = r+1
        labelContactsSection.grid(row = r, columnspan = 2)
        labelContactsSection.config(font=("Helvetica", 20))

        #lab1 date
        curr.execute("SELECT Lab1_Date FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nDate of First Lab Examination (YYYY-MM-DD) ............................................................................ ")
        lab0 = Entry(DemographicSectionframe)

        if val is not None:
            lab0.insert(0, val)
        else:
            lab0.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab0(lab0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 wbc
        curr.execute("SELECT Lab1_WBC FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "White Blood Cell Count .............................................................................................................. ")
        lab1 = Entry(DemographicSectionframe)

        if val is not None:
            lab1.insert(0, val)
        else:
            lab1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab1(lab1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 wbc
        curr.execute("SELECT Lab1_HGB FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Hemoglobin Level ....................................................................................................................... ")
        lab2 = Entry(DemographicSectionframe)

        if val is not None:
            lab2.insert(0, val)
        else:
            lab2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab2(lab2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 hct
        curr.execute("SELECT Lab1_HCT FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Hematocrit Level ........................................................................................................................ ")
        lab3 = Entry(DemographicSectionframe)

        if val is not None:
            lab3.insert(0, val)
        else:
            lab3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab3(lab3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab1 plt
        curr.execute("SELECT Lab1_Plt_Count FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Plt Count .................................................................................................................................... ")
        lab4 = Entry(DemographicSectionframe)

        if val is not None:
            lab4.insert(0, val)
        else:
            lab4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab4(lab4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #spacing
        r = r+1
        label = Label(DemographicSectionframe).grid(row = r, column = 1)

        #lab2 date
        curr.execute("SELECT Lab2_Date FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nDate of Second Lab Examination (YYYY-MM-DD) ........................................................................ ")
        lab5 = Entry(DemographicSectionframe)

        if val is not None:
            lab5.insert(0, val)
        else:
            lab5.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab5(lab5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab2 cd4
        curr.execute("SELECT Lab2_CD4_Count FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... ")
        lab6 = Entry(DemographicSectionframe)

        if val is not None:
            lab6.insert(0, val)
        else:
            lab6.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab6(lab6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab2 viral load
        curr.execute("SELECT Lab2_Viral_Load FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... ")
        lab7 = Entry(DemographicSectionframe)

        if val is not None:
            lab7.insert(0, val)
        else:
            lab7.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab7(lab7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #spacing
        r = r+1
        label = Label(DemographicSectionframe).grid(row = r, column = 1)

        #lab3 date
        curr.execute("SELECT Lab3_Date FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "\nDate of Third Lab Examination (YYYY-MM-DD) ........................................................................... ")
        lab8 = Entry(DemographicSectionframe)

        if val is not None:
            lab8.insert(0, val)
        else:
            lab8.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab8(lab8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab3 cd4
        curr.execute("SELECT Lab3_CD4_Count FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "CD4 (T-Cell) Count ..................................................................................................................... ")
        lab9 = Entry(DemographicSectionframe)

        if val is not None:
            lab9.insert(0, val)
        else:
            lab9.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab9(lab9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #lab3 viral load
        curr.execute("SELECT Lab3_Viral_Load FROM Lab_Data WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(DemographicSectionframe, text = "Viral Load ................................................................................................................................... ")
        lab10 = Entry(DemographicSectionframe)

        if val is not None:
            lab10.insert(0, val)
        else:
            lab10.insert(0, 'Unanswered')
            
        buttonUpdate = Button(DemographicSectionframe, text = "Update", command = lambda:self.updateLab10(lab10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        lab10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        r = r+1
        prevButtonTwo = Button(DemographicSectionframe, text = "Prev Page", command = lambda:self.EditCampProfilePage(id, date))
        prevButtonTwo.grid(row = r, column = 0, sticky = "W")

#************************************************************************************************************************

#Close Database Connection
        self.disConnect(curr, db)

    def deleteCampApp(self, id, date):
        if askyesno('Verify', 'Really delete?'):

            #Open Database Connection
            db = pymysql.connect(host = "localhost", user="root", passwd="Darling", db="HERO" )
            curr = db.cursor()

            #Execute
            curr.execute("DELETE FROM Camp_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()
            
            #Close Database Connection
            self.disConnect(curr, db)
            
            #UI feedback
            showwarning('Delete', 'Application Deleted')

            #Go back to 1st level profile page (call back if you can)
            self.master.destroy()

        else:
            #Delete canclled
            showinfo('No', 'Delete has been cancelled')

#************************************************************************************************************************

#
#parent sections
#

#Update Demographic info ************************************************************************************************************************
    def updateDemInfo0(self, demInfo0, id, date, test):
        #Database Connection
        db = self.connect()
        curr = db.cursor()


        #Execute
        newVal = demInfo0.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET First_Name = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Demographic_Information SET First_Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo1(self, demInfo1, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = demInfo1.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Last_Name = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Demographic_Information SET Last_Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Middle_Initial = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 1):
            curr.execute("UPDATE Demographic_Information SET Middle_Initial = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 1 character.")        

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Age = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Demographic_Information SET Age = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMust be only numbers.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo4(self, newWidget, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Date_Of_Birth = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Demographic_Information SET Date_Of_Birth = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo5(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Demographic_Information SET Gender = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Race = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 20):
            curr.execute("UPDATE Demographic_Information SET Race = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 20 characters.")        

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo7(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Primary_Language = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 20):
            curr.execute("UPDATE Demographic_Information SET Primary_Language = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 20 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo8(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Address_Street = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Demographic_Information SET Address_Street = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo9(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Address_City = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Demographic_Information SET Address_City = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo10(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Address_State = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 2):
            curr.execute("UPDATE Demographic_Information SET Address_State = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 2 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo11(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Address_County = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Demographic_Information SET Address_County = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo12(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Address_Zip = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Demographic_Information SET Address_Zip = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMust be only numbers.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo13(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Camper_Email = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 70):
            curr.execute("UPDATE Demographic_Information SET Camper_Email = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 70 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo14(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Parent_Email = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 70):
            curr.execute("UPDATE Demographic_Information SET Parent_Email = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 70 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo15(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Guardian_Name = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 60):
            curr.execute("UPDATE Demographic_Information SET Guardian_Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 60 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo16(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Guardian_Camper_Relationship = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Demographic_Information SET Guardian_Camper_Relationship = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo17(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Information SET Last_Grade_Completed = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Demographic_Information SET Last_Grade_Completed = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo18(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Demographic_Information SET Special_Ed_Classes = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo19(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Demographic_Information SET Siblings_Applying = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDemInfo20(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Demographic_Information SET T_Shirt = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)
    
    def updateDemInfo21(self, demTrans0, demTrans1, demTrans2, demTrans3,
            demTrans4, demTrans5, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if demTrans0.get():
            newVal = newVal + 'Atlanta bus,'

        if demTrans1.get():
            newVal = newVal + 'Augusta bus,'

        if demTrans2.get():
            newVal = newVal + 'Albany bus,'

        if demTrans3.get():
            newVal = newVal + 'Athens bus,'

        if demTrans4.get():
            newVal = newVal + 'Savannah bus,'

        if demTrans5.get():
            newVal = newVal + 'Car/drop,'

        if newVal == '':
            curr.execute("UPDATE Demographic_Information SET Planned_Transportation = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Demographic_Information SET Planned_Transportation = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#demographic contacts ************************************************************************************************************************
    def updateContactDemInfo10(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Contacts SET Name = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 60):
            curr.execute("UPDATE Demographic_Contacts SET Name = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 60 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)
        
    def updateContactDemInfo11(self, demContactInfoTime10, demContactInfoTime11, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if demContactInfoTime10.get():
            newVal = newVal + 'Day,'
        
        if demContactInfoTime11.get():
            newVal = newVal + 'Evening,'

        if newVal == '':
            curr.execute("UPDATE Demographic_Contacts SET Time_Preference = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Demographic_Contacts SET Time_Preference = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateContactDemInfo12(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Contacts SET Phone_Number = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 10):
            curr.execute("UPDATE Demographic_Contacts SET Phone_Number = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateContactDemInfo20(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Contacts SET Name = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 60):
            curr.execute("UPDATE Demographic_Contacts SET Name = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 60 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)
        
    def updateContactDemInfo21(self, demContactInfoTime20, demContactInfoTime21, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if demContactInfoTime20.get():
            newVal = newVal + 'Day,'
        
        if demContactInfoTime21.get():
            newVal = newVal + 'Evening,'

        if newVal == '':
            curr.execute("UPDATE Demographic_Contacts SET Time_Preference = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Demographic_Contacts SET Time_Preference = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateContactDemInfo22(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Contacts SET Phone_Number = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 10):
            curr.execute("UPDATE Demographic_Contacts SET Phone_Number = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Home';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateContactDemInfo30(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Contacts SET Name = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 60):
            curr.execute("UPDATE Demographic_Contacts SET Name = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 60 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)
        
    def updateContactDemInfo31(self, demContactInfoTime30, demContactInfoTime31, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if demContactInfoTime30.get():
            newVal = newVal + 'Day,'
        
        if demContactInfoTime31.get():
            newVal = newVal + 'Evening,'

        if newVal == '':
            curr.execute("UPDATE Demographic_Contacts SET Time_Preference = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Demographic_Contacts SET Time_Preference = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateContactDemInfo32(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Demographic_Contacts SET Phone_Number = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 10):
            curr.execute("UPDATE Demographic_Contacts SET Phone_Number = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Work';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Parent/ Guardian Emergency Contact Section ************************************************************************************************************************
    def updateEmergencyInfo0(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Name FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        if len(emergencyContacts) > 0 and count is 1:
            oldName = emergencyContacts[0][0]
        elif len(emergencyContacts) > 1 and count is 2:
            oldName = emergencyContacts[1][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                if askyesno('Verify', '\nDeleting the name of an emergency contact will delete all of the information for that contact.\nAre you sure you want to delete?'):
                    curr.execute("DELETE FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, oldName,))
                    tkMessageBox.showinfo("Edit Profile", "Update Successful!")
                else:
                    tkMessageBox.showinfo("Edit Profile", "Update Canceled")
        elif (len(newVal) <= 60):
            if oldName is not None:
                curr.execute("UPDATE Parent_Emergency_Contact SET Name = %s WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (newVal, id, date, oldName,))
            else:
                curr.execute("INSERT INTO Parent_Emergency_Contact (Name, ID, Date_Submitted) VALUES (%s, %s, %s);", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 60 characters.")        

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateEmergencyInfo1(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Name FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        if len(emergencyContacts) > 0 and count is 1:
            oldName = emergencyContacts[0][0]
        elif len(emergencyContacts) > 1 and count is 2:
            oldName = emergencyContacts[1][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE Parent_Emergency_Contact SET Relationship = NULL WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, oldName,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            if oldName is not None:
                curr.execute("UPDATE Parent_Emergency_Contact SET Relationship = %s WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (newVal, id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nAn emergency contact must have a name.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)


    def updateEmergencyInfo2(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Name FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        if len(emergencyContacts) > 0 and count is 1:
            oldName = emergencyContacts[0][0]
        elif len(emergencyContacts) > 1 and count is 2:
            oldName = emergencyContacts[1][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE Parent_Emergency_Contact SET Daytime_Phone = NULL WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, oldName,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) == 10):
            if oldName is not None:
                curr.execute("UPDATE Parent_Emergency_Contact SET Daytime_Phone = %s WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (newVal, id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nAn emergency contact must have a name.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateEmergencyInfo3(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Name FROM Parent_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        if len(emergencyContacts) > 0 and count is 1:
            oldName = emergencyContacts[0][0]
        elif len(emergencyContacts) > 1 and count is 2:
            oldName = emergencyContacts[1][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE Parent_Emergency_Contact SET Evening_Phone = NULL WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (id, date, oldName,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) == 10):
            if oldName is not None:
                curr.execute("UPDATE Parent_Emergency_Contact SET Evening_Phone = %s WHERE ID = %s AND Date_Submitted = %s AND Name = %s;", (newVal, id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nAn emergency contact must have a name.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Insurance Info Section ************************************************************************************************************************
    def updateInsuranceInfo0(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Insurance_Information SET Type_of_Health_Insurance = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateInsuranceInfo1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Insurance_Information SET Private_Insurance_Name = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Insurance_Information SET Private_Insurance_Name = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateInsuranceInfo2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Insurance_Information SET Policy_Number = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Insurance_Information SET Policy_Number = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)


    def updateInsuranceInfo3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Insurance_Information SET Group_Number = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Insurance_Information SET Group_Number = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Medical Provider Section ************************************************************************************************************************
    def updateMedProviderInfo0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Information SET Medical_Provider_Name = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Medical_Provider_Information SET Medical_Provider_Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProviderInfo1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Information SET Phone_Office = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 10):
            curr.execute("UPDATE Medical_Provider_Information SET Phone_Office = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProviderInfo2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Information SET Pharmacy_Name = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Medical_Provider_Information SET Pharmacy_Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProviderInfo3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Information SET Phone_Pharmacy = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 10):
            curr.execute("UPDATE Medical_Provider_Information SET Phone_Pharmacy = %s WHERE ID = %s AND Date_Submitted = %s AND Type = 'Cell';", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Medical Information Section ************************************************************************************************************************
    def updateMedInfoCurr(self, medInfoCurr0, medInfoCurr1, medInfoCurr2, medInfoCurr3, medInfoCurr4,
            medInfoCurr5, medInfoCurr6, medInfoCurr7, medInfoCurr8, medInfoCurr9, medInfoCurr10, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if medInfoCurr0.get():
            newVal = newVal + 'HIV,'

        if medInfoCurr1.get():
            newVal = newVal + 'Hepatitis B,'

        if medInfoCurr2.get():
            newVal = newVal + 'Hepatitis C,'

        if medInfoCurr3.get():
            newVal = newVal + 'ADD or ADHD,'

        if medInfoCurr4.get():
            newVal = newVal + 'Sickle Cell Disease,'

        if medInfoCurr5.get():
            newVal = newVal + 'Asthma,'

        if medInfoCurr6.get():
            newVal = newVal + 'Tubes in Ears,'
        
        if medInfoCurr7.get():
            newVal = newVal + 'Heart Problems,'
        
        if medInfoCurr8.get():
            newVal = newVal + 'Mental Health Diagnoses,'
        
        if medInfoCurr9.get():
            newVal = newVal + 'Other,'

        if newVal == '':
            curr.execute("UPDATE Medical_Information SET Current_Medical_Conditions = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Medical_Information SET Current_Medical_Conditions = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))

        other = medInfoCurr10.get()
        if (other == 'Unanswered') or (other == ''):
            curr.execute("UPDATE Medical_Information SET Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(other) <= 20):
            curr.execute("UPDATE Medical_Information SET Other = %s WHERE ID = %s AND Date_Submitted = %s;", (other, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 20 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedInfo1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Information SET Medical_Condition_Explanation = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Medical_Provider_Information SET Medical_Provider_Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Allergies Section ************************************************************************************************************************
    def updateAllergyInfo0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Allergies SET Med_Allergy = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateAllergyInfo1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Allergies SET Med_Reaction = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 200):
            curr.execute("UPDATE Allergies SET Med_Reaction = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 200 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateAllergyInfo2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Allergies SET Food_Allergy = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateAllergyInfo3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Allergies SET Food_Reaction = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 200):
            curr.execute("UPDATE Allergies SET Food_Reaction = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 200 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)
    
    def updateAllergyInfo4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Allergies SET Env_Allergy = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateAllergyInfo5(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Allergies SET Env_Reaction = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 200):
            curr.execute("UPDATE Allergies SET Env_Reaction = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 200 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)
    
    def updateAllergyInfo6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Allergies SET EpiPen = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Dietary Needs Section ************************************************************************************************************************
    def updateDietaryNeedsInfo0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Dietary_Needs SET Special_Dietary_Needs = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Dietary_Needs SET Vegetarian = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Dietary_Needs SET Food_Restrictions = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 200):
            curr.execute("UPDATE Dietary_Needs SET Food_Restrictions = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 200 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo3(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Dietary_Needs SET G_Tube = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Dietary_Needs SET Formula_Supplement = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo5(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Dietary_Needs SET Formula_Supplement_How = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Dietary_Needs SET Formula_Type = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Dietary_Needs SET Formula_Type = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo7(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Dietary_Needs SET Formula_Cans_Per_Day = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Dietary_Needs SET Formula_Cans_Per_Day = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMust be only numbers.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo8(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Dietary_Needs SET Feeding_Pump = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo9(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Dietary_Needs SET Pump_Type = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Dietary_Needs SET Pump_Type = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateDietaryNeedsInfo10(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Dietary_Needs SET Feeding_Schedule = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 200):
            curr.execute("UPDATE Dietary_Needs SET Feeding_Schedule = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 200 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#General health ************************************************************************************************************************
    def genHealthLimit(self, genHealthLimit0, genHealthLimit1, genHealthLimit2, genHealthLimit3, genHealthLimit4,
            genHealthLimit5, genHealthLimit6, genHealthLimit7, genHealthLimit8, genHealthLimit9, genHealthLimit10, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if genHealthLimit0.get():
            newVal = newVal + 'Dressing,'

        if genHealthLimit1.get():
            newVal = newVal + 'Showering,'

        if genHealthLimit2.get():
            newVal = newVal + 'Eating,'

        if genHealthLimit3.get():
            newVal = newVal + 'Toileting,'

        if genHealthLimit4.get():
            newVal = newVal + 'Walking/Balance,'

        if genHealthLimit5.get():
            newVal = newVal + 'Braces,'

        if genHealthLimit6.get():
            newVal = newVal + 'Casts,'

        if genHealthLimit7.get():
            newVal = newVal + 'Walker,'

        if genHealthLimit8.get():
            newVal = newVal + 'Wheelchair,'

        if genHealthLimit9.get():
            newVal = newVal + 'Other,'

        if newVal == '':
            curr.execute("UPDATE General_Health SET Physical_Limitations = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE General_Health SET Physical_Limitations = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))

        other = genHealthLimit10.get()
        if (other == 'Unanswered') or (other == ''):
            curr.execute("UPDATE General_Health SET Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(other) <= 50):
            curr.execute("UPDATE General_Health SET Other = %s WHERE ID = %s AND Date_Submitted = %s;", (other, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateGenHealth1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE General_Health SET Tire_Easily = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateGenHealth2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE General_Health SET Swim = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateGenHealth3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE General_Health SET Chicken_Pox = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)


    def updateGenHealth4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE General_Health SET Chicken_Pox_Date = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE General_Health SET Chicken_Pox_Date = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateGenHealth5(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE General_Health SET Menstrual_Cycle = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateGenHealth6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE General_Health SET Menstrual_Difficulties = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 300):
            curr.execute("UPDATE General_Health SET Menstrual_Difficulties = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 300 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Behavior ************************************************************************************************************************
    def updateBehavior0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Camper_Knows = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateBehavior1(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Time_Camper_Known = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateBehaviorExperiances(self, behaviorExperiances0, behaviorExperiances1, behaviorExperiances2, behaviorExperiances3, behaviorExperiances4,
            behaviorExperiances5, behaviorExperiances6, behaviorExperiances7, behaviorExperiances8, behaviorExperiances9, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if behaviorExperiances0.get():
            newVal = newVal + 'Anxiety,'
        
        if behaviorExperiances1.get():
            newVal = newVal + 'Fear of dark,'
        
        if behaviorExperiances2.get():
            newVal = newVal + 'Homesickness,'
        
        if behaviorExperiances3.get():
            newVal = newVal + 'Sleeps with night light,'
        
        if behaviorExperiances4.get():
            newVal = newVal + 'Fights easily,'
        
        if behaviorExperiances5.get():
            newVal = newVal + 'School suspension due to behavior,'
        
        if behaviorExperiances6.get():
            newVal = newVal + 'Bedwetting,'
        
        if behaviorExperiances7.get():
            newVal = newVal + 'Sleeps with comfort item,'
        
        if behaviorExperiances8.get():
            newVal = newVal + 'Hyperactivity or problems with attention,'
        
        if behaviorExperiances9.get():
            newVal = newVal + 'History of trauma or sexual abuse,'

        if newVal == '':
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Camper_Experiences = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Camper_Experiences = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateBehavior2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Med_Hyper_AttentionProb = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateBehavior3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE General_Health SET Explanation = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 600):
            curr.execute("UPDATE General_Health SET Explanation = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 600 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateBehaviorInterests(self, behaviorInterests0, behaviorInterests1, behaviorInterests2, behaviorInterests3, behaviorInterests4,
            behaviorInterests5, behaviorInterests6, behaviorInterests7, behaviorInterests8, behaviorInterests9,
            behaviorInterests10, behaviorInterests11, behaviorInterests12, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if behaviorInterests0.get():
            newVal = newVal + 'Reading,'

        if behaviorInterests1.get():
            newVal = newVal + 'Music,'

        if behaviorInterests2.get():
            newVal = newVal + 'Swimming,'

        if behaviorInterests3.get():
            newVal = newVal + 'Dance,'

        if behaviorInterests4.get():
            newVal = newVal + 'Sports,'

        if behaviorInterests5.get():
            newVal = newVal + 'Arts/Crafts,'

        if behaviorInterests6.get():
            newVal = newVal + 'Fishing,'

        if behaviorInterests7.get():
            newVal = newVal + 'Boating,'

        if behaviorInterests8.get():
            newVal = newVal + 'Archery,'

        if behaviorInterests9.get():
            newVal = newVal + 'Golf,'

        if behaviorInterests10.get():
            newVal = newVal + 'Bicycling,'

        if behaviorInterests11.get():
            newVal = newVal + 'Animals,'

        if behaviorInterests12.get():
            newVal = newVal + 'Nature,'

        if newVal == '':
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Camper_Interests = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Camper_Interests = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateBehavior4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Recent_Major_Events = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Pyschosocial_and_Behavioral_info SET Recent_Major_Events = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Medication Info ************************************************************************************************************************
    def updateMed0(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Medication FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        if len(emergencyContacts) > 0 and count is 1:
            oldName = emergencyContacts[0][0]
        elif len(emergencyContacts) > 1 and count is 2:
            oldName = emergencyContacts[1][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                if askyesno('Verify', '\nDeleting the name of a medication will delete all of the information for that medication.\nAre you sure you want to delete?'):
                    curr.execute("DELETE FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, oldName,))
                    tkMessageBox.showinfo("Edit Profile", "Update Successful!")
                else:
                    tkMessageBox.showinfo("Edit Profile", "Update Canceled")
        elif (len(newVal) <= 50):
            if oldName is not None:
                curr.execute("UPDATE Parent_Medications SET Medication = %s WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (newVal, id, date, oldName,))
            else:
                curr.execute("INSERT INTO Parent_Medications (Medication, ID, Date_Submitted) VALUES (%s, %s, %s);", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMed1(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Medication FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        if len(emergencyContacts) > 0 and count is 1:
            oldName = emergencyContacts[0][0]
        elif len(emergencyContacts) > 1 and count is 2:
            oldName = emergencyContacts[1][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE Parent_Medications SET Amount = NULL WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, oldName,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            if oldName is not None:
                curr.execute("UPDATE Parent_Medications SET Amount = %s WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (newVal, id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMedication must have a name.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)


    def updateMed2(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Medication FROM Parent_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        emergencyContacts = curr.fetchall()
        if len(emergencyContacts) > 0 and count is 1:
            oldName = emergencyContacts[0][0]
        elif len(emergencyContacts) > 1 and count is 2:
            oldName = emergencyContacts[1][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE Parent_Medications SET Time_Instruction = NULL WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (id, date, oldName,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            if oldName is not None:
                curr.execute("UPDATE Parent_Medications SET Time_Instruction = %s WHERE ID = %s AND Date_Submitted = %s AND Medication = %s;", (newVal, id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMedication must have a name.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Preliminary signatures ************************************************************************************************************************
    def updateParentSig0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Release_Forms_Signed SET Parent_Camper_Contract = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateParentSig1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Release_Forms_Signed SET Partcipation_Consent_Liability_Release = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateParentSig2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Release_Forms_Signed SET Media_Release = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateParentSig3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Release_Forms_Signed SET Camper_HIV_Education = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateParentSig4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Release_Forms_Signed SET Camp_Twin_Lakes_Rules = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateParentSig5(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Release_Forms_Signed SET Parental_Consent_and_Release = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#
#Medical provider sections
#

#medical history ************************************************************************************************************************
    def updateDiagnosis(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Diagnosis FROM Med_Hist_Diagnosis WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        arr = curr.fetchall()
        if len(arr) > 0 and count is 1:
            oldName = arr[0][0]
        elif len(arr) > 1 and count is 2:
            oldName = arr[1][0]
        elif len(arr) > 2 and count is 3:
            oldName = arr[2][0]
        elif len(arr) > 3 and count is 4:
            oldName = arr[3][0]
        elif len(arr) > 4 and count is 5:
            oldName = arr[4][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("DELETE FROM Med_Hist_Diagnosis WHERE ID = %s AND Date_Submitted = %s AND Diagnosis = %s;", (id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            if oldName is not None:
                curr.execute("UPDATE Med_Hist_Diagnosis SET Diagnosis = %s WHERE ID = %s AND Date_Submitted = %s AND Diagnosis = %s;", (newVal, id, date, oldName,))
            else:
                curr.execute("INSERT INTO Med_Hist_Diagnosis (Diagnosis, ID, Date_Submitted) VALUES (%s, %s, %s);", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvider5(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_History SET Management = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Medical_History SET Management = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvider6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Medical_History SET Nutritional_Supplements = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvider7(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_History SET Feeding_Care = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Medical_History SET Feeding_Care = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvider8(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Medical_History SET Formula_Type = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)
    
    def updateMedHistAllergy(self, newWidget, type, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Allergy FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, type,))
        arr = curr.fetchall()
        if len(arr) > 0 and count is 1:
            oldAllergy = arr[0][0]
        elif len(arr) > 1 and count is 2:
            oldAllergy = arr[1][0]
        elif len(arr) > 2 and count is 3:
            oldAllergy = arr[2][0]
        elif len(arr) > 3 and count is 4:
            oldAllergy = arr[3][0]
        elif len(arr) > 4 and count is 5:
            oldAllergy = arr[4][0]
        else:
            oldAllergy = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldAllergy is not None:
                if askyesno('Verify', '\nDeleting the name of an allergy will delete all of the information for that allergy.\nAre you sure you want to delete?'):
                    curr.execute("DELETE FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Type = %s AND Allergy = %s;", (id, date, type, oldAllergy,))
                    tkMessageBox.showinfo("Edit Profile", "Update Successful!")
                else:
                    tkMessageBox.showinfo("Edit Profile", "Update Canceled")
        elif (len(newVal) <= 30):
            if oldAllergy is not None:
                curr.execute("UPDATE Med_Hist_Allergies SET Allergy = %s WHERE ID = %s AND Date_Submitted = %s AND Type = %s AND Allergy = %s;", (newVal, id, date, type, oldAllergy,))
            else:
                curr.execute("INSERT INTO Med_Hist_Allergies (Type, Allergy, ID, Date_Submitted) VALUES (%s, %s, %s);", (type, newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedHistReaction(self, newWidget, type, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Allergy FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, type,))
        arr = curr.fetchall()
        if len(arr) > 0 and count is 1:
            oldAllergy = arr[0][0]
        elif len(arr) > 1 and count is 2:
            oldAllergy = arr[1][0]
        elif len(arr) > 2 and count is 3:
            oldAllergy = arr[2][0]
        elif len(arr) > 3 and count is 4:
            oldAllergy = arr[3][0]
        elif len(arr) > 4 and count is 5:
            oldAllergy = arr[4][0]
        else:
            oldAllergy = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldAllergy is not None:
                curr.execute("DELETE FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s;", (id, date, oldAllergy,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            if oldAllergy is not None:
                curr.execute("UPDATE Med_Hist_Allergies SET Allergy = %s WHERE ID = %s AND Date_Submitted = %s AND Allergy = %s;", (newVal, id, date, oldAllergy,))
            else:
                curr.execute("INSERT INTO Med_Hist_Allergies (Allergy, ID, Date_Submitted) VALUES (%s, %s, %s);", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedHistReaction(self, newWidget, type, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()
        
        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Allergy FROM Med_Hist_Allergies WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, type,))
        arr = curr.fetchall()
        if len(arr) > 0 and count is 1:
            oldAllergy = arr[0][0]
        elif len(arr) > 1 and count is 2:
            oldAllergy = arr[1][0]
        elif len(arr) > 2 and count is 3:
            oldAllergy = arr[2][0]
        elif len(arr) > 3 and count is 4:
            oldAllergy = arr[3][0]
        elif len(arr) > 4 and count is 5:
            oldAllergy = arr[4][0]
        else:
            oldAllergy = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE Med_Hist_Allergies SET Reaction = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = %s AND Allergy = %s;", (id, date, type, oldAllergy,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            if oldName is not None:
                curr.execute("UPDATE Med_Hist_Allergies SET Reaction = %s WHERE ID = %s AND Date_Submitted = %s AND Type = %s AND Allergy = %s;", (newVal, id, date, type, oldAllergy,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nReaction must have an allergy.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#physical ************************************************************************************************************************
    def updatePhysical0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Date_Completed = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Physical_Exam SET Date_Completed = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Height = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Height = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Weight = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Physical_Exam SET Weight = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMust be only numbers.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Pulse = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Physical_Exam SET Pulse = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMust be only numbers.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Resperations = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Physical_Exam SET Resperations = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMust be only numbers.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical5(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Blood_Pressure = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Blood_Pressure = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET HEENT = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET HEENT = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical7(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Skin = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Skin = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical8(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Cardiovascular = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Cardiovascular = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical9(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET GU_GYN = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET GU_GYN = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical10(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Pulmonary = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Pulmonary = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical11(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Glasses_HearingAids_PE = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Glasses_HearingAids_PE = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical12(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Abdomen = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Abdomen = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical13(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Lymph_Nodes = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Lymph_Nodes = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical14(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Extremities = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Extremities = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical15(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Spine = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Physical_Exam SET Spine = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical16(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Miscellaneous = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Physical_Exam SET Miscellaneous = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updatePhysical17(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Physical_Exam SET Comments = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Physical_Exam SET Comments = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#cognative development level ************************************************************************************************************************
    def updateCogDev0(self, newWidget, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != '':
            curr.execute("UPDATE Cognitive_Development_Level SET Development_Level = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateCogDev1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Cognitive_Development_Level SET Other_Psychosocial_Information = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 1000):
            curr.execute("UPDATE Cognitive_Development_Level SET Other_Psychosocial_Information = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 1000 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Varicella screening ************************************************************************************************************************
    def updateVaricella0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Varicella_Screening SET Two_Doses = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateVaricella1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Varicella_Screening SET Chicken_Pox = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateGenHealth2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Varicella_Screening SET Chicken_Pox_Date = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Varicella_Screening SET Chicken_Pox_Date = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateVaricella3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Varicella_Screening SET Varicella_Antibody = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateGenHealth4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Varicella_Screening SET Varicella_Antibody_Date = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Varicella_Screening SET Varicella_Antibody_Date = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#tuberculosis screening ************************************************************************************************************************
    def updateTuberculosis1(self, newWidget, type, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Tuberculosis_Screening SET Date_Screened = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, type,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Tuberculosis_Screening SET Date_Screened = %s WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (newVal, id, date, type,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateTuberculosis2(self, newWidget, type, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Tuberculosis_Screening SET Result = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, type,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 70):
            curr.execute("UPDATE Tuberculosis_Screening SET Result = %s WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (newVal, id, date, type,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 70 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#Restrictions_And_Recommendations ************************************************************************************************************************
    def updateRestrictionsRec(self, newWidget, type, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Care_Provider SET Restrictions_And_Recommendations = NULL WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (id, date, type,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 1000):
            curr.execute("UPDATE Medical_Care_Provider SET Restrictions_And_Recommendations = %s WHERE ID = %s AND Date_Submitted = %s AND Type = %s;", (newVal, id, date, type,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 1000 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#medcare provider medications ************************************************************************************************************************
    def updateMedProMed1(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Medication_Name FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        arr = curr.fetchall()
        if len(arr) > 0 and count is 1:
            oldName = arr[0][0]
        elif len(arr) > 1 and count is 2:
            oldName = arr[1][0]
        elif len(arr) > 2 and count is 3:
            oldName = arr[2][0]
        elif len(arr) > 3 and count is 4:
            oldName = arr[3][0]
        elif len(arr) > 4 and count is 5:
            oldName = arr[4][0]
        elif len(arr) > 5 and count is 6:
            oldName = arr[5][0]
        elif len(arr) > 6 and count is 7:
            oldName = arr[6][0]
        elif len(arr) > 7 and count is 8:
            oldName = arr[7][0]
        elif len(arr) > 8 and count is 9:
            oldName = arr[8][0]
        elif len(arr) > 9 and count is 10:
            oldName = arr[9][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                if askyesno('Verify', '\nDeleting the name of a medication will delete all of the information for that medication.\nAre you sure you want to delete?'):
                    curr.execute("DELETE FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, oldName,))
                    tkMessageBox.showinfo("Edit Profile", "Update Successful!")
                else:
                    tkMessageBox.showinfo("Edit Profile", "Update Canceled")
        elif (len(newVal) <= 100):
            if oldName is not None:
                curr.execute("UPDATE MedCareProvider_Medications SET Medication_Name = %s WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (newVal, id, date, oldName,))
            else:
                curr.execute("INSERT INTO MedCareProvider_Medications (Medication_Name, ID, Date_Submitted) VALUES (%s, %s, %s);", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProMed2(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Medication_Name FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        arr = curr.fetchall()
        if len(arr) > 0 and count is 1:
            oldName = arr[0][0]
        elif len(arr) > 1 and count is 2:
            oldName = arr[1][0]
        elif len(arr) > 2 and count is 3:
            oldName = arr[2][0]
        elif len(arr) > 3 and count is 4:
            oldName = arr[3][0]
        elif len(arr) > 4 and count is 5:
            oldName = arr[4][0]
        elif len(arr) > 5 and count is 6:
            oldName = arr[5][0]
        elif len(arr) > 6 and count is 7:
            oldName = arr[6][0]
        elif len(arr) > 7 and count is 8:
            oldName = arr[7][0]
        elif len(arr) > 8 and count is 9:
            oldName = arr[8][0]
        elif len(arr) > 9 and count is 10:
            oldName = arr[9][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE MedCareProvider_Medications SET Amount_Including_Dosage = NULL WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, oldName,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            if oldName is not None:
                curr.execute("UPDATE MedCareProvider_Medications SET Amount_Including_Dosage = %s WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (newVal, id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMedication must have a name.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)


    def updateMedProMed3(self, newWidget, count, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        curr.execute("SELECT Medication_Name FROM MedCareProvider_Medications WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        arr = curr.fetchall()
        if len(arr) > 0 and count is 1:
            oldName = arr[0][0]
        elif len(arr) > 1 and count is 2:
            oldName = arr[1][0]
        elif len(arr) > 2 and count is 3:
            oldName = arr[2][0]
        elif len(arr) > 3 and count is 4:
            oldName = arr[3][0]
        elif len(arr) > 4 and count is 5:
            oldName = arr[4][0]
        elif len(arr) > 5 and count is 6:
            oldName = arr[5][0]
        elif len(arr) > 6 and count is 7:
            oldName = arr[6][0]
        elif len(arr) > 7 and count is 8:
            oldName = arr[7][0]
        elif len(arr) > 8 and count is 9:
            oldName = arr[8][0]
        elif len(arr) > 9 and count is 10:
            oldName = arr[9][0]
        else:
            oldName = None;

        if (newVal == 'Unanswered') or (newVal == ''):
            if oldName is not None:
                curr.execute("UPDATE MedCareProvider_Medications SET Times_To_Give = NULL WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (id, date, oldName,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            if oldName is not None:
                curr.execute("UPDATE MedCareProvider_Medications SET Times_To_Give = %s WHERE ID = %s AND Date_Submitted = %s AND Medication_Name = %s;", (newVal, id, date, oldName,))
                tkMessageBox.showinfo("Edit Profile", "Update Successful!")
            else:
                tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMedication must have a name.")        
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#medcare provider verification statement ************************************************************************************************************************
    def updateMedProvVerState0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Signature = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Sig_Date = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Sig_Date = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Name = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 40):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 40 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_Street = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_Street = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_City = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_City = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState5(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_State = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 2):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_State = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 2 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_Zip = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Address_Zip = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMust be only numbers.")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState7(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Phone = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) is 10):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Phone = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nLength must be 10 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateMedProvVerState8(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Emergency_Contact = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Medical_Provider_Verification_Statement SET Emergency_Contact = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#
#HIV provider sections
#

#health history ************************************************************************************************************************
    def updateHealthHistory0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Health_History SET Major_Surgical_History = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Health_History SET Major_Surgical_History = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateHealthHistory1(self, healthHistory1, healthHistory2, healthHistory3, healthHistory4, healthHistory5, healthHistory6, healthHistory7, 
        healthHistory8, healthHistory9, healthHistory10, healthHistory11, healthHistory12, healthHistory13, healthHistory14, healthHistory15, 
        healthHistory16, healthHistory17, healthHistory18, healthHistory19, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''
        if healthHistory1.get():
            newVal = newVal + 'HIV,'

        if healthHistory2.get():
            newVal = newVal + 'Hepatitis B,'

        if healthHistory3.get():
            newVal = newVal + 'Hepatitis C,'

        if healthHistory4.get():
            newVal = newVal + 'Poor growth,'

        if healthHistory5.get():
            newVal = newVal + 'Bleeding disorders,'

        if healthHistory6.get():
            newVal = newVal + 'Asthma,'

        if healthHistory7.get():
            newVal = newVal + 'Pulmonary Disease,'

        if healthHistory8.get():
            newVal = newVal + 'Chronic Cough,'

        if healthHistory9.get():
            newVal = newVal + 'ADD or ADHD,'

        if healthHistory10.get():
            newVal = newVal + 'Renal Disease,'

        if healthHistory11.get():
            newVal = newVal + 'Sickle Cell disease,'

        if healthHistory12.get():
            newVal = newVal + 'Congenital Heart Disease,'

        if healthHistory13.get():
            newVal = newVal + 'Hypertension,'

        if healthHistory14.get():
            newVal = newVal + 'Cryptosporidium,'

        if healthHistory15.get():
            newVal = newVal + 'Chronic diarrhea,'

        if healthHistory16.get():
            newVal = newVal + 'Seizures,'

        if healthHistory17.get():
            newVal = newVal + 'Diabetes,'

        if healthHistory18.get():
            newVal = newVal + 'Other,'

        if newVal == '':
            curr.execute("UPDATE Health_History SET Health_History = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Health_History SET Health_History = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))

        other = healthHistory19.get()
        if (other == 'Unanswered') or (other == ''):
            curr.execute("UPDATE Health_History SET Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(other) <= 20):
            curr.execute("UPDATE Health_History SET Other = %s WHERE ID = %s AND Date_Submitted = %s;", (other, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 20 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateHealthHistory2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Health_History SET History_of_Noncompliance = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateHealthHistory3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Health_History SET Explanation = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 500):
            curr.execute("UPDATE Health_History SET Explanation = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 500 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

#lab data ************************************************************************************************************************
    def updateLab0(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab1_Date = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Lab_Data SET Lab1_Date = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab1(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab1_WBC = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 6):
            curr.execute("UPDATE Lab_Data SET Lab1_WBC = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 6 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab2(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab1_HGB = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 4):
            curr.execute("UPDATE Lab_Data SET Lab1_HGB = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 4 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab3(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab1_HCT = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 3):
            curr.execute("UPDATE Lab_Data SET Lab1_HCT = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 3 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab4(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab1_Plt_Count = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 6):
            curr.execute("UPDATE Lab_Data SET Lab1_Plt_Count = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 6 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab5(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab2_Date = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Lab_Data SET Lab2_Date = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab6(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab2_CD4_Count = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 4):
            curr.execute("UPDATE Lab_Data SET Lab2_CD4_Count = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 4 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab7(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab2_Viral_Load = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 5):
            curr.execute("UPDATE Lab_Data SET Lab2_Viral_Load = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 5 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab8(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab3_Date = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Lab_Data SET Lab3_Date = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab9(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab3_CD4_Count = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 4):
            curr.execute("UPDATE Lab_Data SET Lab3_CD4_Count = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 4 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)

    def updateLab10(self, newWidget, id, date):
        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = newWidget.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Lab_Data SET Lab3_Viral_Load = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 5):
            curr.execute("UPDATE Lab_Data SET Lab3_Viral_Load = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 5 characters.")        
                
        #Close Database Connection
        db.commit()
        self.disConnect(curr, db)


#******************************************************************************************************************************************************

    def EditChildProfilePage(self, id, date):

        #setup
        self.EditChildProfilePageRoot = Toplevel()
        root = self.EditChildProfilePageRoot
        if self.PrevPage is 'SecondChildProfilePage':
            self.SecondChildProfilePageRoot.withdraw()
        self.PrevPage = 'EditChildProfilePage'
        root.title("Edit Child Profile Page")

        self.canvas = Canvas(root)
        master = Frame(self.canvas)

        scrollbarY = Scrollbar(root, orient = "vertical", command = self.canvas.yview)
        scrollbarY.pack(side = RIGHT, fill = Y)
        scrollbarX = Scrollbar(root, orient = "horizontal", command = self.canvas.xview)
        scrollbarX.pack(side = BOTTOM, fill = X)

        self.canvas.configure(xscrollcommand = scrollbarX.set, yscrollcommand = scrollbarY.set)
        self.canvas.pack(side = "left", fill = "both", expand = True)
        self.canvas.create_window((4,4), window = master, anchor="nw", 
                                  tags="master")

        master.bind("<Configure>", self.onFrameConfigure)
        root.geometry("1000x1000")

        #Database Connection
        db = self.connect()
        curr = db.cursor()

#Buttons
        #frame
        buttonframe = Frame(master)
        buttonframe.pack(side = "top", fill = "x")

        #back
        backButton = Button(buttonframe, text = "Back", command = lambda:self.SecondChildProfilePage(id, date))
        backButton.pack(side = "left")

        exitButton = Button(buttonframe, text = "Exit", command=lambda: self.exit())
        exitButton.pack(side = "left")

        #delete
        deleteButton = Button(buttonframe, text = "Delete Application", command = lambda:self.deleteChildApp(id, date))
        deleteButton.pack(side = "right")
        
#Child info section ************************************************************************************************************************
        ChildInfoSectionframe = Frame(master)
        ChildInfoSectionframe.pack(fill = 'y', side = 'left') 
        r = 0

        #header
        labelChildInfoSection = Label(ChildInfoSectionframe, text = "\nCHILD'S INFORMATION")
        labelChildInfoSection.grid(row = r, column = 0)
        labelChildInfoSection.config(font=("Helvetica", 20))

        #first name
        curr.execute("SELECT Name_First FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        childInfo0 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo0.insert(0, val)
        else:
            childInfo0.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo0(childInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        curr.execute("SELECT Name_Last FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        childInfo1 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo1.insert(0, val)
        else:
            childInfo1.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo1(childInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #nickname
        curr.execute("SELECT Name_Nickname FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nNickname .............................................................................................. ")
        childInfo2 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo2.insert(0, val)
        else:
            childInfo2.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo2(childInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address street
        curr.execute("SELECT Address_Street FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... ")
        childInfo3 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo3.insert(0, val)
        else:
            childInfo3.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo3(childInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address city
        curr.execute("SELECT Address_City FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... ")
        childInfo4 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo4.insert(0, val)
        else:
            childInfo4.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo4(childInfo4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #address county
        curr.execute("SELECT Address_County FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. ")
        childInfo5 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo5.insert(0, val)
        else:
            childInfo5.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo5(childInfo5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #address zip
        curr.execute("SELECT Address_Zip FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ ")
        childInfo6 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo6.insert(0, val)
        else:
            childInfo6.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo6(childInfo6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #home phone
        curr.execute("SELECT Home_Phone FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nHome Phone .......................................................................................... ")
        childInfo7 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo7.insert(0, val)
        else:
            childInfo7.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo7(childInfo7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #guardian phone
        curr.execute("SELECT Guardian_Phone FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's Cell Phone ................................................................ ")
        childInfo8 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo8.insert(0, val)
        else:
            childInfo8.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo8(childInfo8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #guardian email
        curr.execute("SELECT Guardian_Email FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nParent/Guardian's e-mail address .......................................................... ")
        childInfo9 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo9.insert(0, val)
        else:
            childInfo9.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo9(childInfo9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #age
        curr.execute("SELECT Age FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... ")
        childInfo10 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo10.insert(0, val)
        else:
            childInfo10.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo10(childInfo10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #birthday
        curr.execute("SELECT Birthday FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nDate of Birth (YYYY-MM-DD) ................................................................ ")
        childInfo11 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo11.insert(0, val)
        else:
            childInfo11.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo11(childInfo11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #gender
        label = Label(ChildInfoSectionframe, text = "\nGender .................................................................................................. ")

        curr.execute("SELECT Gender FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        childInfo12 = StringVar()
        
        choices = ['Male','Female']
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo12, *choices)

        if val is not None:
            childInfo12.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo12(childInfo12, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #HIV status
        label = Label(ChildInfoSectionframe, text = "\nHIV status ............................................................................................. ")

        curr.execute("SELECT HIV_Status FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        childInfo13 = StringVar()
        
        choices = ['HIV Positive','HIV Negative']
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo13, *choices)

        if val is not None:
            childInfo13.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo13(childInfo13, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #aware
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nIs the child aware that he/she is HIV positive or')
        label.grid(row = r, column = 0, sticky = 'w')
        label = Label(ChildInfoSectionframe, text = 'that a member of the household is HIV positive? ................................... ')

        curr.execute("SELECT Aware FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo14 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo14, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo14, value=2)

        if val is not None:
            if val is 0:
                childInfo14.set(2)
            else:
                childInfo14.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo14(childInfo14, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #why
        curr.execute("SELECT Why FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "If no, please provide a reason why child is not aware .............................. ")
        childInfo15 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo15.insert(0, val)
        else:
            childInfo15.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo15(childInfo15, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Referral source
        curr.execute("SELECT Referral_Source FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nReferral Source ..................................................................................... ")
        childInfo16 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo16.insert(0, val)
        else:
            childInfo16.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo16(childInfo16, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo16.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #school attending
        curr.execute("SELECT School_attending FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nSchool Attending .................................................................................. ")
        childInfo17 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo17.insert(0, val)
        else:
            childInfo17.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo17(childInfo17, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo17.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Grade Level
        curr.execute("SELECT School_grade_level FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nGrade Level ........................................................................................... ")
        childInfo18 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo18.insert(0, val)
        else:
            childInfo18.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo18(childInfo18, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo18.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Ethnicity
        label = Label(ChildInfoSectionframe, text = "\nEthnicity ............................................................................................... ")

        curr.execute("SELECT Ethnicity FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        childInfo19 = StringVar()
        
        choices = ['White/Caucasian','Black/African-American','Hispanic/Latino',
        'Native American','Asian/Pacific Islander/Indian Sub-Continent','Multi-racial','Other']
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo19, *choices)

        if val is not None:
            childInfo19.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo19(childInfo19, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Ethnicity Other
        curr.execute("SELECT Ethnicity_Other FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "If Other ................................................................................................. ")
        childInfo20 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo20.insert(0, val)
        else:
            childInfo20.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo20(childInfo20, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Even been...
        label = Label(ChildInfoSectionframe, text = "\nHas your child ever been...")
        r = r+1
        label.grid(row = r, column = 0, sticky = 'w')
        
        #ADD_ADHD
        r = r+1
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with ADD/ADHD? ................................................................. ')

        curr.execute("SELECT ADD_ADHD FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo21 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo21, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo21, value=2)

        if val is not None:
            if val is 0:
                childInfo21.set(2)
            else:
                childInfo21.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo21(childInfo21, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)
        
        #Learning_Disability
        r = r+1
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with a learning disability? .................................................... ')

        curr.execute("SELECT Learning_Disability FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo22 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo22, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo22, value=2)

        if val is not None:
            if val is 0:
                childInfo22.set(2)
            else:
                childInfo22.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo22(childInfo22, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)
        
        #Developmental_Disability
        r = r+1
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with a developmental disability? .......................................... ')

        curr.execute("SELECT Developmental_Disability FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo23 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo23, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo23, value=2)

        if val is not None:
            if val is 0:
                childInfo23.set(2)
            else:
                childInfo23.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo23(childInfo23, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)
        
        #Mental_Health_Issues
        r = r+1
        label = Label(ChildInfoSectionframe, text = 'Diagnosed with any mental health issues? ............................................. ')

        curr.execute("SELECT Mental_Health_Issues FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo24 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo24, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo24, value=2)

        if val is not None:
            if val is 0:
                childInfo24.set(2)
            else:
                childInfo24.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo24(childInfo24, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)
        
        #Other_Medical_Condition
        r = r+1
        label = Label(ChildInfoSectionframe, text = 'Diagnosed or suffered from any other medical condition? ..................... ')

        curr.execute("SELECT Other_Medical_Condition FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo25 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo25, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo25, value=2)

        if val is not None:
            if val is 0:
                childInfo25.set(2)
            else:
                childInfo25.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo25(childInfo25, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)
        
        #Victim_of_Abuse
        r = r+1
        label = Label(ChildInfoSectionframe, text = 'A victim of sexual abuse, physical or emotional abuse? ......................... ')

        curr.execute("SELECT Victim_of_Abuse FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo26 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo26, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo26, value=2)

        if val is not None:
            if val is 0:
                childInfo26.set(2)
            else:
                childInfo26.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo26(childInfo26, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)
        
        #Criminal_Justice_System
        r = r+1
        label = Label(ChildInfoSectionframe, text = 'Part of the criminal justice system? ...................................................... ')

        curr.execute("SELECT Criminal_Justice_System FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        childInfo27 = IntVar()

        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = childInfo27, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = childInfo27, value=2)

        if val is not None:
            if val is 0:
                childInfo27.set(2)
            else:
                childInfo27.set(1)
 
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo27(childInfo27, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #Custody
        label = Label(ChildInfoSectionframe, text = "\nWho has legal custody of the child? ...................................................... ")

        curr.execute("SELECT Legal_Custody FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        childInfo28 = StringVar()

        choices = ['Mother','Father','Both Parents','Aunt/Uncle','Grandparent','Pending Court Action','Other']        
        option = tk.OptionMenu(ChildInfoSectionframe, childInfo28, *choices)

        if val is not None:
            childInfo28.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo28(childInfo28, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Custody Other
        curr.execute("SELECT Custody_Other FROM Childs_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "If Other ................................................................................................. ")
        childInfo29 = Entry(ChildInfoSectionframe)

        if val is not None:
            childInfo29.insert(0, val)
        else:
            childInfo29.insert(0, 'Unanswered')
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildInfo29(childInfo29, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        childInfo29.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Parent/ Guardian Section *******************************************************************************************************************
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nPARENT/GUARDIAN INFORMATION")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #first name
        curr.execute("SELECT Name_First FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        parentInfo0 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo0.insert(0, val)
        else:
            parentInfo0.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo0(parentInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        curr.execute("SELECT Name_Last FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        parentInfo1 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo1.insert(0, val)
        else:
            parentInfo1.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo1(parentInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Relationship to child
        curr.execute("SELECT Relationship_to_Child FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nRelationship to child ............................................................................. ")
        parentInfo2 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo2.insert(0, val)
        else:
            parentInfo2.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo2(parentInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Age
        curr.execute("SELECT Age FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nAge ....................................................................................................... ")
        parentInfo3 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo3.insert(0, val)
        else:
            parentInfo3.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo3(parentInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #HIV status
        label = Label(ChildInfoSectionframe, text = "\nHIV status ............................................................................................. ")

        curr.execute("SELECT HIV_Status FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        parentInfo4 = StringVar()
        
        choices = ['HIV Positive','HIV Negative']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo4, *choices)

        if val is not None:
            parentInfo4.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo4(parentInfo4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Adoptive Parent
        label = Label(ChildInfoSectionframe, text = "\nAdoptive Parent ..................................................................................... ")

        curr.execute("SELECT Adoptive_Parent FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        parentInfo5 = StringVar()
        
        choices = ['Yes','No','Not Applicable']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo5, *choices)

        if val is not None:
            parentInfo5.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo5(parentInfo5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Marital Status
        label = Label(ChildInfoSectionframe, text = "\nMarital Status ...................................................................................... ")

        curr.execute("SELECT Marital_Status FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        parentInfo6 = StringVar()
        
        choices = ['Married','Single','Separated','Divorced','Widowed']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo6, *choices)

        if val is not None:
            parentInfo6.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo6(parentInfo6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Highest Level of Education Completed
        label = Label(ChildInfoSectionframe, text = "\nHighest Level of Education Completed .................................................. ")

        curr.execute("SELECT Education_Completed FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        parentInfo7 = StringVar()
        
        choices = ['HS','GED','Some College','Associates Degree','Bachelor Degree','Master Degree','Doctorate']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo7, *choices)

        if val is not None:
            parentInfo7.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo7(parentInfo7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Employment Status
        label = Label(ChildInfoSectionframe, text = "\nEmployment Status ............................................................................... ")

        curr.execute("SELECT Employment_Status FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        parentInfo8 = StringVar()
        
        choices = ['Full-Time','Part-Time','Unemployed','Disability']
        option = tk.OptionMenu(ChildInfoSectionframe, parentInfo8, *choices)

        if val is not None:
            parentInfo8.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo8(parentInfo8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Employment Company
        curr.execute("SELECT Employment_Company_Name FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        r= r+1
        label = Label(ChildInfoSectionframe, text = "\nIf employed,")
        label.grid(row = r, column = 0, sticky = 'w')
        label = Label(ChildInfoSectionframe, text = "please provide Company Name ............................................................. ")

        parentInfo9 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo9.insert(0, val)
        else:
            parentInfo9.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo9(parentInfo9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Address
        curr.execute("SELECT Address_Street FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nAddress ................................................................................................ ")
        parentInfo10 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo10.insert(0, val)
        else:
            parentInfo10.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo10(parentInfo10, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #City
        curr.execute("SELECT Address_City FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... ")
        parentInfo11 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo11.insert(0, val)
        else:
            parentInfo11.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo11(parentInfo11, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #State
        curr.execute("SELECT Address_State FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nState .................................................................................................... ")
        parentInfo12 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo12.insert(0, val)
        else:
            parentInfo12.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo12(parentInfo12, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo12.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Zip
        curr.execute("SELECT Address_Zip FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ ")
        parentInfo13 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo13.insert(0, val)
        else:
            parentInfo13.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo13(parentInfo13, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Work Phone
        curr.execute("SELECT WorkPhone FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nWork Phone .......................................................................................... ")
        parentInfo14 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo14.insert(0, val)
        else:
            parentInfo14.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo14(parentInfo14, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo14.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #E-mail
        curr.execute("SELECT Email FROM Parent_Guardian_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nE-mail ................................................................................................... ")
        parentInfo15 = Entry(ChildInfoSectionframe)

        if val is not None:
            parentInfo15.insert(0, val)
        else:
            parentInfo15.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildparentInfo15(parentInfo15, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        parentInfo15.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#Absent Parent Info ************************************************************************************************************************
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nABSENT PARENT INFORMATION")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #first name
        curr.execute("SELECT Name_First FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        absParentInfo0 = Entry(ChildInfoSectionframe)

        if val is not None:
            absParentInfo0.insert(0, val)
        else:
            absParentInfo0.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo0(absParentInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        absParentInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        curr.execute("SELECT Name_Last FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        absParentInfo1 = Entry(ChildInfoSectionframe)

        if val is not None:
            absParentInfo1.insert(0, val)
        else:
            absParentInfo1.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo1(absParentInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        absParentInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Telephone
        curr.execute("SELECT Telephone FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nTelephone .............................................................................................. ")
        absParentInfo2 = Entry(ChildInfoSectionframe)

        if val is not None:
            absParentInfo2.insert(0, val)
        else:
            absParentInfo2.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo2(absParentInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        absParentInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Home Address
        curr.execute("SELECT Address_Street FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... ")
        absParentInfo3 = Entry(ChildInfoSectionframe)

        if val is not None:
            absParentInfo3.insert(0, val)
        else:
            absParentInfo3.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo3(absParentInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        absParentInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #City
        curr.execute("SELECT Address_City FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nCity ....................................................................................................... ")
        absParentInfo4 = Entry(ChildInfoSectionframe)

        if val is not None:
            absParentInfo4.insert(0, val)
        else:
            absParentInfo4.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo4(absParentInfo4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        absParentInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #County
        curr.execute("SELECT Address_County FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nCounty .................................................................................................. ")
        absParentInfo5 = Entry(ChildInfoSectionframe)

        if val is not None:
            absParentInfo5.insert(0, val)
        else:
            absParentInfo5.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo5(absParentInfo5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        absParentInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Zip
        curr.execute("SELECT Address_Zip FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nZip ......................................................................................................... ")
        absParentInfo6 = Entry(ChildInfoSectionframe)

        if val is not None:
            absParentInfo6.insert(0, val)
        else:
            absParentInfo6.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo6(absParentInfo6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        absParentInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #HIV status
        label = Label(ChildInfoSectionframe, text = "\nHIV status ............................................................................................. ")

        curr.execute("SELECT HIV_Status FROM Absent_Parent_Information WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        absParentInfo7 = StringVar()
        
        choices = ['HIV Positive','HIV Negative', 'Unkown']
        option = tk.OptionMenu(ChildInfoSectionframe, absParentInfo7, *choices)

        if val is not None:
            absParentInfo7.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildabsParentInfo7(absParentInfo7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

#HouChildsehold Info ************************************************************************************************************************
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nHOUSEHOLD INFORMATION")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #list all individuals living in the household
        label = Label(ChildInfoSectionframe, text = "\nAll Individuals Living in the Household")
        r = r+1
        label.grid(row = r, column = 0)

    #person1
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 1')
        label.grid(row = r, column = 0, sticky = 'w')
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildhouseInfo(1,
            houseInfo10, houseInfo11, houseInfo12, houseInfo13, houseInfo14, id, date))
        buttonUpdate.grid(row = r, column = 2)

        person = 1
        
        #Name1
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")

        curr.execute("SELECT Name FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo10 = Entry(ChildInfoSectionframe)

        if (val is ()) or (val[0][0] is None):
            houseInfo10.insert(0, 'Unanswered')
        else: 
            houseInfo10.insert(0, val[0][0])

        r = r+1
        houseInfo10.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Relationship to Child1
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")

        curr.execute("SELECT Relationship FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo11 = Entry(ChildInfoSectionframe)

        if (val is ()) or (val[0][0] is None):
            houseInfo11.insert(0, 'Unanswered')
        else: 
            houseInfo11.insert(0, val[0][0])

        r = r+1
        houseInfo11.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Sex1
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")

        curr.execute("SELECT Sex FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo12 = StringVar()
        
        choices = ['Male', 'Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo12, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo12.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)    

        #Age1
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")

        curr.execute("SELECT Age FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo13 = Entry(ChildInfoSectionframe)

        if (val is ()) or (val[0][0] is None):
            houseInfo13.insert(0, 'Unanswered')
        else: 
            houseInfo13.insert(0, val[0][0])

        r = r+1
        houseInfo13.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
 
        #HIV Status1
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")

        curr.execute("SELECT HIV_Status FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo14 = StringVar()
        
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo14, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo14.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)       

    #person2
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 2')
        label.grid(row = r, column = 0, sticky = 'w')
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildhouseInfo(2,
            houseInfo20, houseInfo21, houseInfo22, houseInfo23, houseInfo24, id, date))
        buttonUpdate.grid(row = r, column = 2)

        person = 2
        
        #Name2
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")

        curr.execute("SELECT Name FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo20 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo20.insert(0, 'Unanswered')
        else: 
            houseInfo20.insert(0, val[0][0])

        r = r+1
        houseInfo20.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Relationship to Child2
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")

        curr.execute("SELECT Relationship FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo21 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo21.insert(0, 'Unanswered')
        else: 
            houseInfo21.insert(0, val[0][0])

        r = r+1
        houseInfo21.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Sex2
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")

        curr.execute("SELECT Sex FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo22 = StringVar()
        
        choices = ['Male', 'Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo22, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo22.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)    

        #Age2
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")

        curr.execute("SELECT Age FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo23 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo23.insert(0, 'Unanswered')
        else: 
            houseInfo23.insert(0, val[0][0])

        r = r+1
        houseInfo23.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
 
        #HIV Status2
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")

        curr.execute("SELECT HIV_Status FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo24 = StringVar()
        
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo24, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo24.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)        

    #person3
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 3')
        label.grid(row = r, column = 0, sticky = 'w')
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildhouseInfo(3,
            houseInfo30, houseInfo31, houseInfo32, houseInfo33, houseInfo34, id, date))
        buttonUpdate.grid(row = r, column = 2)


        person = 3
        
        #Name3
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")

        curr.execute("SELECT Name FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo30 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo30.insert(0, 'Unanswered')
        else: 
            houseInfo30.insert(0, val[0][0])

        r = r+1
        houseInfo30.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Relationship to Child3
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")

        curr.execute("SELECT Relationship FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo31 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo31.insert(0, 'Unanswered')
        else: 
            houseInfo31.insert(0, val[0][0])

        r = r+1
        houseInfo31.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Sex3
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")

        curr.execute("SELECT Sex FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo32 = StringVar()
        
        choices = ['Male', 'Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo32, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo32.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)   

        #Age3
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")

        curr.execute("SELECT Age FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo33 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo33.insert(0, 'Unanswered')
        else: 
            houseInfo33.insert(0, val[0][0])

        r = r+1
        houseInfo33.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
 
        #HIV Status3
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")

        curr.execute("SELECT HIV_Status FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo34 = StringVar()
        
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo34, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo34.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)     

    #person4
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 4')
        label.grid(row = r, column = 0, sticky = 'w')
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildhouseInfo(4,
            houseInfo40, houseInfo41, houseInfo42, houseInfo43, houseInfo44, id, date))
        buttonUpdate.grid(row = r, column = 2)

        person = 4
        
        #Name4
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")

        curr.execute("SELECT Name FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo40 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo40.insert(0, 'Unanswered')
        else: 
            houseInfo40.insert(0, val[0][0])

        r = r+1
        houseInfo40.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Relationship to Child4
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")

        curr.execute("SELECT Relationship FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo41 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo41.insert(0, 'Unanswered')
        else: 
            houseInfo41.insert(0, val[0][0])

        r = r+1
        houseInfo41.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Sex4
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")

        curr.execute("SELECT Sex FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo42 = StringVar()
        
        choices = ['Male', 'Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo42, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo42.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0) 

        #Age4
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")

        curr.execute("SELECT Age FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo43 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo43.insert(0, 'Unanswered')
        else: 
            houseInfo43.insert(0, val[0][0])

        r = r+1
        houseInfo43.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
 
        #HIV Status4
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")

        curr.execute("SELECT HIV_Status FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo44 = StringVar()
        
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo44, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo44.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)         

    #person5
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 5')
        label.grid(row = r, column = 0, sticky = 'w')
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildhouseInfo(5,
            houseInfo50, houseInfo51, houseInfo52, houseInfo53, houseInfo54, id, date))
        buttonUpdate.grid(row = r, column = 2)

        person = 5
        
        #Name5
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")

        curr.execute("SELECT Name FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo50 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo50.insert(0, 'Unanswered')
        else: 
            houseInfo50.insert(0, val[0][0])

        r = r+1
        houseInfo50.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Relationship to Child5
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")

        curr.execute("SELECT Relationship FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo51 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo51.insert(0, 'Unanswered')
        else: 
            houseInfo51.insert(0, val[0][0])

        r = r+1
        houseInfo51.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Sex5
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")

        curr.execute("SELECT Sex FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo52 = StringVar()
        
        choices = ['Male', 'Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo52, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo52.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0) 

        #Age5
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")

        curr.execute("SELECT Age FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo53 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo53.insert(0, 'Unanswered')
        else: 
            houseInfo53.insert(0, val[0][0])

        r = r+1
        houseInfo53.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
 
        #HIV Status5
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")

        curr.execute("SELECT HIV_Status FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo54 = StringVar()
        
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo54, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo54.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

    #person6
        r = r+1
        label = Label(ChildInfoSectionframe, text = '\nPerson 6')
        label.grid(row = r, column = 0, sticky = 'w')
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildhouseInfo(6,
            houseInfo60, houseInfo61, houseInfo62, houseInfo63, houseInfo64, id, date))
        buttonUpdate.grid(row = r, column = 2)

        person = 6

        #Name6
        label = Label(ChildInfoSectionframe, text = "Name .................................................................................................... ")

        curr.execute("SELECT Name FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo60 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo60.insert(0, 'Unanswered')
        else: 
            houseInfo60.insert(0, val[0][0])

        r = r+1
        houseInfo60.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Relationship to Child6
        label = Label(ChildInfoSectionframe, text = "Relationship to Child ............................................................................. ")

        curr.execute("SELECT Relationship FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo61 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo61.insert(0, 'Unanswered')
        else: 
            houseInfo61.insert(0, val[0][0])

        r = r+1
        houseInfo61.grid(row = r, column = 1)
        label.grid(row = r, column = 0)        

        #Sex6
        label = Label(ChildInfoSectionframe, text = "Sex ....................................................................................................... ")

        curr.execute("SELECT Sex FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo62 = StringVar()
        
        choices = ['Male', 'Female']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo62, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo62.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0) 

        #Age6
        label = Label(ChildInfoSectionframe, text = "Age ....................................................................................................... ")

        curr.execute("SELECT Age FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo63 = Entry(ChildInfoSectionframe)
        
        if (val is ()) or (val[0][0] is None):
            houseInfo63.insert(0, 'Unanswered')
        else: 
            houseInfo63.insert(0, val[0][0])

        r = r+1
        houseInfo63.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
 
        #HIV Status6
        label = Label(ChildInfoSectionframe, text = "HIV Status ............................................................................................ ")

        curr.execute("SELECT HIV_Status FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, person,))
        val = curr.fetchall()

        houseInfo64 = StringVar()
        
        choices = ['HIV Positive','HIV Negative','Unknown']
        option = tk.OptionMenu(ChildInfoSectionframe, houseInfo64, *choices)

        if (val is not ()) and (val[0][0] is not None):
            houseInfo64.set(val[0][0])

        r = r+1
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)


        #Family Annual Income Info
        label = Label(ChildInfoSectionframe, text = "\n\nFamily Annual Income Information ......................................................... ")

        curr.execute("SELECT Fam_Annual_Income FROM Fam_Annual_Income WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        famIncome0 = StringVar()
        
        choices = ['$0-10,000','$10,001-15,000','$15,001-20,000','$20,000-25,000','$25,001-30,000','$30,001-35,000','$35,001-40,000','$40,001-45,000','$50,000+']
        option = tk.OptionMenu(ChildInfoSectionframe, famIncome0, *choices)

        if val is not None:
            famIncome0.set(val)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildfamIncome0(famIncome0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        option.grid(row = r, column = 1, ipadx = 70)
        label.grid(row = r, column = 0)

        #Source of Family Income
        label = Label(ChildInfoSectionframe, text = "\nSource of Family Income ....................................................................... ")
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildfamIncome1(
            famIncome1, famIncome2, famIncome3, famIncome4, famIncome5, famIncome6, famIncome7, famIncome8, famIncome9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        label.grid(row = r, column = 0)

        curr.execute("SELECT Source_Fam_Income FROM Source_Fam_Income WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        famIncome1 = IntVar()
        Checkbutton(ChildInfoSectionframe, text = "Employment", variable = famIncome1).grid(row = r, column = 1, sticky = W)
        
        famIncome2 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = "Government Support", variable = famIncome2).grid(row = r, column = 1, sticky = W)
        
        famIncome3 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = "Public Assistance", variable = famIncome3).grid(row = r, column = 1, sticky = W)        
        
        famIncome4 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = "Unemployment Benefits", variable = famIncome4).grid(row = r, column = 1, sticky = W)
                    
        famIncome5 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = "Medicaid", variable = famIncome5).grid(row = r, column = 1, sticky = W)
    
        famIncome6 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = "Social Security", variable = famIncome6).grid(row = r, column = 1, sticky = W)
        
        famIncome7 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = "Veterans Benefits", variable = famIncome7).grid(row = r, column = 1, sticky = W)
        
        famIncome8 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text = "Other", variable = famIncome8).grid(row = r, column = 1, sticky = W)


        if (val is not None):
            if "Employment" in val:
                famIncome1.set(1)
            if "Government Support" in val:
                famIncome2.set(1)
            if "Public Assistance" in val:
                famIncome3.set(1)
            if "Unemployment Benefits" in val:
                famIncome4.set(1)
            if "Medicaid" in val:
                famIncome5.set(1)
            if "Social Security" in val:
                famIncome6.set(1)
            if "Veterans Benefits" in val:
                famIncome7.set(1)
            if "Other" in val:
                famIncome8.set(1)

        #Source of Family Income Other
        curr.execute("SELECT Other FROM Source_Fam_Income WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        famIncome9 = Entry(ChildInfoSectionframe, width = 19)

        if val is not None:
            famIncome9.insert(0, val)
        else:
            famIncome9.insert(0, 'Unanswered')
            
        famIncome9.grid(row = r, column = 1, sticky = E)

#In Case of Emergency Contact ************************************************************************************************************************
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nIN CASE OF EMERGENCY CONTACT")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #first name
        curr.execute("SELECT Name_First FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nFirst Name ............................................................................................ ")
        emergencyInfo0 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo0.insert(0, val)
        else:
            emergencyInfo0.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo0(emergencyInfo0, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo0.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #last name
        curr.execute("SELECT Name_Last FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        label = Label(ChildInfoSectionframe, text = "\nLast Name ............................................................................................. ")
        emergencyInfo1 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo1.insert(0, val)
        else:
            emergencyInfo1.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo1(emergencyInfo1, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo1.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Relationship to child
        curr.execute("SELECT Relationship_to_Child FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nRelationship to child ............................................................................. ")
        emergencyInfo2 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo2.insert(0, val)
        else:
            emergencyInfo2.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo2(emergencyInfo2, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo2.grid(row = r, column = 1)
        label.grid(row = r, column = 0)
        
        #Home Address
        curr.execute("SELECT Address_Street FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nHome Address ....................................................................................... ")
        emergencyInfo3 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo3.insert(0, val)
        else:
            emergencyInfo3.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo3(emergencyInfo3, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo3.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #City
        curr.execute("SELECT Address_City FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nCity ...................................................................................................... ")
        emergencyInfo4 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo4.insert(0, val)
        else:
            emergencyInfo4.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo4(emergencyInfo4, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo4.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #State
        curr.execute("SELECT Address_State FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nState ..................................................................................................... ")
        emergencyInfo5 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo5.insert(0, val)
        else:
            emergencyInfo5.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo5(emergencyInfo5, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo5.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Zip
        curr.execute("SELECT Address_Zip FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nZip ........................................................................................................ ")
        emergencyInfo6 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo6.insert(0, val)
        else:
            emergencyInfo6.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo6(emergencyInfo6, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo6.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Home Phone Number
        curr.execute("SELECT Phone_Home FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nHome Phone Number ............................................................................. ")
        emergencyInfo7 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo7.insert(0, val)
        else:
            emergencyInfo7.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo7(emergencyInfo7, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo7.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Cell Phone Number
        curr.execute("SELECT Phone_Cell FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nCell Phone Number ............................................................................... ")
        emergencyInfo8 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo8.insert(0, val)
        else:
            emergencyInfo8.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo8(emergencyInfo8, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo8.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

        #Alternate Phone Number
        curr.execute("SELECT Phone_Alt FROM ChildApp_Emergency_Contact WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        label = Label(ChildInfoSectionframe, text = "\nAlternate Phone Number ....................................................................... ")
        emergencyInfo9 = Entry(ChildInfoSectionframe)

        if val is not None:
            emergencyInfo9.insert(0, val)
        else:
            emergencyInfo9.insert(0, 'Unanswered')

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildemergencyInfo9(emergencyInfo9, id, date))

        r = r+1
        buttonUpdate.grid(row = r, column = 2)
        emergencyInfo9.grid(row = r, column = 1)
        label.grid(row = r, column = 0)

#H.E.R.O. Programs ************************************************************************************************************************
        #header               
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nH.E.R.O. FOR CHILDREN PROGRAMS\n")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

    #Program(s) you wish your child to participate in
        label = Label(ChildInfoSectionframe, text = "Program(s) you wish your child to participate in .................................... ")
        r = r+1
        label.grid(row = r, column = 0)
            
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildPrograms0(
            programs0, programs1, programs2, programs3, programs4, id, date))
        buttonUpdate.grid(row = r, column = 2)
        
        curr.execute("SELECT HERO_Programs FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        var = curr.fetchall()[0][0]

        #Super HEROes Program
        programs0 = IntVar()
        Checkbutton(ChildInfoSectionframe, text="Super HEROes Program", variable = programs0).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Super HEROes Program' in var:
            programs0.set(1)

        #Bright HEROs Program
        programs1 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Bright HEROs Program", variable = programs1).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Bright HEROs Program' in var:
            programs1.set(1)
            
        #Camp High Five
        programs2 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Camp High Five", variable = programs2).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Camp High Five' in var:
            programs2.set(1)
            
        #Holiday of HEROs
        programs3 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Holiday of HEROs", variable = programs3).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Holiday of HEROs' in var:
            programs3.set(1)
            
        #Transition to Adulthood
        programs4 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Transition to Adulthood", variable = programs4).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Transition to Adulthood' in var:
            programs4.set(1)

    #Program(s) you would be interested in your child to participating in
        label = Label(ChildInfoSectionframe, text = "\nProgram(s) you would be interested in your child to participating in ...... ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildPrograms1(
            programs5, programs6, programs7, programs8, id, date))
        buttonUpdate.grid(row = r, column = 2)
        
        curr.execute("SELECT Future_Programs FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        var = curr.fetchall()[0][0]
        
        #Healthy HEROs (health curriculum)
        programs5 = IntVar()
        Checkbutton(ChildInfoSectionframe, text="Healthy HEROs", variable = programs5).grid(row = r,  column = 1, sticky = SW)

        if (var is not None) and 'Healthy HEROs' in var:
            programs5.set(1)

        #Career Development/Job Readiness
        programs6 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Career Development/Job Readiness", variable = programs6).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Career Development/Job Readiness' in var:
            programs6.set(1)
            
        #Other
        programs7 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Other", variable = programs7).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Other' in var:
            programs7.set(1)

        #if other
        programs8 = Entry(ChildInfoSectionframe, width = 19)
        programs8.grid(row = r, column = 1, sticky = E)

        curr.execute("SELECT Future_Other FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        if val is not None:
            programs8.insert(0, val)
        else:
            programs8.insert(0, 'Unanswered')
            
#Referral Needs ************************************************************************************************************************
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nREFERRAL NEEDS")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

    #Referral
        label = Label(ChildInfoSectionframe, text = "\nReferral Needs ....................................................................................... ")
        r = r+1
        label.grid(row = r, column = 0)

        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildReferral(
            Referral0, Referral1, Referral2, Referral3, Referral4, Referral5, Referral6, id, date))
        buttonUpdate.grid(row = r, column = 2)
        
        curr.execute("SELECT Referral FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        var = curr.fetchall()[0][0]
        
        #Food
        Referral0 = IntVar()
        Checkbutton(ChildInfoSectionframe, text="Food", variable = Referral0).grid(row = r,  column = 1, sticky = SW)

        if (var is not None) and 'Healthy HEROs' in var:
            Referral0.set(1)

        #Transitional Housing/Shelter
        Referral1 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Transitional Housing/Shelter", variable = Referral1).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Transitional Housing/Shelter' in var:
            Referral1.set(1)

        #Rent/Utilities Assistance
        Referral2 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Rent/Utilities Assistance", variable = Referral2).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Rent/Utilities Assistance' in var:
            Referral2.set(1)

        #Clothing/Furniture
        Referral3 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Clothing/Furniture", variable = Referral3).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Clothing/Furniture' in var:
            Referral3.set(1)

        #Financial/Public Assistance
        Referral4 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Financial/Public Assistance", variable = Referral4).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Financial/Public Assistance' in var:
            Referral4.set(1)

        #Other
        Referral5 = IntVar()
        r = r+1
        Checkbutton(ChildInfoSectionframe, text="Other", variable = Referral5).grid(row = r,  column = 1, sticky = W)

        if (var is not None) and 'Other' in var:
            Referral5.set(1)

        #if other
        Referral6 = Entry(ChildInfoSectionframe, width = 19)
        Referral6.grid(row = r, column = 1, sticky = E)

        curr.execute("SELECT Referral_Other FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        if val is not None:
            Referral6.insert(0, val)
        else:
            Referral6.insert(0, 'Unanswered')

#Statement of Understanding ************************************************************************************************************************
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nSTATEMENT OF UNDERSTANDING")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))
       
        #one
        label = Label(ChildInfoSectionframe, text = "Statement 1 ........................................................................................... ")
        curr.execute("SELECT Statement_One FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        statement0 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement0, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement0, value=2)

        if val is not None:
            if val is 0:
                statement0.set(2)
            else:
                statement0.set(1)

        r = r+1
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildStatement(
            statement0, statement1, statement2, statement3, statement4, statement5, statement6, statement7, id, date))
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #two
        label = Label(ChildInfoSectionframe, text = "Statement 2 .......................................................................................... ")
        curr.execute("SELECT Statement_Two FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        statement1 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement1, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement1, value=2)

        if val is not None:
            if val is 0:
                statement1.set(2)
            else:
                statement1.set(1)
                
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #three
        label = Label(ChildInfoSectionframe, text = "Statement 3 .......................................................................................... ")
        curr.execute("SELECT Statement_Three FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        statement2 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement2, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement2, value=2)

        if val is not None:
            if val is 0:
                statement2.set(2)
            else:
                statement2.set(1)

        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #four
        label = Label(ChildInfoSectionframe, text = "Statement 4 .......................................................................................... ")
        curr.execute("SELECT Statement_Four FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        statement3 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement3, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement3, value=2)

        if val is not None:
            if val is 0:
                statement3.set(2)
            else:
                statement3.set(1)
                
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #five
        label = Label(ChildInfoSectionframe, text = "Statement 5 .......................................................................................... ")
        curr.execute("SELECT Statement_Five FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        statement4 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement4, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement4, value=2)

        if val is not None:
            if val is 0:
                statement4.set(2)
            else:
                statement4.set(1)
                
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #six
        label = Label(ChildInfoSectionframe, text = "Statement 6 .......................................................................................... ")
        curr.execute("SELECT Statement_Six FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        statement5 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement5, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement5, value=2)

        if val is not None:
            if val is 0:
                statement5.set(2)
            else:
                statement5.set(1)
                
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

        #seven
        label = Label(ChildInfoSectionframe, text = "Statement 7 .......................................................................................... ")
        curr.execute("SELECT Statement_Seven FROM Statement_Of_Understanding WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]

        statement6 = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = statement6, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = statement6, value=2)

        if val is not None:
            if val is 0:
                statement6.set(2)
            else:
                statement6.set(1)
        r = r+1
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

 #Signature ************************************************************************************************************************
        #header
        labelParentInfoSection = Label(ChildInfoSectionframe, text = "\n\nSIGNATURE")
        r = r+1
        labelParentInfoSection.grid(row = r, column = 0)
        labelParentInfoSection.config(font=("Helvetica", 20))

        #signature completed
        label = Label(ChildInfoSectionframe, text = "\nSignature .............................................................................................. ")
        curr.execute("SELECT Signature FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        val = curr.fetchall()[0][0]
        
        signature = IntVar()
        Yes = Radiobutton(ChildInfoSectionframe, text = "Yes", variable = signature, value=1)
        No = Radiobutton(ChildInfoSectionframe, text = "No", variable = signature, value=2)

        if val is not None:
            if val is 0:
                signature.set(2)
            else:
                signature.set(1)

        r = r+1
        buttonUpdate = Button(ChildInfoSectionframe, text = "Update", command = lambda:self.updateChildSignature(signature, id, date))
        buttonUpdate.grid(row = r, column = 2)
        Yes.grid(row = r, column = 1, sticky = 'w')
        No.grid(row = r, column = 1, sticky = 'e')
        label.grid(row = r, column = 0)

#Close Database Connection
        self.disConnect(curr, db)
        

#Child Info ************************************************************************************************************************
    def updateChildInfo0(self, childInfo0, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo0.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Name_First = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Childs_Information SET Name_First = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()
        
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo1(self, childInfo1, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo1.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Name_Last = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Childs_Information SET Name_Last = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")
        db.commit()
        
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo2(self, childInfo2, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo2.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Name_Nickname = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Childs_Information SET Name_Nickname = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()
            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo3(self, childInfo3, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo3.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Address_Street = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Childs_Information SET Address_Street = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")
        db.commit()
            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo4(self, childInfo4, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo4.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Address_City = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Childs_Information SET Address_City = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")
        db.commit()
          
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo5(self, childInfo5, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo5.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Address_County = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Childs_Information SET Address_County = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")
        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo6(self, childInfo6, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo6.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Address_Zip = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Childs_Information SET Address_Zip = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nZip code must be only numbers.")

            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo7(self, childInfo7, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo7.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Home_Phone = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 10):
            curr.execute("UPDATE Childs_Information SET Home_Phone = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 10 characters.")
        db.commit()
            

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo8(self, childInfo8, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo8.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Guardian_Phone = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 10):
            curr.execute("UPDATE Childs_Information SET Guardian_Phone = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 10 characters.")
        db.commit()
            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo9(self, childInfo9, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo9.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Guardian_Email = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 70):
            curr.execute("UPDATE Childs_Information SET Guardian_Email = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 70 characters.")
        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo10(self, childInfo10, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo10.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Age = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Childs_Information SET Age = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nAge must be only numbers.")

    def updateChildInfo11(self, childInfo11, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo11.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Birthday = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()
        elif (self.is_date(newVal)):
            curr.execute("UPDATE Childs_Information SET Birthday = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nDate must be if YYYY-MM-DD format\nAnd must be a real date.")
            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo12(self, childInfo12, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo12.get()
        if newVal != '':
            curr.execute("UPDATE Childs_Information SET Gender = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo13(self, childInfo13, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo13.get()
        curr.execute("UPDATE Childs_Information SET HIV_Status = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo14(self, childInfo14, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo14.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET Aware = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo15(self, childInfo15, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo15.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Why = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 100):
            curr.execute("UPDATE Childs_Information SET Why = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 100 characters.")

        db.commit()
         
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo16(self, childInfo16, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo16.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Referral_Source = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 70):
            curr.execute("UPDATE Childs_Information SET Referral_Source = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 70 characters.")
        db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo17(self, childInfo17, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo17.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET School_attending = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Childs_Information SET School_attending = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")
        db.commit()
            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo18(self, childInfo18, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo18.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET School_grade_level = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 12):
            curr.execute("UPDATE Childs_Information SET School_grade_level = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 12 characters.")
        db.commit()
            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo19(self, childInfo19, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo19.get()
        if newVal != '':
            curr.execute("UPDATE Childs_Information SET Ethnicity = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo20(self, childInfo20, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo20.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Ethnicity_Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Childs_Information SET Ethnicity_Other = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")
        db.commit()
            
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo21(self, childInfo21, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo21.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET ADD_ADHD = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo22(self, childInfo22, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo22.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET Learning_Disability = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo23(self, childInfo23, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo23.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET Developmental_Disability = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo24(self, childInfo24, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo24.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET Mental_Health_Issues = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo25(self, childInfo25, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo25.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET Other_Medical_Condition = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo26(self, childInfo26, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo26.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET Victim_of_Abuse = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo27(self, childInfo27, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo27.get()
        if newVal != 0:
            if newVal == 2:
                newVal = 0
            curr.execute("UPDATE Childs_Information SET Criminal_Justice_System = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo28(self, childInfo28, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo28.get()
        if newVal != '':
            curr.execute("UPDATE Childs_Information SET Legal_Custody = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildInfo29(self, childInfo29, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = childInfo29.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Childs_Information SET Custody_Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Childs_Information SET Custody_Other = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")
        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

#Parent Info ************************************************************************************************************************

    def updateChildparentInfo0(self, parentInfo0, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo0.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Name_First = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Parent_Guardian_Information SET Name_First = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo1(self, parentInfo1, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo1.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Name_Last = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Parent_Guardian_Information SET Name_Last = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo2(self, parentInfo2, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo2.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Relationship_to_Child = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Parent_Guardian_Information SET Relationship_to_Child = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo3(self, parentInfo3, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo3.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Age = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Parent_Guardian_Information SET Age = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nAge must be only numbers.")

    def updateChildparentInfo4(self, parentInfo4, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo4.get()
        if newVal != '':
            curr.execute("UPDATE Parent_Guardian_Information SET HIV_Status = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo5(self, parentInfo5, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo5.get()
        if newVal != '':
            curr.execute("UPDATE Parent_Guardian_Information SET Adoptive_Parent = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo6(self, parentInfo6, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo6.get()
        if newVal != '':
            curr.execute("UPDATE Parent_Guardian_Information SET Marital_Status = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo7(self, parentInfo7, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo7.get()
        if newVal != '':
            curr.execute("UPDATE Parent_Guardian_Information SET Education_Completed = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo8(self, parentInfo8, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo8.get()
        if newVal != '':
            curr.execute("UPDATE Parent_Guardian_Information SET Employment_Status = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo9(self, parentInfo9, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo9.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Employment_Company_Name = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Parent_Guardian_Information SET Employment_Company_Name = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo10(self, parentInfo10, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo10.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_Street = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_Street = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo11(self, parentInfo11, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo11.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_City = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_City = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo12(self, parentInfo12, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo12.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_State = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 2):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_State = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 2 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo13(self, parentInfo13, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo13.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_Zip = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Parent_Guardian_Information SET Address_Zip = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nZip code must be only numbers.")
        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo14(self, parentInfo14, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo14.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET WorkPhone = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 10):
            curr.execute("UPDATE Parent_Guardian_Information SET WorkPhone = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 10 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildparentInfo15(self, parentInfo15, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = parentInfo15.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Parent_Guardian_Information SET Email = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 70):
            curr.execute("UPDATE Parent_Guardian_Information SET WorkPhone = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 70 characters.")

        db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

#Absent Parent Info ************************************************************************************************************************

    def updateChildabsParentInfo0(self, absParentInfo0, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo0.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Absent_Parent_Information SET Name_First = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Absent_Parent_Information SET Name_First = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildabsParentInfo1(self, absParentInfo1, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo1.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Absent_Parent_Information SET Name_Last = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Absent_Parent_Information SET Name_Last = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildabsParentInfo2(self, absParentInfo2, id, date):

        #Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo2.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Absent_Parent_Information SET Telephone = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 10):
            curr.execute("UPDATE Absent_Parent_Information SET Telephone = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 10 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildabsParentInfo3(self, absParentInfo3, id, date):

        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo3.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Absent_Parent_Information SET Address_Street = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE Absent_Parent_Information SET Address_Street = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildabsParentInfo4(self, absParentInfo4, id, date):

        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo4.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Absent_Parent_Information SET Address_City = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Absent_Parent_Information SET Address_City = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildabsParentInfo5(self, absParentInfo5, id, date):

        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo5.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Absent_Parent_Information SET Address_County = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE Absent_Parent_Information SET Address_County = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildabsParentInfo6(self, absParentInfo6, id, date):

        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo6.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE Absent_Parent_Information SET Address_Zip = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()
        elif (self.is_number(newVal)):
            curr.execute("UPDATE Absent_Parent_Information SET Address_Zip = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nZip code must be only numbers.")

    def updateChildabsParentInfo7(self, absParentInfo7, id, date):

        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = absParentInfo7.get()
        if newVal != '':
            curr.execute("UPDATE Absent_Parent_Information SET HIV_Status = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

#Household Info ************************************************************************************************************************

    def updateChildhouseInfo(self, count, houseInfo0, houseInfo1, houseInfo2, houseInfo3, houseInfo4, id, date):

        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal0 = houseInfo0.get()
        newVal1 = houseInfo1.get()
        newVal2 = houseInfo2.get()
        newVal3 = houseInfo3.get()
        newVal4 = houseInfo4.get()

        if (newVal0 == 'Unanswered') or (newVal0 == ''):
            newVal0 = None
        elif (len(newVal0) > 30):
            goodData = 0
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nName maximum length is 30 characters.")

        if (newVal1 == 'Unanswered') or (newVal1 == ''):
            newVal1 = None
        elif (len(newVal1) > 25):
            goodData = 0
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nRelationship maximum length is 25 characters.")

        if newVal2 == '':
            newVal2 = None

        goodData = 1
        if (newVal3 == 'Unanswered') or (newVal3 == ''):
            newVal3 = None
        elif (not self.is_number(newVal3)):
            goodData = 0
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nAge must be only numbers.")

        if newVal4 == '':
            newVal4 = None

        if goodData:
            curr.execute("SELECT * FROM Household_Information WHERE ID = %s AND Date_Submitted = %s AND Count = %s;", (id, date, count,))
            current = curr.fetchall()
            if current is ():
                curr.execute("""INSERT INTO Household_Information VALUES
                    (%s, %s, %s, %s, %s, %s, %s, %s);""", 
                    (id, date, count, newVal0, newVal1, newVal2, newVal3, newVal4,))
            else:
                curr.execute("""UPDATE Household_Information 
                    SET Name = %s, Relationship = %s, Sex = %s, Age = %s, HIV_Status = %s 
                    WHERE ID = %s AND Date_Submitted = %s AND Count = %s;""", 
                    (newVal0, newVal1, newVal2, newVal3, newVal4, id, date, count,))

            db.commit()
            
            #feedback
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        
        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildfamIncome0(self, famIncome0, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = famIncome0.get()
        if newVal != '':
            curr.execute("UPDATE Fam_Annual_Income SET Fam_Annual_Income = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildfamIncome1(self, famIncome1, famIncome2, famIncome3, famIncome4, famIncome5, famIncome6, famIncome7, famIncome8, famIncome9, id, date):

        newVal = ''

        if famIncome1.get():
            newVal = newVal + 'Employment,'

        if famIncome2.get():
            newVal = newVal + 'Government Support,'

        if famIncome3.get():
            newVal = newVal + 'Public Assistance,'
        
        if famIncome4.get():
            newVal = newVal + 'Unemployment Benefits,'
        
        if famIncome5.get():
            newVal = newVal + 'Medicaid,'
        
        if famIncome6.get():
            newVal = newVal + 'Social Security,'
        
        if famIncome7.get():
            newVal = newVal + 'Veterans Benefits,'
        
        if famIncome8.get():
            newVal = newVal + 'Other,'

        if newVal == '':
            newVal = None
        else:
            newVal = newVal[:-1]

        otherSource = famIncome9.get()
        if otherSource == '':
            otherSource = None
        
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        curr.execute("UPDATE Source_Fam_Income SET Source_Fam_Income = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))

        if (otherSource == 'Unanswered') or (otherSource == ''):
            curr.execute("UPDATE Source_Fam_Income SET Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif(len(otherSource) <= 30):
            curr.execute("UPDATE Source_Fam_Income SET Other = %s WHERE ID = %s AND Date_Submitted = %s;", (otherSource, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")
        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

#In Case of Emergency Contact ************************************************************************************************************************
    def updateChildemergencyInfo0(self, emergencyInfo0, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo0.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Name_First = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Name_First = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo1(self, emergencyInfo1, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo1.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Name_Last = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Name_Last = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo2(self, emergencyInfo2, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo2.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Relationship_to_Child = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 25):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Relationship_to_Child = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 25 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo3(self, emergencyInfo3, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo3.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_Street = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 50):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_Street = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 50 characters.")

        db.commit()
            
        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo4(self, emergencyInfo4, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo4.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_City = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 30):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_City = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo5(self, emergencyInfo5, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo5.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_State = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 2):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_State = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 2 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db) 


    def updateChildemergencyInfo6(self, emergencyInfo6, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo6.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_Zip = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()
        elif (self.is_number(newVal)):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Address_Zip = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            db.commit()
            tkMessageBox.showinfo("Edit Profile", "Update Sucessful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nZip code must be only numbers.")

        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo7(self, emergencyInfo7, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo7.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Phone_Home = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 10):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Phone_Home = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 10 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo8(self, emergencyInfo8, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo8.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Phone_Cell = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 10):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Phone_Cell = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 10 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db) 

    def updateChildemergencyInfo9(self, emergencyInfo9, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = emergencyInfo9.get()
        if (newVal == 'Unanswered') or (newVal == ''):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Phone_Alt = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newVal) <= 10):
            curr.execute("UPDATE ChildApp_Emergency_Contact SET Phone_Alt = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 10 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

#H.E.R.O. Programs ************************************************************************************************************************

    def updateChildPrograms0(self, programs0, programs1, programs2, programs3, programs4, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''

        if programs0.get():
            newVal = newVal + 'Super HEROes Program,'

        if programs1.get():
            newVal = newVal + 'Bright HEROs Program,'

        if programs2.get():
            newVal = newVal + 'Camp High Five,'

        if programs3.get():
            newVal = newVal + 'Holiday of HEROs,'

        if programs4.get():
            newVal = newVal + 'Transition to Adulthood,'

        if newVal == '':
            curr.execute("UPDATE Child_Application SET HERO_Programs = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Child_Application SET HERO_Programs = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))
        db.commit()
            
        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)


    def updateChildPrograms1(self, programs5, programs6, programs7, programs8, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''

        if programs5.get():
            newVal = newVal + 'Healthy HEROs,'

        if programs6.get():
            newVal = newVal + 'Career Development/Job Readiness,'

        if programs7.get():
            newVal = newVal + 'Other,'

        if newVal == '':
            curr.execute("UPDATE Child_Application SET Future_Programs = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Child_Application SET Future_Programs = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))

        newValOther = programs8.get()
        if (newValOther == 'Unanswered') or (newValOther == ''):
            curr.execute("UPDATE Child_Application SET Future_Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        elif (len(newValOther) >= 30):
            curr.execute("UPDATE Child_Application SET Future_Other = %s WHERE ID = %s AND Date_Submitted = %s;", (newValOther, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")
        db.commit()


        #Close Database Connection
        self.disConnect(curr, db)

#Referral Needs ************************************************************************************************************************

    def updateChildReferral(self, Referral0, Referral1, Referral2, Referral3, Referral4, Referral5, Referral6, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        #Execute
        newVal = ''

        if Referral0.get():
            newVal = newVal + 'Food,'

        if Referral1.get():
            newVal = newVal + 'Transitional Housing/Shelter,'

        if Referral2.get():
            newVal = newVal + 'Rent/Utilities Assistance,'

        if Referral3.get():
            newVal = newVal + 'Clothing/Furniture,'

        if Referral4.get():
            newVal = newVal + 'Financial/Public Assistance,'

        if Referral5.get():
            newVal = newVal + 'Other,'

        if newVal == '':
            curr.execute("UPDATE Child_Application SET Referral = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
        else:
            newVal = newVal[:-1]
            curr.execute("UPDATE Child_Application SET Referral = %s WHERE ID = %s AND Date_Submitted = %s;", (newVal, id, date,))

        newValOther = Referral6.get()
        if (newValOther == 'Unanswered') or (newValOther == ''):
            curr.execute("UPDATE Child_Application SET Referral_Other = NULL WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        elif(len(newValOther) <= 30):
            curr.execute("UPDATE Child_Application SET Referral_Other = %s WHERE ID = %s AND Date_Submitted = %s;", (newValOther, id, date,))
            tkMessageBox.showinfo("Edit Profile", "Update Successful!")
        else:    
            tkMessageBox.showinfo("Edit Profile", "Update Unsucessful\n\nMaximum length is 30 characters.")

        db.commit()

        #Close Database Connection
        self.disConnect(curr, db)

#Statement of Understanding & signeture **************************************************************************************************************

    def updateChildStatement(self, statement0, statement1, statement2, statement3, statement4, statement5, statement6, statement7, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        s0 = statement0.get()
        if s0 == 0:
            s0 = None
        elif s0 == 2:
            s0 = 0

        s1 = statement1.get()
        if s1 == 0:
            s1 = None
        elif s1 == 2:
            s1 = 0

        s2 = statement2.get()
        if s2 == 0:
            s2 = None
        elif s2 == 2:
            s2 = 0

        s3 = statement3.get()
        if s3 == 0:
            s3 = None
        elif s3 == 2:
            s3 = 0

        s4 = statement4.get()
        if s4 == 0:
            s4 = None
        elif s4 == 2:
            s4 = 0

        s5 = statement5.get()
        if s5 == 0:
            s5 = None
        elif s5 == 2:
            s5 = 0

        s6 = statement6.get()
        if s6 == 0:
            s6 = None
        elif s6 == 2:
            s6 = 0

        curr.execute("""UPDATE Statement_Of_Understanding SET Statement_One = %s, Statement_Two = %s, Statement_Three = %s, Statement_Four = %s,
            Statement_Five = %s, Statement_Six = %s, Statement_Seven = %s WHERE ID = %s AND Date_Submitted = %s;""",
            (s0, s1, s2, s3, s4, s5, s6, id, date,))
        db.commit()

        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)

    def updateChildSignature(self, signature, id, date):
        #Open Database Connection
        db = self.connect()
        curr = db.cursor()

        newVal = signature.get()
        if newVal == 0:
            newVal = None
        elif newVal == 2:
            newVal = 0

        curr.execute("""UPDATE Child_Application SET Signature = %s WHERE ID = %s AND Date_Submitted = %s;""", (newVal, id, date,))
        db.commit()

        #feedback
        tkMessageBox.showinfo("Edit Profile", "Update Successful!")

        #Close Database Connection
        self.disConnect(curr, db)


#check string entry is a number
    def is_number(self, s):
        try:
            int(s)
            return True
        except ValueError:
            return False

#check string entry is a date (YYYY-MM-DD)
    def is_date(self, s):
        if len(s) != 10:
            return False
        if (s[4] != s[7]) or (s[4] != '-') or (not self.is_number(s[0:4])) or (not self.is_number(s[5:7])) or (not self.is_number(s[-2:])):
            return False
        if (1 > int(s[0:4])) or (1 > int(s[5:7])) or (int(s[5:7]) > 12) or (1 > int(s[-2:])):
            return False
        if int(s[5:7]) == 02:
            if (int(s[-2:]) > 29):
                return False
        elif (int(s[5:7]) == 04) or (int(s[5:7]) == 06) or (int(s[5:7]) == 9) or (int(s[5:7]) == 11):
            if (int(s[-2:]) > 30): 
                return False
        elif int(s[-2:]) > 31:
            return False

        return True


#button definitions
    def deleteChildApp(self, id, date):
        if askyesno('Verify', 'Really delete?'):
            #Delete application from database

            #Open Database Connection
            db = self.connect()
            curr = db.cursor()

            #Execute
            curr.execute("DELETE FROM Child_Application WHERE ID = %s AND Date_Submitted = %s;", (id, date,))
            db.commit()

            #Close Database Connection
            self.disConnect(curr, db)

            #UI feedback
            showwarning('Delete', 'Application Deleted')

            self.backSecondChildProfilePage(id)

        else:
            #Delete cancelled
            showinfo('No', 'Delete has been cancelled')

    def onFrameConfigure(self, event):
        self.canvas.configure(scrollregion = self.canvas.bbox("all"))


root = Tk()
Main(root)
root.mainloop()
